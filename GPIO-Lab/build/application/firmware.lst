
build/application/firmware.elf:     file format elf32-littlearm
build/application/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000125ed

Program Header:
0x70000001 off    0x000194b4 vaddr 0x000194b4 paddr 0x000194b4 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x000094bc memsz 0x000094bc flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x000194bc align 2**16
         filesz 0x0000023c memsz 0x0000023c flags rw-
    LOAD off    0x00020240 vaddr 0x10000240 paddr 0x10000240 align 2**16
         filesz 0x00000000 memsz 0x0000036c flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            000094b4  00010000  00010000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            0000023c  10000000  000194bc  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  0002023c  2**2  CONTENTS
  3 .bss             0000036c  10000240  10000240  00020240  2**3  ALLOC
  4 .ARM.exidx       00000008  000194b4  000194b4  000194b4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .uninit_RESERVED 00000000  10000000  10000000  0002023c  2**2  CONTENTS
  6 .noinit_RAM2     00000000  20000000  20000000  0002023c  2**2  CONTENTS
  7 .noinit          00000000  100005ac  100005ac  0002023c  2**2  CONTENTS
  8 .ARM.attributes  00000030  00000000  00000000  0002023c  2**0  CONTENTS, READONLY
  9 .comment         0000007e  00000000  00000000  0002026c  2**0  CONTENTS, READONLY
 10 .debug_info      000358ec  00000000  00000000  000202ea  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev    0000418c  00000000  00000000  00055bd6  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges   00000c70  00000000  00000000  00059d62  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges    00000be0  00000000  00000000  0005a9d2  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_line      000062d0  00000000  00000000  0005b5b2  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_str       000194dd  00000000  00000000  00061882  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame     000030e4  00000000  00000000  0007ad60  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
10000240 l    d  .bss	00000000 .bss
000194b4 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
100005ac l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 interrupt.cpp
00012bc8 l     F .text	0000002c NVIC_EnableIRQ
00012bf4 l     F .text	00000054 NVIC_SetPriority
00010000 l     O .text	000000e4 kInterruptVectorTable
0001805c l     O .text	0000000e InterruptLookupHandler::file
0001806c l     O .text	0000001e InterruptLookupHandler::__PRETTY_FUNCTION__
0001022c l       .text	00000000 handler2_address_const
00000000 l    df *ABS*	00000000 startup.cpp
00017c70 l     O .text	00000049 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__
00017d18 l     O .text	0000005c Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00017cbc l     O .text	0000005a Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__
00017d74 l     O .text	0000003a Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__
00017db0 l     O .text	0000003e Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__
10000088 l     O .data	00000008 (anonymous namespace)::system_timer
10000090 l     O .data	00000004 (anonymous namespace)::system_controller
10000094 l     O .data	0000000c (anonymous namespace)::timer0
00012494 l     F .text	00000040 (anonymous namespace)::Lpc40xxUptime()
00017b58 l     O .text	0000000c LowLevelInit()::file
00017df0 l     O .text	00000014 LowLevelInit()::__PRETTY_FUNCTION__
000102fc l     O .text	00000004 kCrpWord
00012adc l     F .text	000000dc __static_initialization_and_destruction_0(int, int)
00012bb8 l     F .text	0000000e _GLOBAL__sub_I_UptimeRTOS
00000000 l    df *ABS*	00000000 /mnt/d/code/146lab/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /mnt/d/code/146lab/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00010324 l     F .text	00000000 __do_global_dtors_aux
10000240 l       .bss	00000001 completed.9929
00010348 l     F .text	00000000 frame_dummy
10000244 l       .bss	00000018 object.9934
0001030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 diskio.cpp
000192ec l     O .text	0000001c Gpio::ValidPortCheck()::__PRETTY_FUNCTION__
00019308 l     O .text	00000039 Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
000192b0 l     O .text	0000003b Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__
00019344 l     O .text	00000031 Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__
00019378 l     O .text	0000003c Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__
000193b4 l     O .text	00000034 Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__
000193e8 l     O .text	00000069 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__
10000540 l     O .bss	00000068 (anonymous namespace)::sd_card
00016e20 l     F .text	00000050 __static_initialization_and_destruction_0(int, int)
00016e70 l     F .text	00000028 _GLOBAL__sub_I_disk_status
00000000 l    df *ABS*	00000000 LabGPIO.cpp
000173b4 l     O .text	0000000c LabGPIO::LabGPIO(unsigned char, unsigned char)::file
000173c0 l     O .text	0000000c LabGPIO::LabGPIO(unsigned char, unsigned char)::file
0001745c l     O .text	00000023 LabGPIO::LabGPIO(unsigned char, unsigned char)::__PRETTY_FUNCTION__
00000000 l    df *ABS*	00000000 main.cpp
10000260 l     O .bss	00000008 (anonymous namespace)::uptime
0001063c l     F .text	00000030 (anonymous namespace)::DefaultUptime()
00017480 l     O .text	00000009 main::file
000174dc l     O .text	0000000b main::__PRETTY_FUNCTION__
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 tasks.c
100003c8 l     O .bss	00000064 pxReadyTasksLists
1000042c l     O .bss	00000004 uxTopReadyPriority
10000430 l     O .bss	00000004 xYieldPending
10000434 l     O .bss	00000004 uxSchedulerSuspended
10000438 l     O .bss	00000004 ulTaskSwitchedInTime
1000043c l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 port.c
00013090 l       .text	00000000 pxCurrentTCBConst2
00013100 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 printf.cpp
00013108 l     F .text	00000030 _out_null(char, void*, unsigned int, unsigned int)
00013138 l     F .text	00000044 _out_char(char, void*, unsigned int, unsigned int)
0001317c l     F .text	00000044 _strlen(char const*)
000131c0 l     F .text	00000044 _is_digit(char)
00013204 l     F .text	00000060 _atoi(char const**)
00013264 l     F .text	0000025c _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
000134c0 l     F .text	000000e4 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
000135a4 l     F .text	000000f4 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
0001808c l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00013698 l     F .text	00000438 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00013ad0 l     F .text	000008f4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
100001dc l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00010cfc  w    F .text	0000003e Lpc40xxSystemController::GetPeripheralFrequency() const
00012e6c g     F .text	00000038 putchar
00012c48  w    F .text	0000006c Pwm0IrqHandler
00018cec  w    O .text	00000009 Gpio::SetInterruptEdge(GpioInterface::Edge)::file
00010218 g     F .text	0000001c HardFaultHandler
00012ddc g     F .text	00000024 _getpid
00012e30 g     F .text	0000003c _putchar
00010590 g     F .text	00000060 LabGPIO::Read()
00012c48  w    F .text	0000006c EepromIrqHandler
00012c48  w    F .text	0000006c Timer2IrqHandler
10000074  w    O .data	00000014 uart0
00012f70 g     F .text	0000002c GetStackDepth()
0001905c  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00014e10  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
00017b20  w    O .text	00000004 Timer::kTimerIrq
00019094  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
0001738c g     F .text	00000024 _kill_r
0001010c g       .text	00000000 bss_section_table_end
000143c4 g     F .text	0000004c printf
1000000c  w    O .data	00000004 SystemTimer::sys_tick
00012c48  w    F .text	0000006c I2c1IrqHandler
00012694  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)2>()
10000024  w    O .data	00000010 Uart::uart
000190c4  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00010000 g       *ABS*	00000000 __vectors_start__
0001066c  w    F .text	00000044 Milliseconds()
00010e60  w    F .text	00000110 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)
00014e60  w    F .text	00000034 SspInterface::SspInterface()
00012c48  w    F .text	0000006c BusFaultHandler
100002c0 g     O .bss	00000100 stack_trace
10000010  w    O .data	00000004 Pin::pin_map
00011ce0  w    F .text	000000e4 Uart::Initialize(unsigned long)
20000000 g       *ABS*	00000000 __base_RAM2
000194bc g       .ARM.exidx	00000000 __exidx_end
00014d00  w    F .text	0000007c Gpio::ClearEdgeRising()
00011148  w    F .text	00000030 Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)
00018ce0  w    O .text	00000009 Gpio::ValidPortCheck()::file
100003c4 g     O .bss	00000004 pxCurrentTCB
00014410  w    F .text	00000034 PinInterface::PinInterface()
00012f2c g     F .text	0000001c __cyg_profile_func_exit
00016ab0  w    F .text	00000048 Sd::Crc7Add(unsigned char, unsigned char)
000159c8  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
000128fc  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()
100005a8 g     O .bss	00000004 errno
000194bc g       .ARM.exidx	00000000 _etext
10000004  w    O .data	00000004 Lpc40xxSystemController::system_controller
00010be8  w    F .text	00000090 Lpc40xxSystemController::SetClockFrequency(unsigned char)
00011ab0  w    F .text	00000030 unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)
00010ce8  w    F .text	00000014 Lpc40xxSystemController::GetSystemFrequency() const
000122a4  w    F .text	000001f0 Uart::GenerateUartCalibration(float)
10000188  w    O .data	00000018 Gpio::gpio_port
00011ae0  w    F .text	000000f8 Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)
00012514  w    F .text	000000bc LowLevelInit()
00012c48  w    F .text	0000006c LcdIrqHandler
000190ec  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00080000 g       *ABS*	00000000 __top_MFlash512
00015160  w    F .text	0000006c Ssp::Transfer(unsigned short)
00011f44  w    F .text	000000f8 Uart::Receive(unsigned long)
00010e00  w    F .text	00000030 Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)
000107cc  w    F .text	00000030 Delay(unsigned long long)
00017b48  w    O .text	00000010 Uart::kPowerbit
00012c48  w    F .text	0000006c I2c2IrqHandler
10000268  w    O .bss	00000004 SystemTimer::system_timer_isr
00014bc8  w    F .text	00000040 Gpio::DetachInterrupt()
00012c48  w    F .text	0000006c CanIrqHandler
000117fc  w    F .text	00000074 Pin::EnableDac(bool)
000105f0 g     F .text	0000004c LabGPIO::ReadBool()
0001152c  w    F .text	0000007c Pin::SetAsAnalogMode(bool)
000110e0  w    F .text	00000068 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)
00016b68  w    F .text	000000fc Sd::GetCrc16(unsigned char*, unsigned short)
00016fc4 g     F .text	00000000 .hidden __aeabi_uldivmod
100005ac g       .noinit	00000000 _noinit
00012ea4 g     F .text	00000060 puts
100000a0 g     O .data	000000e4 dynamic_isr_vector_table
000148e8  w    F .text	0000002c Gpio::GetPin()
00014990  w    F .text	0000005c Gpio::SetInterruptRoutine(void (*)())
0001449c  w    F .text	00000034 GpioInterface::GpioInterface()
00014e60  w    F .text	00000034 SspInterface::SspInterface()
00012c48  w    F .text	0000006c RitIrqHandler
00012c48  w    F .text	0000006c Uart2IrqHandler
00011870  w    F .text	00000064 Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)
00017af8  w    O .text	00000016 Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file
0001907c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000154c4  w    F .text	00000160 Ssp::GetPeripheralMode()
0001299c  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()
00016ec4 g     F .text	00000060 roundf
0001732c g     F .text	00000050 _raise_r
000106dc  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::_FUN()
00014e34  w    F .text	0000002c int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)
00014e94  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10010000 g       *ABS*	00000000 __top_RAM
00017b44  w    O .text	00000004 Uart::kRxUartPortFunction
000130a0 g     F .text	00000066 xPortPendSVHandler
00010708  w    F .text	000000c4 Wait(unsigned long long)
00015994  w    F .text	00000034 SdInterface::SdInterface()
00011bd8  w    F .text	0000003c Timer::GetTimer()
10000000 g       *ABS*	00000000 __base_RamLoc64
00012f48 g     F .text	00000028 GetStackTrace()
10000184 g     O .data	00000004 out
10000008  w    O .data	00000004 Lpc40xxSystemController::speed_in_hertz
000190cc  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000190b4  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000173b0 g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
0001914c  w    O .text	0000004c vtable for Ssp
10010000 g       *ABS*	00000000 StackTop
00015e78  w    F .text	00000064 Sd::WaitToReadBlock()
00018d04  w    O .text	00000003 Ssp::kPinSelect
00016ff4 g     F .text	000002cc .hidden __udivmoddi4
00012c48  w    F .text	0000006c I2sIrqHandler
000100fc g       .text	00000000 bss_section_table
00010300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
000125ec g     F .text	00000030 ResetIsr
00015e34  w    F .text	00000044 Sd::ToBool(bool)
00019198  w    O .text	00000028 vtable for SspInterface
00012c48  w    F .text	0000006c PendSVHandler
00015228  w    F .text	00000030 unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)
000111e8  w    F .text	00000034 SystemTimer::SetIsrFunction(void (*)())
00016ca0  w    F .text	00000044 bool bit::Read<unsigned long>(unsigned long, unsigned long)
000150e8  w    F .text	00000078 Ssp::IsTransferRegBusy()
00012c48  w    F .text	0000006c UsageFaultHandler
20000000 g       *ABS*	00000000 __user_heap_base
000194b4 g       .text	00000000 __exidx_start
00011714  w    F .text	00000074 Pin::EnableI2cHighCurrentDrive(bool)
00012c48  w    F .text	0000006c Uart4IrqHandler
000149ec  w    F .text	00000054 Gpio::ClearInterruptRoutine()
00011698  w    F .text	0000007c Pin::EnableI2cHighSpeedMode(bool)
000101fc g     F .text	00000018 InitFpu()
000115a8  w    F .text	0000007c Pin::EnableDigitalFilter(bool)
000172d4 g     F .text	00000048 __libc_init_array
00012c48 g     F .text	0000006c InterruptLookupHandler
00010e30  w    F .text	00000030 Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)
00010cd0  w    F .text	00000018 Lpc40xxSystemController::GetPeripheralClockDivider() const
10000000  w    O .data	00000004 Uptime
0001922c  w    O .text	00000048 vtable for GpioInterface
00011e10  w    F .text	000000e8 Uart::Send(unsigned char)
000172c4 g     F .text	0000000e abort
00012c48  w    F .text	0000006c BodIrqHandler
00015810  w    F .text	00000184 Ssp::GetClock()
00010300 g     F .text	00000000 _init
0001010c g       .text	00000000 section_table_end
00012a3c  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()
00016eb8 g     F .text	0000000a std::terminate()
00016f24 g     F .text	0000009e .hidden __aeabi_d2f
00014d7c  w    F .text	0000007c Gpio::ClearEdgeFalling()
00012c48  w    F .text	0000006c SysTickHandler
000100e4 g       .text	00000000 section_table_start
100005ac g       .bss	00000000 _ebss
00014c84  w    F .text	0000007c Gpio::SetEdgeFalling()
0001908c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00012c48  w    F .text	0000006c RtcIrqHandler
00014878  w    F .text	00000070 Gpio::Read()
0001270c  w    F .text	000000a8 Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})
eff826d6 g       *ABS*	00000000 ValidUserCodeChecksum
00012c48  w    F .text	0000006c Uart0IrqHandler
00012d10 g     F .text	00000078 GetRegistersFromStack
00016c64  w    F .text	0000003c unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)
00019274  w    O .text	0000003c vtable for PinInterface
00012c48  w    F .text	0000006c UsbIrqHandler
00012c48  w    F .text	0000006c AdcIrqHandler
00011ef8  w    F .text	0000004c Uart::Receive(unsigned long)::{lambda()#1}::operator()() const
00010bb8  w    F .text	00000030 SetUptimeFunction(unsigned long long (*)())
00010364 g     F .text	00000138 LabGPIO::LabGPIO(unsigned char, unsigned char)
00019454 g     O .text	00000020 __sf_fake_stderr
00018d5c  w    O .text	00000100 Sd::kCrcTable8
00016ea8 g     F .text	00000010 std::get_terminate()
000121ac  w    F .text	00000074 Uart::FractionalEstimate(float, float)
00014a70  w    F .text	00000088 Gpio::SetInterruptEdge(GpioInterface::Edge)
00012c48  w    F .text	0000006c EnetIrqHandler
00012c48  w    F .text	0000006c DmaIrqHandler
0001010c g     F .text	00000090 InitDataSection()
00012cb4 g     F .text	0000005c RegisterIsr(IRQn, void (*)(), bool, long)
0001049c g     F .text	00000044 LabGPIO::SetAsInput()
00000000 g       *ABS*	00000000 __base_Flash
00012c48  w    F .text	0000006c Eint1IrqHandler
100001c8  w    O .data	0000000c Ssp::ssp_registers
00012c48  w    F .text	0000006c SvcHandler
00012c48  w    F .text	0000006c GpioIrqHandler
000190dc  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
00012c48  w    F .text	0000006c SdioIrqHandler
10010000 g       *ABS*	00000000 __top_RamLoc64
10000240 g       .bss	00000000 _bss
00019074  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00012c48  w    F .text	0000006c Pll1IrqHandler
00012c48  w    F .text	0000006c MemManageHandler
000104e0 g     F .text	00000040 LabGPIO::SetAsOutput()
00016e98 g     F .text	00000006 __cxa_pure_virtual
00012c48  w    F .text	0000006c Pwm1IrqHandler
00014a40  w    F .text	00000030 unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)
00012c48  w    F .text	0000006c Timer0IrqHandler
000127b4  w    F .text	000000a8 Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})
00080000 g       *ABS*	00000000 __top_Flash
00012220  w    F .text	00000084 Uart::IsDecmial(float)
00015624  w    F .text	000001ec Ssp::SetClock(bool, bool, unsigned char, unsigned char)
100005ac g       .noinit	00000000 _end_noinit
00011178  w    F .text	0000003c SystemTimer::DisableTimer()
000164f0  w    F .text	00000120 Sd::DeleteBlock(unsigned long, unsigned long)
00012f9c g     F .text	000000c8 vTaskSwitchContext
00016d58  w    F .text	00000054 unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)
00014444  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
00015288  w    F .text	00000030 unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)
0001909c  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00017b40  w    O .text	00000004 Uart::kTxUartPortFunction
00012c48  w    F .text	0000006c Uart3IrqHandler
00014df8  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
000190d4  w    O .text	00000007 Sd::DeleteBlock(unsigned long, unsigned long)::file
20000000 g       *ABS*	00000000 __base_RamPeriph32
00018cf8  w    O .text	00000009 Gpio::ClearInterruptEdge(GpioInterface::Edge)::file
100003c0 g     O .bss	00000004 stack_depth
00014794  w    F .text	0000006c Gpio::Toggle()
000190ac  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00018e5c  w    O .text	00000200 Sd::kCrcTable16
10000440  w    O .bss	00000100 Gpio::interrupthandlers
000172c0  w    F .text	00000002 .hidden __aeabi_ldiv0
00012c48  w    F .text	0000006c Timer1IrqHandler
00012138  w    F .text	00000074 Uart::DividerEstimate(float, float)
00014688  w    F .text	00000064 Gpio::SetHigh()
0001203c  w    F .text	000000fc Uart::FindClosestFractional(float)
00014f20  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
000100e4 g       .text	00000000 data_section_table
000113c4  w    F .text	00000080 Pin::SetMode(PinInterface::Mode)
00017ab0  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
00015edc  w    F .text	00000050 Sd::WaitWhileBusy()
000112b8  w    F .text	00000094 SystemTimer::SetTickFrequency(unsigned long)
00019474 g     O .text	00000020 __sf_fake_stdin
00016dac  w    F .text	00000074 unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
000102fc g       .text	00000000 __CRP_WORD_START__
00017b24  w    O .text	00000010 Timer::kTimerIsr
00014b80  w    F .text	00000048 Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)
00012c48  w    F .text	0000006c Uart1IrqHandler
0001454c  w    F .text	0000007c Gpio::SetAsInput()
00012f04 g     F .text	00000028 __cyg_profile_func_enter
0001731c g     F .text	00000010 memset
000107fc g     F .text	0000018c main
000159c8  w    F .text	000000a0 Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)
100001a0  w    O .data	00000028 Gpio::interrupt
0001195c  w    F .text	00000020 Timer::DoNothingIsr()
00012c48  w    F .text	0000006c QeiIrqHandler
20000000 g       *ABS*	00000000 heap
00012c48  w    F .text	0000006c Ssp2IrqHandler
000118d4  w    F .text	0000002c Pin::GetPort() const
00016344  w    F .text	000001ac Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)
00014444  w    F .text	00000058 Pin::Pin(unsigned char, unsigned char)
00016f24 g     F .text	0000009e .hidden __truncdfsf2
00010318 g       .text	00000000 __init_array_end
00013070 g     F .text	00000026 vPortSVCHandler
00012d88 g     F .text	0000003c FirmwareStdOut(int)
000190f4  w    O .text	0000002c vtable for Sd
00014af8  w    F .text	00000088 Gpio::ClearInterruptEdge(GpioInterface::Edge)
00012c48  w    F .text	0000006c Ssp1IrqHandler
0001261c  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)0>()
00018d50  w    O .text	0000000c Ssp::kPowerBit
00011900  w    F .text	0000002c Pin::GetPin() const
00011c14  w    F .text	000000cc Uart::SetBaudRate(unsigned long)
00014644  w    F .text	00000044 Gpio::SetDirection(GpioInterface::Direction)
00017b64  w    O .text	0000003c vtable for Uart
000145c8  w    F .text	0000007c Gpio::SetAsOutput()
000190bc  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
00010f70  w    F .text	00000170 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)
000146ec  w    F .text	00000064 Gpio::SetLow()
00017c4c  w    O .text	00000024 vtable for Lpc40xxSystemController
00015f2c  w    F .text	00000418 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)
000190e4  w    O .text	00000007 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file
00017a98  w    O .text	00000016 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file
000125d0 g     F .text	0000001a SystemInit
0001197c  w    F .text	00000134 Timer::Initialize(unsigned long, void (*)(), long)
00010d3c  w    F .text	00000030 Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)
20008000 g       *ABS*	00000000 heap_end
00015004  w    F .text	000000e4 Ssp::Initialize()
00017ba0  w    O .text	00000038 vtable for Timer
00014e94  w    F .text	00000038 PinInterface::PinInterface(PinInterface const&)
10000014  w    O .data	00000010 Timer::tim_register
00012c48  w    F .text	0000006c Ssp0IrqHandler
00010364 g     F .text	00000138 LabGPIO::LabGPIO(unsigned char, unsigned char)
00010318 g     F .text	00000000 _fini
00012c48  w    F .text	0000006c UsbactivityIrqHandler
00014750  w    F .text	00000044 Gpio::Set(GpioInterface::State)
00012c48  w    F .text	0000006c Pll0IrqHandler
00014ecc  w    F .text	00000054 Pin::Pin(Pin const&)
000100fc g       .text	00000000 data_section_table_end
00012c48  w    F .text	0000006c CanactivityIrqHandler
00012c48  w    F .text	0000006c NmiHandler
00018d08  w    O .text	00000048 Ssp::kSspPinMatrix
00010988 g     F .text	00000084 toggleLED(LabGPIO, LabGPIO)
00014800  w    F .text	00000078 Gpio::ReadState()
00019084  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
100001d8 g     O .data	00000004 _impure_ptr
00010a0c  w    F .text	000000ac Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00016af8  w    F .text	00000070 Sd::GetCrc7(unsigned char*, unsigned char)
00012c48  w    F .text	0000006c McpwmIrqHandler
0001030c g       .text	00000000 __preinit_array_end
00012c48  w    F .text	0000006c WdtIrqHandler
000106b0  w    F .text	0000002c Wait(unsigned long long)::{lambda()#1}::operator()() const
00016610  w    F .text	000004a0 Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)
00014e10  w    F .text	00000024 Lpc40xxSystemController::Lpc40xxSystemController()
00017bd8  w    O .text	0000003c vtable for Pin
10000000 g       .data	00000000 _data
000114b8  w    F .text	00000074 Pin::SetAsActiveLow(bool)
00010dd0  w    F .text	00000030 Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)
00014c08  w    F .text	0000007c Gpio::SetEdgeRising()
00019064  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
0001192c  w    F .text	00000030 unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)
100002ac  w    O .bss	00000010 Timer::user_timer_isr
00017ac8  w    O .text	00000016 Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file
1000026c  w    O .bss	00000040 Timer::match
00010558 g     F .text	00000038 LabGPIO::SetLow()
00011dc4  w    F .text	0000004c Uart::Send(unsigned char)::{lambda()#1}::operator()() const
00015b18  w    F .text	0000031c Sd::Mount(SdInterface::CardInfo_t*)
100001d4 g     O .data	00000004 __cxxabiv1::__terminate_handler
000191c0  w    O .text	00000024 vtable for SystemControllerInterface
000191e4  w    O .text	00000048 vtable for Gpio
1000023c g       .data	00000000 _edata
00017b10  w    O .text	00000010 Timer::kPowerbit
00012658  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)1>()
00011444  w    F .text	00000074 Pin::EnableHysteresis(bool)
0001449c  w    F .text	00000034 GpioInterface::GpioInterface()
00012c48  w    F .text	0000006c DebugMonHandler
00014914  w    F .text	0000007c Gpio::ValidPortCheck()
00012c48  w    F .text	0000006c Eint2IrqHandler
20008000 g       *ABS*	00000000 __top_RamPeriph32
00014f20  w    F .text	000000e4 Ssp::Ssp(Ssp::Peripheral)
00012c48  w    F .text	0000006c Timer3IrqHandler
00010520 g     F .text	00000038 LabGPIO::SetHigh()
10000000 g       *ABS*	00000000 __base_RAM
00012c48  w    F .text	0000006c Eint3IrqHandler
00016e9e g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00012e00 g     F .text	00000030 _kill
00012c48  w    F .text	0000006c I2c0IrqHandler
00014ecc  w    F .text	00000054 Pin::Pin(Pin const&)
00017b34  w    O .text	0000000a Timer::Initialize(unsigned long, void (*)(), long)::file
000111b4  w    F .text	00000034 SystemTimer::SystemTimerHandler()
0001906c  w    O .text	00000007 Sd::Mount(SdInterface::CardInfo_t*)::file
00019494 g     O .text	00000020 __sf_fake_stdout
00010ab8  w    F .text	00000100 debug::PrintBacktrace(bool, void*)
0001030c g       .text	00000000 __init_array_start
000172c0  w    F .text	00000002 .hidden __aeabi_idiv0
00019120  w    O .text	0000002c vtable for SdInterface
00015a68  w    F .text	000000b0 Sd::Initialize()
00012dc4 g     F .text	00000018 _exit
00011624  w    F .text	00000074 Pin::EnableFastMode(bool)
0001285c  w    F .text	000000a0 void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()
00012c48  w    F .text	0000006c Eint0IrqHandler
0001121c  w    F .text	0000009c SystemTimer::StartTimer()
00015258  w    F .text	00000030 unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)
0001019c g     F .text	00000060 InitBssSection()
000144d0  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
000124d4 g     F .text	00000040 UptimeRTOS
00011788  w    F .text	00000074 Pin::SetAsOpenDrain(bool)
00017c14  w    O .text	00000038 vtable for SystemTimer
00012c48  w    F .text	0000006c SpiIrqHandler
000190a4  w    O .text	00000007 Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file
000151cc  w    F .text	0000005c Ssp::SetSpiMasterDefault()
10000034  w    O .data	00000040 Uart::pairs
00014df8  w    F .text	00000018 SystemControllerInterface::SystemControllerInterface()
00010d6c  w    F .text	00000030 Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)
00015994  w    F .text	00000034 SdInterface::SdInterface()
0001030c g       .text	00000000 __preinit_array_start
00017ae0  w    O .text	00000016 Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file
00010d9c  w    F .text	00000034 Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)
100002bc  w    O .bss	00000004 guard variable for Timer::match
000152b8  w    F .text	0000020c Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)
0001134c  w    F .text	00000078 Pin::SetPinFunction(unsigned char)
00016ce4  w    F .text	00000074 unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00014410  w    F .text	00000034 PinInterface::PinInterface()
00010c78  w    F .text	00000058 Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)
000144d0  w    F .text	0000007c Gpio::Gpio(unsigned char, unsigned char)
000126d0  w    F .text	0000003c void Timer::TimerHandler<(TimerInterface::TimerPort)3>()
0001737c g     F .text	00000010 raise



Disassembly of section .text:

00010000 <kInterruptVectorTable>:
   10000:	00 00 01 10 ed 25 01 00 49 2c 01 00 19 02 01 00     .....%..I,......
   10010:	49 2c 01 00 49 2c 01 00 49 2c 01 00 d6 26 f8 ef     I,..I,..I,...&..
	...
   1002c:	71 30 01 00 49 2c 01 00 00 00 00 00 a1 30 01 00     q0..I,.......0..
   1003c:	49 2c 01 00 49 2c 01 00 49 2c 01 00 49 2c 01 00     I,..I,..I,..I,..
   1004c:	49 2c 01 00 49 2c 01 00 49 2c 01 00 49 2c 01 00     I,..I,..I,..I,..
   1005c:	49 2c 01 00 49 2c 01 00 49 2c 01 00 49 2c 01 00     I,..I,..I,..I,..
   1006c:	49 2c 01 00 49 2c 01 00 00 00 00 00 49 2c 01 00     I,..I,......I,..
   1007c:	49 2c 01 00 49 2c 01 00 49 2c 01 00 49 2c 01 00     I,..I,..I,..I,..
   1008c:	49 2c 01 00 49 2c 01 00 49 2c 01 00 49 2c 01 00     I,..I,..I,..I,..
   1009c:	49 2c 01 00 49 2c 01 00 49 2c 01 00 49 2c 01 00     I,..I,..I,..I,..
   100ac:	49 2c 01 00 49 2c 01 00 49 2c 01 00 49 2c 01 00     I,..I,..I,..I,..
   100bc:	49 2c 01 00 49 2c 01 00 49 2c 01 00 49 2c 01 00     I,..I,..I,..I,..
   100cc:	49 2c 01 00 49 2c 01 00 49 2c 01 00 49 2c 01 00     I,..I,..I,..I,..
   100dc:	49 2c 01 00 49 2c 01 00                             I,..I,..

000100e4 <data_section_table>:
   100e4:	000194bc 	.word	0x000194bc
   100e8:	10000000 	.word	0x10000000
   100ec:	0000023c 	.word	0x0000023c
   100f0:	000194bc 	.word	0x000194bc
   100f4:	20000000 	.word	0x20000000
   100f8:	00000000 	.word	0x00000000

000100fc <bss_section_table>:
   100fc:	10000240 	.word	0x10000240
   10100:	0000036c 	.word	0x0000036c
   10104:	20000000 	.word	0x20000000
   10108:	00000000 	.word	0x00000000

0001010c <InitDataSection()>:
SJ2_IGNORE_STACK_TRACE(void SystemInit());

// Functions to carry out the initialization of RW and BSS data sections.
SJ2_SECTION(".after_vectors")
void InitDataSection()
{
   1010c:	b086      	sub	sp, #24
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   1010e:	2300      	movs	r3, #0
   10110:	9305      	str	r3, [sp, #20]
   10112:	9a05      	ldr	r2, [sp, #20]
   10114:	4613      	mov	r3, r2
   10116:	005b      	lsls	r3, r3, #1
   10118:	4413      	add	r3, r2
   1011a:	009b      	lsls	r3, r3, #2
   1011c:	4a1d      	ldr	r2, [pc, #116]	; (10194 <InitDataSection()+0x88>)
   1011e:	4413      	add	r3, r2
   10120:	4a1d      	ldr	r2, [pc, #116]	; (10198 <InitDataSection()+0x8c>)
   10122:	4293      	cmp	r3, r2
   10124:	d233      	bcs.n	1018e <InitDataSection()+0x82>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
   10126:	491b      	ldr	r1, [pc, #108]	; (10194 <InitDataSection()+0x88>)
   10128:	9a05      	ldr	r2, [sp, #20]
   1012a:	4613      	mov	r3, r2
   1012c:	005b      	lsls	r3, r3, #1
   1012e:	4413      	add	r3, r2
   10130:	009b      	lsls	r3, r3, #2
   10132:	440b      	add	r3, r1
   10134:	681b      	ldr	r3, [r3, #0]
   10136:	9303      	str	r3, [sp, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
   10138:	4916      	ldr	r1, [pc, #88]	; (10194 <InitDataSection()+0x88>)
   1013a:	9a05      	ldr	r2, [sp, #20]
   1013c:	4613      	mov	r3, r2
   1013e:	005b      	lsls	r3, r3, #1
   10140:	4413      	add	r3, r2
   10142:	009b      	lsls	r3, r3, #2
   10144:	440b      	add	r3, r1
   10146:	685b      	ldr	r3, [r3, #4]
   10148:	9302      	str	r3, [sp, #8]
    uint32_t length         = data_section_table[i].length;
   1014a:	4912      	ldr	r1, [pc, #72]	; (10194 <InitDataSection()+0x88>)
   1014c:	9a05      	ldr	r2, [sp, #20]
   1014e:	4613      	mov	r3, r2
   10150:	005b      	lsls	r3, r3, #1
   10152:	4413      	add	r3, r2
   10154:	009b      	lsls	r3, r3, #2
   10156:	440b      	add	r3, r1
   10158:	3308      	adds	r3, #8
   1015a:	681b      	ldr	r3, [r3, #0]
   1015c:	9301      	str	r3, [sp, #4]
    for (size_t j = 0; j < length; j++)
   1015e:	2300      	movs	r3, #0
   10160:	9304      	str	r3, [sp, #16]
   10162:	9a04      	ldr	r2, [sp, #16]
   10164:	9b01      	ldr	r3, [sp, #4]
   10166:	429a      	cmp	r2, r3
   10168:	d20d      	bcs.n	10186 <InitDataSection()+0x7a>
    {
      ram_location[j] = rom_location[j];
   1016a:	9b04      	ldr	r3, [sp, #16]
   1016c:	009b      	lsls	r3, r3, #2
   1016e:	9a03      	ldr	r2, [sp, #12]
   10170:	441a      	add	r2, r3
   10172:	9b04      	ldr	r3, [sp, #16]
   10174:	009b      	lsls	r3, r3, #2
   10176:	9902      	ldr	r1, [sp, #8]
   10178:	440b      	add	r3, r1
   1017a:	6812      	ldr	r2, [r2, #0]
   1017c:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   1017e:	9b04      	ldr	r3, [sp, #16]
   10180:	3301      	adds	r3, #1
   10182:	9304      	str	r3, [sp, #16]
   10184:	e7ed      	b.n	10162 <InitDataSection()+0x56>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
   10186:	9b05      	ldr	r3, [sp, #20]
   10188:	3301      	adds	r3, #1
   1018a:	9305      	str	r3, [sp, #20]
   1018c:	e7c1      	b.n	10112 <InitDataSection()+0x6>
    }
  }
}
   1018e:	bf00      	nop
   10190:	b006      	add	sp, #24
   10192:	4770      	bx	lr
   10194:	000100e4 	.word	0x000100e4
   10198:	000100fc 	.word	0x000100fc

0001019c <InitBssSection()>:

// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
SJ2_SECTION(".after_vectors")
void InitBssSection()
{
   1019c:	b084      	sub	sp, #16
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   1019e:	2300      	movs	r3, #0
   101a0:	9303      	str	r3, [sp, #12]
   101a2:	9b03      	ldr	r3, [sp, #12]
   101a4:	00db      	lsls	r3, r3, #3
   101a6:	4a13      	ldr	r2, [pc, #76]	; (101f4 <InitBssSection()+0x58>)
   101a8:	4413      	add	r3, r2
   101aa:	4a13      	ldr	r2, [pc, #76]	; (101f8 <InitBssSection()+0x5c>)
   101ac:	4293      	cmp	r3, r2
   101ae:	d21e      	bcs.n	101ee <InitBssSection()+0x52>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
   101b0:	4a10      	ldr	r2, [pc, #64]	; (101f4 <InitBssSection()+0x58>)
   101b2:	9b03      	ldr	r3, [sp, #12]
   101b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   101b8:	9301      	str	r3, [sp, #4]
    uint32_t length         = bss_section_table[i].length;
   101ba:	4a0e      	ldr	r2, [pc, #56]	; (101f4 <InitBssSection()+0x58>)
   101bc:	9b03      	ldr	r3, [sp, #12]
   101be:	00db      	lsls	r3, r3, #3
   101c0:	4413      	add	r3, r2
   101c2:	685b      	ldr	r3, [r3, #4]
   101c4:	9300      	str	r3, [sp, #0]
    for (size_t j = 0; j < length; j++)
   101c6:	2300      	movs	r3, #0
   101c8:	9302      	str	r3, [sp, #8]
   101ca:	9a02      	ldr	r2, [sp, #8]
   101cc:	9b00      	ldr	r3, [sp, #0]
   101ce:	429a      	cmp	r2, r3
   101d0:	d209      	bcs.n	101e6 <InitBssSection()+0x4a>
    {
      ram_location[j] = 0;
   101d2:	9b02      	ldr	r3, [sp, #8]
   101d4:	009b      	lsls	r3, r3, #2
   101d6:	9a01      	ldr	r2, [sp, #4]
   101d8:	4413      	add	r3, r2
   101da:	2200      	movs	r2, #0
   101dc:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
   101de:	9b02      	ldr	r3, [sp, #8]
   101e0:	3301      	adds	r3, #1
   101e2:	9302      	str	r3, [sp, #8]
   101e4:	e7f1      	b.n	101ca <InitBssSection()+0x2e>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
   101e6:	9b03      	ldr	r3, [sp, #12]
   101e8:	3301      	adds	r3, #1
   101ea:	9303      	str	r3, [sp, #12]
   101ec:	e7d9      	b.n	101a2 <InitBssSection()+0x6>
    }
  }
}
   101ee:	bf00      	nop
   101f0:	b004      	add	sp, #16
   101f2:	4770      	bx	lr
   101f4:	000100fc 	.word	0x000100fc
   101f8:	0001010c 	.word	0x0001010c

000101fc <InitFpu()>:
      // Write back the modified value to the CPACR
      "STR     R1, [R0]\n"
      // Wait for store to complete
      "DSB\n"
      // reset pipeline now the FPU is enabled
      "ISB\n");
   101fc:	f8df 0014 	ldr.w	r0, [pc, #20]	; 10214 <InitFpu()+0x18>
   10200:	6801      	ldr	r1, [r0, #0]
   10202:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10206:	6001      	str	r1, [r0, #0]
   10208:	f3bf 8f4f 	dsb	sy
   1020c:	f3bf 8f6f 	isb	sy
}
   10210:	bf00      	nop
   10212:	4770      	bx	lr
   10214:	e000ed88 	.word	0xe000ed88

00010218 <HardFaultHandler>:
      " mrseq r0, msp                                       \n"
      " mrsne r0, psp                                       \n"
      " ldr r1, [r0, #24]                                   \n"
      " ldr r2, handler2_address_const                      \n"
      " bx r2                                               \n"
      " handler2_address_const: .word GetRegistersFromStack \n");
   10218:	f01e 0f04 	tst.w	lr, #4
   1021c:	bf0c      	ite	eq
   1021e:	f3ef 8008 	mrseq	r0, MSP
   10222:	f3ef 8009 	mrsne	r0, PSP
   10226:	6981      	ldr	r1, [r0, #24]
   10228:	4a00      	ldr	r2, [pc, #0]	; (1022c <handler2_address_const>)
   1022a:	4710      	bx	r2

0001022c <handler2_address_const>:
   1022c:	00012d11 	.word	0x00012d11
#endif
}
   10230:	bf00      	nop
   10232:	4770      	bx	lr
   10234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   10298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   102f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000102fc <__CRP_WORD_START__>:
   102fc:	ffffffff 	.word	0xffffffff

00010300 <_init>:
   10300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10302:	bf00      	nop
   10304:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10306:	bc08      	pop	{r3}
   10308:	469e      	mov	lr, r3
   1030a:	4770      	bx	lr

0001030c <__init_array_start>:
   1030c:	00010349 	.word	0x00010349
   10310:	00012bb9 	.word	0x00012bb9
   10314:	00016e71 	.word	0x00016e71

00010318 <_fini>:
   10318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1031a:	bf00      	nop
   1031c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1031e:	bc08      	pop	{r3}
   10320:	469e      	mov	lr, r3
   10322:	4770      	bx	lr

00010324 <__do_global_dtors_aux>:
   10324:	b510      	push	{r4, lr}
   10326:	4c05      	ldr	r4, [pc, #20]	; (1033c <__do_global_dtors_aux+0x18>)
   10328:	7823      	ldrb	r3, [r4, #0]
   1032a:	b933      	cbnz	r3, 1033a <__do_global_dtors_aux+0x16>
   1032c:	4b04      	ldr	r3, [pc, #16]	; (10340 <__do_global_dtors_aux+0x1c>)
   1032e:	b113      	cbz	r3, 10336 <__do_global_dtors_aux+0x12>
   10330:	4804      	ldr	r0, [pc, #16]	; (10344 <__do_global_dtors_aux+0x20>)
   10332:	f3af 8000 	nop.w
   10336:	2301      	movs	r3, #1
   10338:	7023      	strb	r3, [r4, #0]
   1033a:	bd10      	pop	{r4, pc}
   1033c:	10000240 	.word	0x10000240
   10340:	00000000 	.word	0x00000000
   10344:	000194bc 	.word	0x000194bc

00010348 <frame_dummy>:
   10348:	b508      	push	{r3, lr}
   1034a:	4b03      	ldr	r3, [pc, #12]	; (10358 <frame_dummy+0x10>)
   1034c:	b11b      	cbz	r3, 10356 <frame_dummy+0xe>
   1034e:	4903      	ldr	r1, [pc, #12]	; (1035c <frame_dummy+0x14>)
   10350:	4803      	ldr	r0, [pc, #12]	; (10360 <frame_dummy+0x18>)
   10352:	f3af 8000 	nop.w
   10356:	bd08      	pop	{r3, pc}
   10358:	00000000 	.word	0x00000000
   1035c:	10000244 	.word	0x10000244
   10360:	000194bc 	.word	0x000194bc

00010364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>:
#include "LabGPIO.h"
#include "utility/log.hpp"
#include "utility/time.hpp"

/*constexpr*/ LabGPIO::LabGPIO(uint8_t portGPIO, uint8_t pinGPIO)
   10364:	b530      	push	{r4, r5, lr}
   10366:	b083      	sub	sp, #12
   10368:	4675      	mov	r5, lr
   1036a:	9001      	str	r0, [sp, #4]
   1036c:	460b      	mov	r3, r1
   1036e:	f88d 3003 	strb.w	r3, [sp, #3]
   10372:	4613      	mov	r3, r2
   10374:	f88d 3002 	strb.w	r3, [sp, #2]
   10378:	462b      	mov	r3, r5
   1037a:	4619      	mov	r1, r3
   1037c:	483a      	ldr	r0, [pc, #232]	; (10468 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x104>)
   1037e:	f002 fdc1 	bl	12f04 <__cyg_profile_func_enter>
{
	port = portGPIO;
   10382:	9b01      	ldr	r3, [sp, #4]
   10384:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10388:	701a      	strb	r2, [r3, #0]
	pin = pinGPIO;
   1038a:	9b01      	ldr	r3, [sp, #4]
   1038c:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10390:	705a      	strb	r2, [r3, #1]
	if(port > 5) 
   10392:	9b01      	ldr	r3, [sp, #4]
   10394:	781b      	ldrb	r3, [r3, #0]
   10396:	2b05      	cmp	r3, #5
   10398:	d905      	bls.n	103a6 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x42>
	{
		LOG_INFO("Invalid Port");
   1039a:	230b      	movs	r3, #11
   1039c:	4a33      	ldr	r2, [pc, #204]	; (1046c <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x108>)
   1039e:	4934      	ldr	r1, [pc, #208]	; (10470 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x10c>)
   103a0:	4834      	ldr	r0, [pc, #208]	; (10474 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x110>)
   103a2:	f004 f80f 	bl	143c4 <printf>
	}
	if(pin > 32) 
   103a6:	9b01      	ldr	r3, [sp, #4]
   103a8:	785b      	ldrb	r3, [r3, #1]
   103aa:	2b20      	cmp	r3, #32
   103ac:	d906      	bls.n	103bc <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x58>
	{
		LOG_INFO("Invalid Pin");
   103ae:	230f      	movs	r3, #15
   103b0:	4a2e      	ldr	r2, [pc, #184]	; (1046c <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x108>)
   103b2:	4931      	ldr	r1, [pc, #196]	; (10478 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x114>)
   103b4:	4831      	ldr	r0, [pc, #196]	; (1047c <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x118>)
   103b6:	f004 f805 	bl	143c4 <printf>
   103ba:	e04b      	b.n	10454 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0xf0>
	}
	else
	{
		switch (port)
   103bc:	9b01      	ldr	r3, [sp, #4]
   103be:	781b      	ldrb	r3, [r3, #0]
   103c0:	2b05      	cmp	r3, #5
   103c2:	d847      	bhi.n	10454 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0xf0>
   103c4:	a201      	add	r2, pc, #4	; (adr r2, 103cc <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x68>)
   103c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   103ca:	bf00      	nop
   103cc:	000103e5 	.word	0x000103e5
   103d0:	0001040d 	.word	0x0001040d
   103d4:	00010435 	.word	0x00010435
   103d8:	0001043d 	.word	0x0001043d
   103dc:	00010445 	.word	0x00010445
   103e0:	0001044d 	.word	0x0001044d
		{
			case 0: 
			{
				gpioDef = LPC_GPIO0; 
   103e4:	9b01      	ldr	r3, [sp, #4]
   103e6:	4a26      	ldr	r2, [pc, #152]	; (10480 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x11c>)
   103e8:	605a      	str	r2, [r3, #4]
				//Set internal pulldowns for switch 0
				LPC_IOCON->P1_19 &= ~((1 << 4) | (1 << 3));  
   103ea:	4b26      	ldr	r3, [pc, #152]	; (10484 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x120>)
   103ec:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
   103f0:	4a24      	ldr	r2, [pc, #144]	; (10484 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x120>)
   103f2:	f023 0318 	bic.w	r3, r3, #24
   103f6:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
      			LPC_IOCON->P1_19 |= (1 << 3);
   103fa:	4b22      	ldr	r3, [pc, #136]	; (10484 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x120>)
   103fc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
   10400:	4a20      	ldr	r2, [pc, #128]	; (10484 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x120>)
   10402:	f043 0308 	orr.w	r3, r3, #8
   10406:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
				break;
   1040a:	e023      	b.n	10454 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0xf0>
			}
			case 1:
			{
				gpioDef = LPC_GPIO1; 
   1040c:	9b01      	ldr	r3, [sp, #4]
   1040e:	4a1e      	ldr	r2, [pc, #120]	; (10488 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x124>)
   10410:	605a      	str	r2, [r3, #4]
				//Set internal pulldowns for switch 1
				LPC_IOCON->P1_15 &= ~((1 << 4) | (1 << 3)); 
   10412:	4b1c      	ldr	r3, [pc, #112]	; (10484 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x120>)
   10414:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   10418:	4a1a      	ldr	r2, [pc, #104]	; (10484 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x120>)
   1041a:	f023 0318 	bic.w	r3, r3, #24
   1041e:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
      			LPC_IOCON->P1_15 |= (1 << 3);
   10422:	4b18      	ldr	r3, [pc, #96]	; (10484 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x120>)
   10424:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   10428:	4a16      	ldr	r2, [pc, #88]	; (10484 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x120>)
   1042a:	f043 0308 	orr.w	r3, r3, #8
   1042e:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
				break;
   10432:	e00f      	b.n	10454 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0xf0>
			}
			case 2: 
			{
				gpioDef = LPC_GPIO2; 
   10434:	9b01      	ldr	r3, [sp, #4]
   10436:	4a15      	ldr	r2, [pc, #84]	; (1048c <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x128>)
   10438:	605a      	str	r2, [r3, #4]
				break;
   1043a:	e00b      	b.n	10454 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0xf0>
			}
			case 3: 
			{
				gpioDef = LPC_GPIO3; 
   1043c:	9b01      	ldr	r3, [sp, #4]
   1043e:	4a14      	ldr	r2, [pc, #80]	; (10490 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x12c>)
   10440:	605a      	str	r2, [r3, #4]
				break;
   10442:	e007      	b.n	10454 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0xf0>
			}
			case 4: 
			{
				gpioDef = LPC_GPIO4;
   10444:	9b01      	ldr	r3, [sp, #4]
   10446:	4a13      	ldr	r2, [pc, #76]	; (10494 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x130>)
   10448:	605a      	str	r2, [r3, #4]
				break;
   1044a:	e003      	b.n	10454 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0xf0>
			}
			case 5: 
			{
				gpioDef = LPC_GPIO5; 
   1044c:	9b01      	ldr	r3, [sp, #4]
   1044e:	4a12      	ldr	r2, [pc, #72]	; (10498 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x134>)
   10450:	605a      	str	r2, [r3, #4]
				break;
   10452:	bf00      	nop
			}
		} 
	}
}
   10454:	9c01      	ldr	r4, [sp, #4]
   10456:	462b      	mov	r3, r5
   10458:	4619      	mov	r1, r3
   1045a:	4803      	ldr	r0, [pc, #12]	; (10468 <LabGPIO::LabGPIO(unsigned char, unsigned char)+0x104>)
   1045c:	f002 fd66 	bl	12f2c <__cyg_profile_func_exit>
   10460:	4623      	mov	r3, r4
   10462:	4618      	mov	r0, r3
   10464:	b003      	add	sp, #12
   10466:	bd30      	pop	{r4, r5, pc}
   10468:	00010365 	.word	0x00010365
   1046c:	0001745c 	.word	0x0001745c
   10470:	000173b4 	.word	0x000173b4
   10474:	000173cc 	.word	0x000173cc
   10478:	000173c0 	.word	0x000173c0
   1047c:	00017414 	.word	0x00017414
   10480:	20098000 	.word	0x20098000
   10484:	4002c000 	.word	0x4002c000
   10488:	20098020 	.word	0x20098020
   1048c:	20098040 	.word	0x20098040
   10490:	20098060 	.word	0x20098060
   10494:	20098080 	.word	0x20098080
   10498:	200980a0 	.word	0x200980a0

0001049c <LabGPIO::SetAsInput()>:
void LabGPIO::SetAsInput()
{
   1049c:	b510      	push	{r4, lr}
   1049e:	b082      	sub	sp, #8
   104a0:	4674      	mov	r4, lr
   104a2:	9001      	str	r0, [sp, #4]
   104a4:	4623      	mov	r3, r4
   104a6:	4619      	mov	r1, r3
   104a8:	480c      	ldr	r0, [pc, #48]	; (104dc <LabGPIO::SetAsInput()+0x40>)
   104aa:	f002 fd2b 	bl	12f04 <__cyg_profile_func_enter>
	gpioDef->DIR &= ~(1 << pin);
   104ae:	9b01      	ldr	r3, [sp, #4]
   104b0:	685b      	ldr	r3, [r3, #4]
   104b2:	681a      	ldr	r2, [r3, #0]
   104b4:	9b01      	ldr	r3, [sp, #4]
   104b6:	785b      	ldrb	r3, [r3, #1]
   104b8:	4619      	mov	r1, r3
   104ba:	2301      	movs	r3, #1
   104bc:	408b      	lsls	r3, r1
   104be:	43db      	mvns	r3, r3
   104c0:	4619      	mov	r1, r3
   104c2:	9b01      	ldr	r3, [sp, #4]
   104c4:	685b      	ldr	r3, [r3, #4]
   104c6:	400a      	ands	r2, r1
   104c8:	601a      	str	r2, [r3, #0]
   104ca:	4623      	mov	r3, r4
   104cc:	4619      	mov	r1, r3
   104ce:	4803      	ldr	r0, [pc, #12]	; (104dc <LabGPIO::SetAsInput()+0x40>)
   104d0:	f002 fd2c 	bl	12f2c <__cyg_profile_func_exit>
}
   104d4:	bf00      	nop
   104d6:	b002      	add	sp, #8
   104d8:	bd10      	pop	{r4, pc}
   104da:	bf00      	nop
   104dc:	0001049d 	.word	0x0001049d

000104e0 <LabGPIO::SetAsOutput()>:
void LabGPIO::SetAsOutput()
{
   104e0:	b510      	push	{r4, lr}
   104e2:	b082      	sub	sp, #8
   104e4:	4674      	mov	r4, lr
   104e6:	9001      	str	r0, [sp, #4]
   104e8:	4623      	mov	r3, r4
   104ea:	4619      	mov	r1, r3
   104ec:	480b      	ldr	r0, [pc, #44]	; (1051c <LabGPIO::SetAsOutput()+0x3c>)
   104ee:	f002 fd09 	bl	12f04 <__cyg_profile_func_enter>
	gpioDef->DIR |= (1 << pin);
   104f2:	9b01      	ldr	r3, [sp, #4]
   104f4:	685b      	ldr	r3, [r3, #4]
   104f6:	681a      	ldr	r2, [r3, #0]
   104f8:	9b01      	ldr	r3, [sp, #4]
   104fa:	785b      	ldrb	r3, [r3, #1]
   104fc:	4619      	mov	r1, r3
   104fe:	2301      	movs	r3, #1
   10500:	408b      	lsls	r3, r1
   10502:	4619      	mov	r1, r3
   10504:	9b01      	ldr	r3, [sp, #4]
   10506:	685b      	ldr	r3, [r3, #4]
   10508:	430a      	orrs	r2, r1
   1050a:	601a      	str	r2, [r3, #0]
   1050c:	4623      	mov	r3, r4
   1050e:	4619      	mov	r1, r3
   10510:	4802      	ldr	r0, [pc, #8]	; (1051c <LabGPIO::SetAsOutput()+0x3c>)
   10512:	f002 fd0b 	bl	12f2c <__cyg_profile_func_exit>
}
   10516:	bf00      	nop
   10518:	b002      	add	sp, #8
   1051a:	bd10      	pop	{r4, pc}
   1051c:	000104e1 	.word	0x000104e1

00010520 <LabGPIO::SetHigh()>:
	{
		SetAsOutput();
	}
}
void LabGPIO::SetHigh()
{
   10520:	b510      	push	{r4, lr}
   10522:	b082      	sub	sp, #8
   10524:	4674      	mov	r4, lr
   10526:	9001      	str	r0, [sp, #4]
   10528:	4623      	mov	r3, r4
   1052a:	4619      	mov	r1, r3
   1052c:	4809      	ldr	r0, [pc, #36]	; (10554 <LabGPIO::SetHigh()+0x34>)
   1052e:	f002 fce9 	bl	12f04 <__cyg_profile_func_enter>
	gpioDef->SET = (1 << pin);
   10532:	9b01      	ldr	r3, [sp, #4]
   10534:	785b      	ldrb	r3, [r3, #1]
   10536:	461a      	mov	r2, r3
   10538:	2301      	movs	r3, #1
   1053a:	fa03 f202 	lsl.w	r2, r3, r2
   1053e:	9b01      	ldr	r3, [sp, #4]
   10540:	685b      	ldr	r3, [r3, #4]
   10542:	619a      	str	r2, [r3, #24]
   10544:	4623      	mov	r3, r4
   10546:	4619      	mov	r1, r3
   10548:	4802      	ldr	r0, [pc, #8]	; (10554 <LabGPIO::SetHigh()+0x34>)
   1054a:	f002 fcef 	bl	12f2c <__cyg_profile_func_exit>
}
   1054e:	bf00      	nop
   10550:	b002      	add	sp, #8
   10552:	bd10      	pop	{r4, pc}
   10554:	00010521 	.word	0x00010521

00010558 <LabGPIO::SetLow()>:
void LabGPIO::SetLow()
{
   10558:	b510      	push	{r4, lr}
   1055a:	b082      	sub	sp, #8
   1055c:	4674      	mov	r4, lr
   1055e:	9001      	str	r0, [sp, #4]
   10560:	4623      	mov	r3, r4
   10562:	4619      	mov	r1, r3
   10564:	4809      	ldr	r0, [pc, #36]	; (1058c <LabGPIO::SetLow()+0x34>)
   10566:	f002 fccd 	bl	12f04 <__cyg_profile_func_enter>
	gpioDef->CLR = (1 << pin);
   1056a:	9b01      	ldr	r3, [sp, #4]
   1056c:	785b      	ldrb	r3, [r3, #1]
   1056e:	461a      	mov	r2, r3
   10570:	2301      	movs	r3, #1
   10572:	fa03 f202 	lsl.w	r2, r3, r2
   10576:	9b01      	ldr	r3, [sp, #4]
   10578:	685b      	ldr	r3, [r3, #4]
   1057a:	61da      	str	r2, [r3, #28]
   1057c:	4623      	mov	r3, r4
   1057e:	4619      	mov	r1, r3
   10580:	4802      	ldr	r0, [pc, #8]	; (1058c <LabGPIO::SetLow()+0x34>)
   10582:	f002 fcd3 	bl	12f2c <__cyg_profile_func_exit>
}
   10586:	bf00      	nop
   10588:	b002      	add	sp, #8
   1058a:	bd10      	pop	{r4, pc}
   1058c:	00010559 	.word	0x00010559

00010590 <LabGPIO::Read()>:
	{
		SetHigh();
	}
}
LabGPIO::State LabGPIO::Read()
{
   10590:	b530      	push	{r4, r5, lr}
   10592:	b085      	sub	sp, #20
   10594:	4675      	mov	r5, lr
   10596:	9001      	str	r0, [sp, #4]
   10598:	462b      	mov	r3, r5
   1059a:	4619      	mov	r1, r3
   1059c:	4813      	ldr	r0, [pc, #76]	; (105ec <LabGPIO::Read()+0x5c>)
   1059e:	f002 fcb1 	bl	12f04 <__cyg_profile_func_enter>
	State currentState = State::kLow;
   105a2:	2300      	movs	r3, #0
   105a4:	f88d 300f 	strb.w	r3, [sp, #15]
	bool statusBit = gpioDef->PIN & (1 << pin);
   105a8:	9b01      	ldr	r3, [sp, #4]
   105aa:	685b      	ldr	r3, [r3, #4]
   105ac:	695b      	ldr	r3, [r3, #20]
   105ae:	9a01      	ldr	r2, [sp, #4]
   105b0:	7852      	ldrb	r2, [r2, #1]
   105b2:	4611      	mov	r1, r2
   105b4:	2201      	movs	r2, #1
   105b6:	408a      	lsls	r2, r1
   105b8:	4013      	ands	r3, r2
   105ba:	2b00      	cmp	r3, #0
   105bc:	bf14      	ite	ne
   105be:	2301      	movne	r3, #1
   105c0:	2300      	moveq	r3, #0
   105c2:	f88d 300e 	strb.w	r3, [sp, #14]
	if(statusBit) 
   105c6:	f89d 300e 	ldrb.w	r3, [sp, #14]
   105ca:	2b00      	cmp	r3, #0
   105cc:	d002      	beq.n	105d4 <LabGPIO::Read()+0x44>
	{
		currentState = State::kHigh;
   105ce:	2301      	movs	r3, #1
   105d0:	f88d 300f 	strb.w	r3, [sp, #15]
	}
	return currentState;
   105d4:	f89d 400f 	ldrb.w	r4, [sp, #15]
   105d8:	462b      	mov	r3, r5
   105da:	4619      	mov	r1, r3
   105dc:	4803      	ldr	r0, [pc, #12]	; (105ec <LabGPIO::Read()+0x5c>)
   105de:	f002 fca5 	bl	12f2c <__cyg_profile_func_exit>
   105e2:	4623      	mov	r3, r4
}
   105e4:	4618      	mov	r0, r3
   105e6:	b005      	add	sp, #20
   105e8:	bd30      	pop	{r4, r5, pc}
   105ea:	bf00      	nop
   105ec:	00010591 	.word	0x00010591

000105f0 <LabGPIO::ReadBool()>:
bool LabGPIO::ReadBool()
{
   105f0:	b530      	push	{r4, r5, lr}
   105f2:	b085      	sub	sp, #20
   105f4:	4675      	mov	r5, lr
   105f6:	9001      	str	r0, [sp, #4]
   105f8:	462b      	mov	r3, r5
   105fa:	4619      	mov	r1, r3
   105fc:	480e      	ldr	r0, [pc, #56]	; (10638 <LabGPIO::ReadBool()+0x48>)
   105fe:	f002 fc81 	bl	12f04 <__cyg_profile_func_enter>
	bool boolState = 0;
   10602:	2300      	movs	r3, #0
   10604:	f88d 300f 	strb.w	r3, [sp, #15]
	State currentState = Read();
   10608:	9801      	ldr	r0, [sp, #4]
   1060a:	f7ff ffc1 	bl	10590 <LabGPIO::Read()>
   1060e:	4603      	mov	r3, r0
   10610:	f88d 300e 	strb.w	r3, [sp, #14]
	if (currentState == State::kHigh) 
   10614:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10618:	2b01      	cmp	r3, #1
   1061a:	d102      	bne.n	10622 <LabGPIO::ReadBool()+0x32>
	{
		boolState = 1;
   1061c:	2301      	movs	r3, #1
   1061e:	f88d 300f 	strb.w	r3, [sp, #15]
	}
	return boolState;
   10622:	f89d 400f 	ldrb.w	r4, [sp, #15]
   10626:	462b      	mov	r3, r5
   10628:	4619      	mov	r1, r3
   1062a:	4803      	ldr	r0, [pc, #12]	; (10638 <LabGPIO::ReadBool()+0x48>)
   1062c:	f002 fc7e 	bl	12f2c <__cyg_profile_func_exit>
   10630:	4623      	mov	r3, r4
}
   10632:	4618      	mov	r0, r3
   10634:	b005      	add	sp, #20
   10636:	bd30      	pop	{r4, r5, pc}
   10638:	000105f1 	.word	0x000105f1

0001063c <(anonymous namespace)::DefaultUptime()>:
{
// uptime in nanoseconds
inline uint64_t uptime = 0;
// Returns the system uptime in nanoseconds, do not use this function directly
[[gnu::always_inline]] inline uint64_t DefaultUptime()
{
   1063c:	b570      	push	{r4, r5, r6, lr}
   1063e:	4676      	mov	r6, lr
   10640:	4633      	mov	r3, r6
   10642:	4619      	mov	r1, r3
   10644:	4807      	ldr	r0, [pc, #28]	; (10664 <(anonymous namespace)::DefaultUptime()+0x28>)
   10646:	f002 fc5d 	bl	12f04 <__cyg_profile_func_enter>
  return uptime;
   1064a:	4b07      	ldr	r3, [pc, #28]	; (10668 <(anonymous namespace)::DefaultUptime()+0x2c>)
   1064c:	e9d3 4500 	ldrd	r4, r5, [r3]
   10650:	4633      	mov	r3, r6
   10652:	4619      	mov	r1, r3
   10654:	4803      	ldr	r0, [pc, #12]	; (10664 <(anonymous namespace)::DefaultUptime()+0x28>)
   10656:	f002 fc69 	bl	12f2c <__cyg_profile_func_exit>
   1065a:	4623      	mov	r3, r4
   1065c:	462c      	mov	r4, r5
}
   1065e:	4618      	mov	r0, r3
   10660:	4621      	mov	r1, r4
   10662:	bd70      	pop	{r4, r5, r6, pc}
   10664:	0001063d 	.word	0x0001063d
   10668:	10000260 	.word	0x10000260

0001066c <Milliseconds()>:
{
  Uptime = uptime_function;
}
// Get system uptime in milliseconds as a 64-bit integer
inline uint64_t Milliseconds()
{
   1066c:	b570      	push	{r4, r5, r6, lr}
   1066e:	4674      	mov	r4, lr
   10670:	4623      	mov	r3, r4
   10672:	4619      	mov	r1, r3
   10674:	480c      	ldr	r0, [pc, #48]	; (106a8 <Milliseconds()+0x3c>)
   10676:	f002 fc45 	bl	12f04 <__cyg_profile_func_enter>
  return Uptime() / 1'000;
   1067a:	4b0c      	ldr	r3, [pc, #48]	; (106ac <Milliseconds()+0x40>)
   1067c:	681b      	ldr	r3, [r3, #0]
   1067e:	4798      	blx	r3
   10680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10684:	f04f 0300 	mov.w	r3, #0
   10688:	f006 fc9c 	bl	16fc4 <__aeabi_uldivmod>
   1068c:	4602      	mov	r2, r0
   1068e:	460b      	mov	r3, r1
   10690:	4615      	mov	r5, r2
   10692:	461e      	mov	r6, r3
   10694:	4623      	mov	r3, r4
   10696:	4619      	mov	r1, r3
   10698:	4803      	ldr	r0, [pc, #12]	; (106a8 <Milliseconds()+0x3c>)
   1069a:	f002 fc47 	bl	12f2c <__cyg_profile_func_exit>
   1069e:	462b      	mov	r3, r5
   106a0:	4634      	mov	r4, r6
}
   106a2:	4618      	mov	r0, r3
   106a4:	4621      	mov	r1, r4
   106a6:	bd70      	pop	{r4, r5, r6, pc}
   106a8:	0001066d 	.word	0x0001066d
   106ac:	10000000 	.word	0x10000000

000106b0 <Wait(unsigned long long)::{lambda()#1}::operator()() const>:
  return status;
}

inline Status Wait(uint64_t timeout)
{
  return Wait(timeout, []() -> bool { return false; });
   106b0:	b530      	push	{r4, r5, lr}
   106b2:	b083      	sub	sp, #12
   106b4:	4675      	mov	r5, lr
   106b6:	9001      	str	r0, [sp, #4]
   106b8:	462b      	mov	r3, r5
   106ba:	4619      	mov	r1, r3
   106bc:	4806      	ldr	r0, [pc, #24]	; (106d8 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   106be:	f002 fc21 	bl	12f04 <__cyg_profile_func_enter>
   106c2:	2400      	movs	r4, #0
   106c4:	462b      	mov	r3, r5
   106c6:	4619      	mov	r1, r3
   106c8:	4803      	ldr	r0, [pc, #12]	; (106d8 <Wait(unsigned long long)::{lambda()#1}::operator()() const+0x28>)
   106ca:	f002 fc2f 	bl	12f2c <__cyg_profile_func_exit>
   106ce:	4623      	mov	r3, r4
   106d0:	4618      	mov	r0, r3
   106d2:	b003      	add	sp, #12
   106d4:	bd30      	pop	{r4, r5, pc}
   106d6:	bf00      	nop
   106d8:	000106b1 	.word	0x000106b1

000106dc <Wait(unsigned long long)::{lambda()#1}::_FUN()>:
   106dc:	b538      	push	{r3, r4, r5, lr}
   106de:	4674      	mov	r4, lr
   106e0:	4623      	mov	r3, r4
   106e2:	4619      	mov	r1, r3
   106e4:	4807      	ldr	r0, [pc, #28]	; (10704 <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   106e6:	f002 fc0d 	bl	12f04 <__cyg_profile_func_enter>
   106ea:	2000      	movs	r0, #0
   106ec:	f7ff ffe0 	bl	106b0 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   106f0:	4603      	mov	r3, r0
   106f2:	461d      	mov	r5, r3
   106f4:	4623      	mov	r3, r4
   106f6:	4619      	mov	r1, r3
   106f8:	4802      	ldr	r0, [pc, #8]	; (10704 <Wait(unsigned long long)::{lambda()#1}::_FUN()+0x28>)
   106fa:	f002 fc17 	bl	12f2c <__cyg_profile_func_exit>
   106fe:	462b      	mov	r3, r5
   10700:	4618      	mov	r0, r3
   10702:	bd38      	pop	{r3, r4, r5, pc}
   10704:	000106dd 	.word	0x000106dd

00010708 <Wait(unsigned long long)>:
{
   10708:	b5f0      	push	{r4, r5, r6, r7, lr}
   1070a:	b089      	sub	sp, #36	; 0x24
   1070c:	4675      	mov	r5, lr
   1070e:	e9cd 0100 	strd	r0, r1, [sp]
   10712:	462b      	mov	r3, r5
   10714:	4619      	mov	r1, r3
   10716:	482b      	ldr	r0, [pc, #172]	; (107c4 <Wait(unsigned long long)+0xbc>)
   10718:	f002 fbf4 	bl	12f04 <__cyg_profile_func_enter>
   1071c:	e9dd 3400 	ldrd	r3, r4, [sp]
   10720:	e9cd 3406 	strd	r3, r4, [sp, #24]
   10724:	f88d 6008 	strb.w	r6, [sp, #8]
   10728:	462b      	mov	r3, r5
   1072a:	4619      	mov	r1, r3
   1072c:	4826      	ldr	r0, [pc, #152]	; (107c8 <Wait(unsigned long long)+0xc0>)
   1072e:	f002 fbe9 	bl	12f04 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   10732:	f04f 0300 	mov.w	r3, #0
   10736:	f04f 0400 	mov.w	r4, #0
   1073a:	e9cd 3404 	strd	r3, r4, [sp, #16]
  if (timeout == kMaxWait)
   1073e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   10742:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   10746:	bf08      	it	eq
   10748:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   1074c:	d106      	bne.n	1075c <Wait(unsigned long long)+0x54>
    timeout_time = kMaxWait;
   1074e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10752:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10756:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1075a:	e00a      	b.n	10772 <Wait(unsigned long long)+0x6a>
    timeout_time = Milliseconds() + timeout;
   1075c:	f7ff ff86 	bl	1066c <Milliseconds()>
   10760:	460a      	mov	r2, r1
   10762:	4601      	mov	r1, r0
   10764:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   10768:	185e      	adds	r6, r3, r1
   1076a:	eb44 0702 	adc.w	r7, r4, r2
   1076e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  Status status = Status::kTimedOut;
   10772:	2301      	movs	r3, #1
   10774:	9303      	str	r3, [sp, #12]
  while (Milliseconds() < timeout_time)
   10776:	f7ff ff79 	bl	1066c <Milliseconds()>
   1077a:	460a      	mov	r2, r1
   1077c:	4601      	mov	r1, r0
   1077e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   10782:	42a2      	cmp	r2, r4
   10784:	bf08      	it	eq
   10786:	4299      	cmpeq	r1, r3
   10788:	bf34      	ite	cc
   1078a:	2301      	movcc	r3, #1
   1078c:	2300      	movcs	r3, #0
   1078e:	b2db      	uxtb	r3, r3
   10790:	2b00      	cmp	r3, #0
   10792:	d008      	beq.n	107a6 <Wait(unsigned long long)+0x9e>
    if (is_done())
   10794:	ab02      	add	r3, sp, #8
   10796:	4618      	mov	r0, r3
   10798:	f7ff ff8a 	bl	106b0 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   1079c:	4603      	mov	r3, r0
   1079e:	2b00      	cmp	r3, #0
   107a0:	d0e9      	beq.n	10776 <Wait(unsigned long long)+0x6e>
      status = Status::kSuccess;
   107a2:	2300      	movs	r3, #0
   107a4:	9303      	str	r3, [sp, #12]
  return status;
   107a6:	9c03      	ldr	r4, [sp, #12]
   107a8:	462b      	mov	r3, r5
   107aa:	4619      	mov	r1, r3
   107ac:	4806      	ldr	r0, [pc, #24]	; (107c8 <Wait(unsigned long long)+0xc0>)
   107ae:	f002 fbbd 	bl	12f2c <__cyg_profile_func_exit>
   107b2:	462b      	mov	r3, r5
   107b4:	4619      	mov	r1, r3
   107b6:	4803      	ldr	r0, [pc, #12]	; (107c4 <Wait(unsigned long long)+0xbc>)
   107b8:	f002 fbb8 	bl	12f2c <__cyg_profile_func_exit>
  return Wait(timeout, []() -> bool { return false; });
   107bc:	4623      	mov	r3, r4
}
   107be:	4618      	mov	r0, r3
   107c0:	b009      	add	sp, #36	; 0x24
   107c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   107c4:	00010709 	.word	0x00010709
   107c8:	00010a0d 	.word	0x00010a0d

000107cc <Delay(unsigned long long)>:

// Delay the system for a duration of time
inline void Delay([[maybe_unused]] uint64_t delay_time_ms)
{
   107cc:	b510      	push	{r4, lr}
   107ce:	b082      	sub	sp, #8
   107d0:	4674      	mov	r4, lr
   107d2:	e9cd 0100 	strd	r0, r1, [sp]
   107d6:	4623      	mov	r3, r4
   107d8:	4619      	mov	r1, r3
   107da:	4807      	ldr	r0, [pc, #28]	; (107f8 <Delay(unsigned long long)+0x2c>)
   107dc:	f002 fb92 	bl	12f04 <__cyg_profile_func_enter>
#if defined(HOST_TEST)
  return;
#else
  Wait(delay_time_ms);
   107e0:	e9dd 0100 	ldrd	r0, r1, [sp]
   107e4:	f7ff ff90 	bl	10708 <Wait(unsigned long long)>
   107e8:	4623      	mov	r3, r4
   107ea:	4619      	mov	r1, r3
   107ec:	4802      	ldr	r0, [pc, #8]	; (107f8 <Delay(unsigned long long)+0x2c>)
   107ee:	f002 fb9d 	bl	12f2c <__cyg_profile_func_exit>
#endif  // HOST_TEST
}
   107f2:	bf00      	nop
   107f4:	b002      	add	sp, #8
   107f6:	bd10      	pop	{r4, pc}
   107f8:	000107cd 	.word	0x000107cd

000107fc <main>:
#include "LabGPIO.h"

void toggleLED(LabGPIO button, LabGPIO led);

int main(void)
{
   107fc:	b500      	push	{lr}
   107fe:	b093      	sub	sp, #76	; 0x4c
   10800:	4673      	mov	r3, lr
   10802:	4619      	mov	r1, r3
   10804:	485c      	ldr	r0, [pc, #368]	; (10978 <main+0x17c>)
   10806:	f002 fb7d 	bl	12f04 <__cyg_profile_func_enter>
    int lastButton=-1;
   1080a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1080e:	9311      	str	r3, [sp, #68]	; 0x44

    LabGPIO button0(1, 19);
   10810:	ab0f      	add	r3, sp, #60	; 0x3c
   10812:	2213      	movs	r2, #19
   10814:	2101      	movs	r1, #1
   10816:	4618      	mov	r0, r3
   10818:	f7ff fda4 	bl	10364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
    LabGPIO led0(2, 3);
   1081c:	ab0d      	add	r3, sp, #52	; 0x34
   1081e:	2203      	movs	r2, #3
   10820:	2102      	movs	r1, #2
   10822:	4618      	mov	r0, r3
   10824:	f7ff fd9e 	bl	10364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
    LabGPIO button1(1, 15);
   10828:	ab0b      	add	r3, sp, #44	; 0x2c
   1082a:	220f      	movs	r2, #15
   1082c:	2101      	movs	r1, #1
   1082e:	4618      	mov	r0, r3
   10830:	f7ff fd98 	bl	10364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
    LabGPIO led1(1, 26);
   10834:	ab09      	add	r3, sp, #36	; 0x24
   10836:	221a      	movs	r2, #26
   10838:	2101      	movs	r1, #1
   1083a:	4618      	mov	r0, r3
   1083c:	f7ff fd92 	bl	10364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
    LabGPIO button2(0, 30);
   10840:	ab07      	add	r3, sp, #28
   10842:	221e      	movs	r2, #30
   10844:	2100      	movs	r1, #0
   10846:	4618      	mov	r0, r3
   10848:	f7ff fd8c 	bl	10364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
    LabGPIO led2(1, 24);
   1084c:	ab05      	add	r3, sp, #20
   1084e:	2218      	movs	r2, #24
   10850:	2101      	movs	r1, #1
   10852:	4618      	mov	r0, r3
   10854:	f7ff fd86 	bl	10364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
    LabGPIO button3(0, 29);
   10858:	ab03      	add	r3, sp, #12
   1085a:	221d      	movs	r2, #29
   1085c:	2100      	movs	r1, #0
   1085e:	4618      	mov	r0, r3
   10860:	f7ff fd80 	bl	10364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>
    LabGPIO led3(1, 18);
   10864:	ab01      	add	r3, sp, #4
   10866:	2212      	movs	r2, #18
   10868:	2101      	movs	r1, #1
   1086a:	4618      	mov	r0, r3
   1086c:	f7ff fd7a 	bl	10364 <LabGPIO::LabGPIO(unsigned char, unsigned char)>

    // Initialize button and led here
    button0.SetAsInput();
   10870:	ab0f      	add	r3, sp, #60	; 0x3c
   10872:	4618      	mov	r0, r3
   10874:	f7ff fe12 	bl	1049c <LabGPIO::SetAsInput()>
    led0.SetAsOutput();
   10878:	ab0d      	add	r3, sp, #52	; 0x34
   1087a:	4618      	mov	r0, r3
   1087c:	f7ff fe30 	bl	104e0 <LabGPIO::SetAsOutput()>
    button1.SetAsInput();
   10880:	ab0b      	add	r3, sp, #44	; 0x2c
   10882:	4618      	mov	r0, r3
   10884:	f7ff fe0a 	bl	1049c <LabGPIO::SetAsInput()>
    led1.SetAsOutput();
   10888:	ab09      	add	r3, sp, #36	; 0x24
   1088a:	4618      	mov	r0, r3
   1088c:	f7ff fe28 	bl	104e0 <LabGPIO::SetAsOutput()>
    button2.SetAsInput();
   10890:	ab07      	add	r3, sp, #28
   10892:	4618      	mov	r0, r3
   10894:	f7ff fe02 	bl	1049c <LabGPIO::SetAsInput()>
    led2.SetAsOutput();
   10898:	ab05      	add	r3, sp, #20
   1089a:	4618      	mov	r0, r3
   1089c:	f7ff fe20 	bl	104e0 <LabGPIO::SetAsOutput()>
    button3.SetAsInput();
   108a0:	ab03      	add	r3, sp, #12
   108a2:	4618      	mov	r0, r3
   108a4:	f7ff fdfa 	bl	1049c <LabGPIO::SetAsInput()>
    led3.SetAsOutput();
   108a8:	ab01      	add	r3, sp, #4
   108aa:	4618      	mov	r0, r3
   108ac:	f7ff fe18 	bl	104e0 <LabGPIO::SetAsOutput()>
    LOG_INFO("Initialization Done.");
   108b0:	231e      	movs	r3, #30
   108b2:	4a32      	ldr	r2, [pc, #200]	; (1097c <main+0x180>)
   108b4:	4932      	ldr	r1, [pc, #200]	; (10980 <main+0x184>)
   108b6:	4833      	ldr	r0, [pc, #204]	; (10984 <main+0x188>)
   108b8:	f003 fd84 	bl	143c4 <printf>

    while(true)
    {
        if (button0.ReadBool())
   108bc:	ab0f      	add	r3, sp, #60	; 0x3c
   108be:	4618      	mov	r0, r3
   108c0:	f7ff fe96 	bl	105f0 <LabGPIO::ReadBool()>
   108c4:	4603      	mov	r3, r0
   108c6:	2b00      	cmp	r3, #0
   108c8:	d007      	beq.n	108da <main+0xde>
        {
            toggleLED(button0, led0);
   108ca:	ab0d      	add	r3, sp, #52	; 0x34
   108cc:	cb0c      	ldmia	r3, {r2, r3}
   108ce:	a90f      	add	r1, sp, #60	; 0x3c
   108d0:	c903      	ldmia	r1, {r0, r1}
   108d2:	f000 f859 	bl	10988 <toggleLED(LabGPIO, LabGPIO)>
            lastButton=0;
   108d6:	2300      	movs	r3, #0
   108d8:	9311      	str	r3, [sp, #68]	; 0x44
        }
        if (button1.ReadBool())
   108da:	ab0b      	add	r3, sp, #44	; 0x2c
   108dc:	4618      	mov	r0, r3
   108de:	f7ff fe87 	bl	105f0 <LabGPIO::ReadBool()>
   108e2:	4603      	mov	r3, r0
   108e4:	2b00      	cmp	r3, #0
   108e6:	d00a      	beq.n	108fe <main+0x102>
        {
            toggleLED(button1, led1);
   108e8:	ab09      	add	r3, sp, #36	; 0x24
   108ea:	cb0c      	ldmia	r3, {r2, r3}
   108ec:	a90b      	add	r1, sp, #44	; 0x2c
   108ee:	c903      	ldmia	r1, {r0, r1}
   108f0:	f000 f84a 	bl	10988 <toggleLED(LabGPIO, LabGPIO)>
            if (lastButton == 0)
   108f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   108f6:	2b00      	cmp	r3, #0
   108f8:	d101      	bne.n	108fe <main+0x102>
            {
                lastButton = 1;
   108fa:	2301      	movs	r3, #1
   108fc:	9311      	str	r3, [sp, #68]	; 0x44
            }
        }
        if (button2.ReadBool())
   108fe:	ab07      	add	r3, sp, #28
   10900:	4618      	mov	r0, r3
   10902:	f7ff fe75 	bl	105f0 <LabGPIO::ReadBool()>
   10906:	4603      	mov	r3, r0
   10908:	2b00      	cmp	r3, #0
   1090a:	d00a      	beq.n	10922 <main+0x126>
        {
            toggleLED(button2, led2);
   1090c:	ab05      	add	r3, sp, #20
   1090e:	cb0c      	ldmia	r3, {r2, r3}
   10910:	a907      	add	r1, sp, #28
   10912:	c903      	ldmia	r1, {r0, r1}
   10914:	f000 f838 	bl	10988 <toggleLED(LabGPIO, LabGPIO)>
            if (lastButton == 1)
   10918:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1091a:	2b01      	cmp	r3, #1
   1091c:	d101      	bne.n	10922 <main+0x126>
            {
                lastButton = 2;
   1091e:	2302      	movs	r3, #2
   10920:	9311      	str	r3, [sp, #68]	; 0x44
            }
        }
        if (button3.ReadBool()) 
   10922:	ab03      	add	r3, sp, #12
   10924:	4618      	mov	r0, r3
   10926:	f7ff fe63 	bl	105f0 <LabGPIO::ReadBool()>
   1092a:	4603      	mov	r3, r0
   1092c:	2b00      	cmp	r3, #0
   1092e:	d0c5      	beq.n	108bc <main+0xc0>
        {
            
            if (lastButton == 2)
   10930:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10932:	2b02      	cmp	r3, #2
   10934:	d119      	bne.n	1096a <main+0x16e>
            {
                led0.SetLow();
   10936:	ab0d      	add	r3, sp, #52	; 0x34
   10938:	4618      	mov	r0, r3
   1093a:	f7ff fe0d 	bl	10558 <LabGPIO::SetLow()>
                led1.SetLow();
   1093e:	ab09      	add	r3, sp, #36	; 0x24
   10940:	4618      	mov	r0, r3
   10942:	f7ff fe09 	bl	10558 <LabGPIO::SetLow()>
                led2.SetLow();
   10946:	ab05      	add	r3, sp, #20
   10948:	4618      	mov	r0, r3
   1094a:	f7ff fe05 	bl	10558 <LabGPIO::SetLow()>
                led3.SetLow();
   1094e:	ab01      	add	r3, sp, #4
   10950:	4618      	mov	r0, r3
   10952:	f7ff fe01 	bl	10558 <LabGPIO::SetLow()>
                lastButton = -1;
   10956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1095a:	9311      	str	r3, [sp, #68]	; 0x44
                Delay(1000);
   1095c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   10960:	f04f 0100 	mov.w	r1, #0
   10964:	f7ff ff32 	bl	107cc <Delay(unsigned long long)>
   10968:	e7a8      	b.n	108bc <main+0xc0>
            }
            else
            {
                toggleLED(button3, led3);
   1096a:	ab01      	add	r3, sp, #4
   1096c:	cb0c      	ldmia	r3, {r2, r3}
   1096e:	a903      	add	r1, sp, #12
   10970:	c903      	ldmia	r1, {r0, r1}
   10972:	f000 f809 	bl	10988 <toggleLED(LabGPIO, LabGPIO)>
        if (button0.ReadBool())
   10976:	e7a1      	b.n	108bc <main+0xc0>
   10978:	000107fd 	.word	0x000107fd
   1097c:	000174dc 	.word	0x000174dc
   10980:	00017480 	.word	0x00017480
   10984:	0001748c 	.word	0x0001748c

00010988 <toggleLED(LabGPIO, LabGPIO)>:
    }
    return 0;
}

void toggleLED(LabGPIO button, LabGPIO led)
{
   10988:	b530      	push	{r4, r5, lr}
   1098a:	b087      	sub	sp, #28
   1098c:	4675      	mov	r5, lr
   1098e:	ac02      	add	r4, sp, #8
   10990:	e884 0003 	stmia.w	r4, {r0, r1}
   10994:	4669      	mov	r1, sp
   10996:	e881 000c 	stmia.w	r1, {r2, r3}
   1099a:	462b      	mov	r3, r5
   1099c:	4619      	mov	r1, r3
   1099e:	481a      	ldr	r0, [pc, #104]	; (10a08 <toggleLED(LabGPIO, LabGPIO)+0x80>)
   109a0:	f002 fab0 	bl	12f04 <__cyg_profile_func_enter>
    bool finished=0;
   109a4:	2300      	movs	r3, #0
   109a6:	f88d 3017 	strb.w	r3, [sp, #23]
    while(!finished)
   109aa:	f89d 3017 	ldrb.w	r3, [sp, #23]
   109ae:	2b00      	cmp	r3, #0
   109b0:	d121      	bne.n	109f6 <toggleLED(LabGPIO, LabGPIO)+0x6e>
    {
        if (!(button.ReadBool())) //Button is released
   109b2:	ab02      	add	r3, sp, #8
   109b4:	4618      	mov	r0, r3
   109b6:	f7ff fe1b 	bl	105f0 <LabGPIO::ReadBool()>
   109ba:	4603      	mov	r3, r0
   109bc:	f083 0301 	eor.w	r3, r3, #1
   109c0:	b2db      	uxtb	r3, r3
   109c2:	2b00      	cmp	r3, #0
   109c4:	d0f1      	beq.n	109aa <toggleLED(LabGPIO, LabGPIO)+0x22>
        { 
            bool ledStatus = led.ReadBool();
   109c6:	466b      	mov	r3, sp
   109c8:	4618      	mov	r0, r3
   109ca:	f7ff fe11 	bl	105f0 <LabGPIO::ReadBool()>
   109ce:	4603      	mov	r3, r0
   109d0:	f88d 3016 	strb.w	r3, [sp, #22]
            if (ledStatus)
   109d4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   109d8:	2b00      	cmp	r3, #0
   109da:	d004      	beq.n	109e6 <toggleLED(LabGPIO, LabGPIO)+0x5e>
            {
                led.SetLow();
   109dc:	466b      	mov	r3, sp
   109de:	4618      	mov	r0, r3
   109e0:	f7ff fdba 	bl	10558 <LabGPIO::SetLow()>
   109e4:	e003      	b.n	109ee <toggleLED(LabGPIO, LabGPIO)+0x66>
            }
            else
            {
                led.SetHigh();
   109e6:	466b      	mov	r3, sp
   109e8:	4618      	mov	r0, r3
   109ea:	f7ff fd99 	bl	10520 <LabGPIO::SetHigh()>
            }
            finished=1;
   109ee:	2301      	movs	r3, #1
   109f0:	f88d 3017 	strb.w	r3, [sp, #23]
    while(!finished)
   109f4:	e7d9      	b.n	109aa <toggleLED(LabGPIO, LabGPIO)+0x22>
   109f6:	462b      	mov	r3, r5
   109f8:	4619      	mov	r1, r3
   109fa:	4803      	ldr	r0, [pc, #12]	; (10a08 <toggleLED(LabGPIO, LabGPIO)+0x80>)
   109fc:	f002 fa96 	bl	12f2c <__cyg_profile_func_exit>
        }
    }
}
   10a00:	bf00      	nop
   10a02:	b007      	add	sp, #28
   10a04:	bd30      	pop	{r4, r5, pc}
   10a06:	bf00      	nop
   10a08:	00010989 	.word	0x00010989

00010a0c <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   10a0c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   10a10:	b088      	sub	sp, #32
   10a12:	4675      	mov	r5, lr
   10a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
   10a18:	f88d 2004 	strb.w	r2, [sp, #4]
   10a1c:	462b      	mov	r3, r5
   10a1e:	4619      	mov	r1, r3
   10a20:	4824      	ldr	r0, [pc, #144]	; (10ab4 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   10a22:	f002 fa6f 	bl	12f04 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   10a26:	f04f 0300 	mov.w	r3, #0
   10a2a:	f04f 0400 	mov.w	r4, #0
   10a2e:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   10a32:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   10a36:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   10a3a:	bf08      	it	eq
   10a3c:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   10a40:	d106      	bne.n	10a50 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x44>
    timeout_time = kMaxWait;
   10a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10a46:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10a4a:	e9cd 3406 	strd	r3, r4, [sp, #24]
   10a4e:	e00b      	b.n	10a68 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x5c>
    timeout_time = Milliseconds() + timeout;
   10a50:	f7ff fe0c 	bl	1066c <Milliseconds()>
   10a54:	460a      	mov	r2, r1
   10a56:	4601      	mov	r1, r0
   10a58:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   10a5c:	eb13 0b01 	adds.w	fp, r3, r1
   10a60:	eb44 0c02 	adc.w	ip, r4, r2
   10a64:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   10a68:	2301      	movs	r3, #1
   10a6a:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   10a6c:	f7ff fdfe 	bl	1066c <Milliseconds()>
   10a70:	460a      	mov	r2, r1
   10a72:	4601      	mov	r1, r0
   10a74:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   10a78:	42a2      	cmp	r2, r4
   10a7a:	bf08      	it	eq
   10a7c:	4299      	cmpeq	r1, r3
   10a7e:	bf34      	ite	cc
   10a80:	2301      	movcc	r3, #1
   10a82:	2300      	movcs	r3, #0
   10a84:	b2db      	uxtb	r3, r3
   10a86:	2b00      	cmp	r3, #0
   10a88:	d008      	beq.n	10a9c <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x90>
    if (is_done())
   10a8a:	ab01      	add	r3, sp, #4
   10a8c:	4618      	mov	r0, r3
   10a8e:	f7ff fe0f 	bl	106b0 <Wait(unsigned long long)::{lambda()#1}::operator()() const>
   10a92:	4603      	mov	r3, r0
   10a94:	2b00      	cmp	r3, #0
   10a96:	d0e9      	beq.n	10a6c <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0x60>
      status = Status::kSuccess;
   10a98:	2300      	movs	r3, #0
   10a9a:	9305      	str	r3, [sp, #20]
  return status;
   10a9c:	9c05      	ldr	r4, [sp, #20]
   10a9e:	462b      	mov	r3, r5
   10aa0:	4619      	mov	r1, r3
   10aa2:	4804      	ldr	r0, [pc, #16]	; (10ab4 <Status Wait<Wait(unsigned long long)::{lambda()#1}>(unsigned long long, Wait(unsigned long long)::{lambda()#1})+0xa8>)
   10aa4:	f002 fa42 	bl	12f2c <__cyg_profile_func_exit>
   10aa8:	4623      	mov	r3, r4
}
   10aaa:	4618      	mov	r0, r3
   10aac:	b008      	add	sp, #32
   10aae:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   10ab2:	bf00      	nop
   10ab4:	00010a0d 	.word	0x00010a0d

00010ab8 <debug::PrintBacktrace(bool, void*)>:
}

[[gnu::no_instrument_function]]
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
   10ab8:	b500      	push	{lr}
   10aba:	b08b      	sub	sp, #44	; 0x2c
   10abc:	4603      	mov	r3, r0
   10abe:	9100      	str	r1, [sp, #0]
   10ac0:	f88d 3007 	strb.w	r3, [sp, #7]
  printf("Stack Depth = %zd\n", GetStackDepth());
   10ac4:	f002 fa54 	bl	12f70 <GetStackDepth()>
   10ac8:	4603      	mov	r3, r0
   10aca:	4619      	mov	r1, r3
   10acc:	4831      	ldr	r0, [pc, #196]	; (10b94 <debug::PrintBacktrace(bool, void*)+0xdc>)
   10ace:	f003 fc79 	bl	143c4 <printf>
  // stack_depth-1 to ignore PrintBacktrace()
  // PrintBacktrace shouldn't be ignored in profiling because it causes
  // the exit to still fire, which can result in a negative stack_depth
  void ** list_of_called_functions = GetStackTrace();
   10ad2:	f002 fa39 	bl	12f48 <GetStackTrace()>
   10ad6:	9007      	str	r0, [sp, #28]
  size_t stack_depth               = GetStackDepth();
   10ad8:	f002 fa4a 	bl	12f70 <GetStackDepth()>
   10adc:	9006      	str	r0, [sp, #24]
  // Ignore the last function as it is the Backtrace function
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10ade:	2300      	movs	r3, #0
   10ae0:	9309      	str	r3, [sp, #36]	; 0x24
   10ae2:	9b06      	ldr	r3, [sp, #24]
   10ae4:	3b01      	subs	r3, #1
   10ae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10ae8:	429a      	cmp	r2, r3
   10aea:	d20d      	bcs.n	10b08 <debug::PrintBacktrace(bool, void*)+0x50>
  {
    printf("  #%zu: 0x%p\n", pos, list_of_called_functions[pos]);
   10aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10aee:	009b      	lsls	r3, r3, #2
   10af0:	9a07      	ldr	r2, [sp, #28]
   10af2:	4413      	add	r3, r2
   10af4:	681b      	ldr	r3, [r3, #0]
   10af6:	461a      	mov	r2, r3
   10af8:	9909      	ldr	r1, [sp, #36]	; 0x24
   10afa:	4827      	ldr	r0, [pc, #156]	; (10b98 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10afc:	f003 fc62 	bl	143c4 <printf>
  for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10b02:	3301      	adds	r3, #1
   10b04:	9309      	str	r3, [sp, #36]	; 0x24
   10b06:	e7ec      	b.n	10ae2 <debug::PrintBacktrace(bool, void*)+0x2a>
  }
  if (final_address != nullptr)
   10b08:	9b00      	ldr	r3, [sp, #0]
   10b0a:	2b00      	cmp	r3, #0
   10b0c:	d006      	beq.n	10b1c <debug::PrintBacktrace(bool, void*)+0x64>
  {
    printf("  #%zu: 0x%p\n", stack_depth - 1, final_address);
   10b0e:	9b06      	ldr	r3, [sp, #24]
   10b10:	3b01      	subs	r3, #1
   10b12:	9a00      	ldr	r2, [sp, #0]
   10b14:	4619      	mov	r1, r3
   10b16:	4820      	ldr	r0, [pc, #128]	; (10b98 <debug::PrintBacktrace(bool, void*)+0xe0>)
   10b18:	f003 fc54 	bl	143c4 <printf>
  }
  if (show_make_command)
   10b1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10b20:	2b00      	cmp	r3, #0
   10b22:	d033      	beq.n	10b8c <debug::PrintBacktrace(bool, void*)+0xd4>
  {
    constexpr const char kBuildType[] =
   10b24:	4a1d      	ldr	r2, [pc, #116]	; (10b9c <debug::PrintBacktrace(bool, void*)+0xe4>)
   10b26:	ab03      	add	r3, sp, #12
   10b28:	ca07      	ldmia	r2, {r0, r1, r2}
   10b2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#if defined(APPLICATION)
        "application";
#else
        "bootloader";
#endif
    puts("\nRun: the following command in your project directory");
   10b2e:	481c      	ldr	r0, [pc, #112]	; (10ba0 <debug::PrintBacktrace(bool, void*)+0xe8>)
   10b30:	f002 f9b8 	bl	12ea4 <puts>
    printf("\n  " SJ2_BOLD_WHITE "make stacktrace-%s TRACES=\"", kBuildType);
   10b34:	ab03      	add	r3, sp, #12
   10b36:	4619      	mov	r1, r3
   10b38:	481a      	ldr	r0, [pc, #104]	; (10ba4 <debug::PrintBacktrace(bool, void*)+0xec>)
   10b3a:	f003 fc43 	bl	143c4 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10b3e:	2300      	movs	r3, #0
   10b40:	9308      	str	r3, [sp, #32]
   10b42:	9b06      	ldr	r3, [sp, #24]
   10b44:	3b01      	subs	r3, #1
   10b46:	9a08      	ldr	r2, [sp, #32]
   10b48:	429a      	cmp	r2, r3
   10b4a:	d212      	bcs.n	10b72 <debug::PrintBacktrace(bool, void*)+0xba>
    {
      if (pos != 0)
   10b4c:	9b08      	ldr	r3, [sp, #32]
   10b4e:	2b00      	cmp	r3, #0
   10b50:	d002      	beq.n	10b58 <debug::PrintBacktrace(bool, void*)+0xa0>
      {
        putchar(' ');
   10b52:	2020      	movs	r0, #32
   10b54:	f002 f98a 	bl	12e6c <putchar>
      }
      printf("0x%p", list_of_called_functions[pos]);
   10b58:	9b08      	ldr	r3, [sp, #32]
   10b5a:	009b      	lsls	r3, r3, #2
   10b5c:	9a07      	ldr	r2, [sp, #28]
   10b5e:	4413      	add	r3, r2
   10b60:	681b      	ldr	r3, [r3, #0]
   10b62:	4619      	mov	r1, r3
   10b64:	4810      	ldr	r0, [pc, #64]	; (10ba8 <debug::PrintBacktrace(bool, void*)+0xf0>)
   10b66:	f003 fc2d 	bl	143c4 <printf>
    for (size_t pos = 0; pos < stack_depth - 1; pos++)
   10b6a:	9b08      	ldr	r3, [sp, #32]
   10b6c:	3301      	adds	r3, #1
   10b6e:	9308      	str	r3, [sp, #32]
   10b70:	e7e7      	b.n	10b42 <debug::PrintBacktrace(bool, void*)+0x8a>
    }
    if (final_address != nullptr)
   10b72:	9b00      	ldr	r3, [sp, #0]
   10b74:	2b00      	cmp	r3, #0
   10b76:	d003      	beq.n	10b80 <debug::PrintBacktrace(bool, void*)+0xc8>
    {
      printf(" 0x%p", final_address);
   10b78:	9900      	ldr	r1, [sp, #0]
   10b7a:	480c      	ldr	r0, [pc, #48]	; (10bac <debug::PrintBacktrace(bool, void*)+0xf4>)
   10b7c:	f003 fc22 	bl	143c4 <printf>
    }
    puts("\"\n" SJ2_COLOR_RESET);
   10b80:	480b      	ldr	r0, [pc, #44]	; (10bb0 <debug::PrintBacktrace(bool, void*)+0xf8>)
   10b82:	f002 f98f 	bl	12ea4 <puts>
    puts(
   10b86:	480b      	ldr	r0, [pc, #44]	; (10bb4 <debug::PrintBacktrace(bool, void*)+0xfc>)
   10b88:	f002 f98c 	bl	12ea4 <puts>
        "This will report the file and line number that led to this function "
        "being called.");
  }
}
   10b8c:	bf00      	nop
   10b8e:	b00b      	add	sp, #44	; 0x2c
   10b90:	f85d fb04 	ldr.w	pc, [sp], #4
   10b94:	000174e8 	.word	0x000174e8
   10b98:	000174fc 	.word	0x000174fc
   10b9c:	000175d8 	.word	0x000175d8
   10ba0:	0001750c 	.word	0x0001750c
   10ba4:	00017544 	.word	0x00017544
   10ba8:	0001756c 	.word	0x0001756c
   10bac:	00017574 	.word	0x00017574
   10bb0:	0001757c 	.word	0x0001757c
   10bb4:	00017584 	.word	0x00017584

00010bb8 <SetUptimeFunction(unsigned long long (*)())>:
{
   10bb8:	b510      	push	{r4, lr}
   10bba:	b082      	sub	sp, #8
   10bbc:	4674      	mov	r4, lr
   10bbe:	9001      	str	r0, [sp, #4]
   10bc0:	4623      	mov	r3, r4
   10bc2:	4619      	mov	r1, r3
   10bc4:	4806      	ldr	r0, [pc, #24]	; (10be0 <SetUptimeFunction(unsigned long long (*)())+0x28>)
   10bc6:	f002 f99d 	bl	12f04 <__cyg_profile_func_enter>
  Uptime = uptime_function;
   10bca:	4a06      	ldr	r2, [pc, #24]	; (10be4 <SetUptimeFunction(unsigned long long (*)())+0x2c>)
   10bcc:	9b01      	ldr	r3, [sp, #4]
   10bce:	6013      	str	r3, [r2, #0]
   10bd0:	4623      	mov	r3, r4
   10bd2:	4619      	mov	r1, r3
   10bd4:	4802      	ldr	r0, [pc, #8]	; (10be0 <SetUptimeFunction(unsigned long long (*)())+0x28>)
   10bd6:	f002 f9a9 	bl	12f2c <__cyg_profile_func_exit>
}
   10bda:	bf00      	nop
   10bdc:	b002      	add	sp, #8
   10bde:	bd10      	pop	{r4, pc}
   10be0:	00010bb9 	.word	0x00010bb9
   10be4:	10000000 	.word	0x10000000

00010be8 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>:

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  constexpr Lpc40xxSystemController() {}

  uint32_t SetClockFrequency(uint8_t frequency_in_mhz) override
   10be8:	b500      	push	{lr}
   10bea:	b085      	sub	sp, #20
   10bec:	9001      	str	r0, [sp, #4]
   10bee:	460b      	mov	r3, r1
   10bf0:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    uint32_t offset = 0;
   10bf4:	2300      	movs	r3, #0
   10bf6:	9303      	str	r3, [sp, #12]
    SelectOscillatorSource(OscillatorSource::kIrc);
   10bf8:	2100      	movs	r1, #0
   10bfa:	9801      	ldr	r0, [sp, #4]
   10bfc:	f000 f8ce 	bl	10d9c <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    if (frequency_in_mhz > 12)
   10c00:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10c04:	2b0c      	cmp	r3, #12
   10c06:	d916      	bls.n	10c36 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x4e>
    {
      offset = SetMainPll(PllInput::kIrc, frequency_in_mhz);
   10c08:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10c0c:	b29b      	uxth	r3, r3
   10c0e:	461a      	mov	r2, r3
   10c10:	210c      	movs	r1, #12
   10c12:	9801      	ldr	r0, [sp, #4]
   10c14:	f000 f9ac 	bl	10f70 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>
   10c18:	9003      	str	r0, [sp, #12]
      SelectMainClockSource(MainClockSource::kPllClock);
   10c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
   10c1e:	9801      	ldr	r0, [sp, #4]
   10c20:	f000 f8d6 	bl	10dd0 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = frequency_in_mhz * 1'000'000;
   10c24:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10c28:	4a10      	ldr	r2, [pc, #64]	; (10c6c <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x84>)
   10c2a:	fb02 f303 	mul.w	r3, r2, r3
   10c2e:	461a      	mov	r2, r3
   10c30:	4b0f      	ldr	r3, [pc, #60]	; (10c70 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   10c32:	601a      	str	r2, [r3, #0]
   10c34:	e006      	b.n	10c44 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x5c>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
   10c36:	2100      	movs	r1, #0
   10c38:	9801      	ldr	r0, [sp, #4]
   10c3a:	f000 f8c9 	bl	10dd0 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
      speed_in_hertz = kDefaultIRCFrequency;
   10c3e:	4b0c      	ldr	r3, [pc, #48]	; (10c70 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x88>)
   10c40:	4a0c      	ldr	r2, [pc, #48]	; (10c74 <Lpc40xxSystemController::SetClockFrequency(unsigned char)+0x8c>)
   10c42:	601a      	str	r2, [r3, #0]
    }
    SetCpuClockDivider(kDivideInputBy1);
   10c44:	2101      	movs	r1, #1
   10c46:	9801      	ldr	r0, [sp, #4]
   10c48:	f000 fa4a 	bl	110e0 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>
    SetPeripheralClockDivider(kDivideInputBy1);
   10c4c:	9b01      	ldr	r3, [sp, #4]
   10c4e:	681b      	ldr	r3, [r3, #0]
   10c50:	3304      	adds	r3, #4
   10c52:	681b      	ldr	r3, [r3, #0]
   10c54:	2101      	movs	r1, #1
   10c56:	9801      	ldr	r0, [sp, #4]
   10c58:	4798      	blx	r3
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
   10c5a:	2100      	movs	r1, #0
   10c5c:	9801      	ldr	r0, [sp, #4]
   10c5e:	f000 fa73 	bl	11148 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>
    return offset;
   10c62:	9b03      	ldr	r3, [sp, #12]
  }
   10c64:	4618      	mov	r0, r3
   10c66:	b005      	add	sp, #20
   10c68:	f85d fb04 	ldr.w	pc, [sp], #4
   10c6c:	000f4240 	.word	0x000f4240
   10c70:	10000008 	.word	0x10000008
   10c74:	00b71b00 	.word	0x00b71b00

00010c78 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>:

  void SetPeripheralClockDivider(uint8_t peripheral_divider) override
   10c78:	b500      	push	{lr}
   10c7a:	b083      	sub	sp, #12
   10c7c:	9001      	str	r0, [sp, #4]
   10c7e:	460b      	mov	r3, r1
   10c80:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
   10c84:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10c88:	2b04      	cmp	r3, #4
   10c8a:	d90d      	bls.n	10ca8 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x30>
   10c8c:	23ae      	movs	r3, #174	; 0xae
   10c8e:	4a0b      	ldr	r2, [pc, #44]	; (10cbc <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x44>)
   10c90:	490b      	ldr	r1, [pc, #44]	; (10cc0 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x48>)
   10c92:	480c      	ldr	r0, [pc, #48]	; (10cc4 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x4c>)
   10c94:	f003 fb96 	bl	143c4 <printf>
   10c98:	480b      	ldr	r0, [pc, #44]	; (10cc8 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x50>)
   10c9a:	f002 f903 	bl	12ea4 <puts>
   10c9e:	2100      	movs	r1, #0
   10ca0:	2001      	movs	r0, #1
   10ca2:	f7ff ff09 	bl	10ab8 <debug::PrintBacktrace(bool, void*)>
   10ca6:	e7fe      	b.n	10ca6 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
   10ca8:	4b08      	ldr	r3, [pc, #32]	; (10ccc <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)+0x54>)
   10caa:	681b      	ldr	r3, [r3, #0]
   10cac:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10cb0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
   10cb4:	bf00      	nop
   10cb6:	b003      	add	sp, #12
   10cb8:	f85d fb04 	ldr.w	pc, [sp], #4
   10cbc:	00017c70 	.word	0x00017c70
   10cc0:	00017a98 	.word	0x00017a98
   10cc4:	000175e4 	.word	0x000175e4
   10cc8:	00017684 	.word	0x00017684
   10ccc:	10000004 	.word	0x10000004

00010cd0 <Lpc40xxSystemController::GetPeripheralClockDivider() const>:

  uint32_t GetPeripheralClockDivider() const override
   10cd0:	b082      	sub	sp, #8
   10cd2:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return 1;
#else
    return system_controller->PCLKSEL;
   10cd4:	4b03      	ldr	r3, [pc, #12]	; (10ce4 <Lpc40xxSystemController::GetPeripheralClockDivider() const+0x14>)
   10cd6:	681b      	ldr	r3, [r3, #0]
   10cd8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
#endif
  }
   10cdc:	4618      	mov	r0, r3
   10cde:	b002      	add	sp, #8
   10ce0:	4770      	bx	lr
   10ce2:	bf00      	nop
   10ce4:	10000004 	.word	0x10000004

00010ce8 <Lpc40xxSystemController::GetSystemFrequency() const>:

  uint32_t GetSystemFrequency() const override
   10ce8:	b082      	sub	sp, #8
   10cea:	9001      	str	r0, [sp, #4]
  {
#if defined(HOST_TEST)
    return config::kSystemClockRate;
#else
    return speed_in_hertz;
   10cec:	4b02      	ldr	r3, [pc, #8]	; (10cf8 <Lpc40xxSystemController::GetSystemFrequency() const+0x10>)
   10cee:	681b      	ldr	r3, [r3, #0]
#endif
  }
   10cf0:	4618      	mov	r0, r3
   10cf2:	b002      	add	sp, #8
   10cf4:	4770      	bx	lr
   10cf6:	bf00      	nop
   10cf8:	10000008 	.word	0x10000008

00010cfc <Lpc40xxSystemController::GetPeripheralFrequency() const>:

  uint32_t GetPeripheralFrequency() const override
   10cfc:	b500      	push	{lr}
   10cfe:	b085      	sub	sp, #20
   10d00:	9001      	str	r0, [sp, #4]
  {
    uint32_t peripheral_clock_divider = GetPeripheralClockDivider();
   10d02:	9b01      	ldr	r3, [sp, #4]
   10d04:	681b      	ldr	r3, [r3, #0]
   10d06:	3308      	adds	r3, #8
   10d08:	681b      	ldr	r3, [r3, #0]
   10d0a:	9801      	ldr	r0, [sp, #4]
   10d0c:	4798      	blx	r3
   10d0e:	9002      	str	r0, [sp, #8]
    uint32_t result = 0;  // return 0 if peripheral_clock_divider == 0
   10d10:	2300      	movs	r3, #0
   10d12:	9303      	str	r3, [sp, #12]
    if (peripheral_clock_divider != 0)
   10d14:	9b02      	ldr	r3, [sp, #8]
   10d16:	2b00      	cmp	r3, #0
   10d18:	d00a      	beq.n	10d30 <Lpc40xxSystemController::GetPeripheralFrequency() const+0x34>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
   10d1a:	9b01      	ldr	r3, [sp, #4]
   10d1c:	681b      	ldr	r3, [r3, #0]
   10d1e:	330c      	adds	r3, #12
   10d20:	681b      	ldr	r3, [r3, #0]
   10d22:	9801      	ldr	r0, [sp, #4]
   10d24:	4798      	blx	r3
   10d26:	4602      	mov	r2, r0
   10d28:	9b02      	ldr	r3, [sp, #8]
   10d2a:	fbb2 f3f3 	udiv	r3, r2, r3
   10d2e:	9303      	str	r3, [sp, #12]
    }
    return result;
   10d30:	9b03      	ldr	r3, [sp, #12]
  }
   10d32:	4618      	mov	r0, r3
   10d34:	b005      	add	sp, #20
   10d36:	f85d fb04 	ldr.w	pc, [sp], #4
   10d3a:	Address 0x0000000000010d3a is out of bounds.


00010d3c <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>:

  void PowerUpPeripheral(const PeripheralID & peripheral_select) override
   10d3c:	b084      	sub	sp, #16
   10d3e:	9001      	str	r0, [sp, #4]
   10d40:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_with_enabled_peripheral =
        system_controller->PCONP | (1 << peripheral_select.device_id);
   10d42:	4b09      	ldr	r3, [pc, #36]	; (10d68 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10d44:	681b      	ldr	r3, [r3, #0]
   10d46:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10d4a:	9a00      	ldr	r2, [sp, #0]
   10d4c:	6812      	ldr	r2, [r2, #0]
   10d4e:	2101      	movs	r1, #1
   10d50:	fa01 f202 	lsl.w	r2, r1, r2
   10d54:	4313      	orrs	r3, r2
   10d56:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_with_enabled_peripheral;
   10d58:	4b03      	ldr	r3, [pc, #12]	; (10d68 <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10d5a:	681b      	ldr	r3, [r3, #0]
   10d5c:	9a03      	ldr	r2, [sp, #12]
   10d5e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   10d62:	bf00      	nop
   10d64:	b004      	add	sp, #16
   10d66:	4770      	bx	lr
   10d68:	10000004 	.word	0x10000004

00010d6c <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)>:
  void PowerDownPeripheral(const PeripheralID & peripheral_select) override
   10d6c:	b084      	sub	sp, #16
   10d6e:	9001      	str	r0, [sp, #4]
   10d70:	9100      	str	r1, [sp, #0]
  {
    auto power_connection_without_enabled_peripheral =
        system_controller->PCONP & (1 << peripheral_select.device_id);
   10d72:	4b09      	ldr	r3, [pc, #36]	; (10d98 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10d74:	681b      	ldr	r3, [r3, #0]
   10d76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   10d7a:	9a00      	ldr	r2, [sp, #0]
   10d7c:	6812      	ldr	r2, [r2, #0]
   10d7e:	2101      	movs	r1, #1
   10d80:	fa01 f202 	lsl.w	r2, r1, r2
   10d84:	4013      	ands	r3, r2
   10d86:	9303      	str	r3, [sp, #12]

    system_controller->PCONP = power_connection_without_enabled_peripheral;
   10d88:	4b03      	ldr	r3, [pc, #12]	; (10d98 <Lpc40xxSystemController::PowerDownPeripheral(SystemControllerInterface::PeripheralID const&)+0x2c>)
   10d8a:	681b      	ldr	r3, [r3, #0]
   10d8c:	9a03      	ldr	r2, [sp, #12]
   10d8e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }
   10d92:	bf00      	nop
   10d94:	b004      	add	sp, #16
   10d96:	4770      	bx	lr
   10d98:	10000004 	.word	0x10000004

00010d9c <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>:

 private:
  void SelectOscillatorSource(OscillatorSource source)
   10d9c:	b084      	sub	sp, #16
   10d9e:	9001      	str	r0, [sp, #4]
   10da0:	460b      	mov	r3, r1
   10da2:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    uint32_t source_bit = static_cast<uint32_t>(source);
   10da6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10daa:	9303      	str	r3, [sp, #12]
    system_controller->CLKSRCSEL =
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   10dac:	4b07      	ldr	r3, [pc, #28]	; (10dcc <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   10dae:	681b      	ldr	r3, [r3, #0]
   10db0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   10db4:	f023 0101 	bic.w	r1, r3, #1
    system_controller->CLKSRCSEL =
   10db8:	4b04      	ldr	r3, [pc, #16]	; (10dcc <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)+0x30>)
   10dba:	681b      	ldr	r3, [r3, #0]
        (system_controller->CLKSRCSEL & ~(kOscillatorSelect)) | source_bit;
   10dbc:	9a03      	ldr	r2, [sp, #12]
   10dbe:	430a      	orrs	r2, r1
    system_controller->CLKSRCSEL =
   10dc0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
   10dc4:	bf00      	nop
   10dc6:	b004      	add	sp, #16
   10dc8:	4770      	bx	lr
   10dca:	bf00      	nop
   10dcc:	10000004 	.word	0x10000004

00010dd0 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>:

  void SelectMainClockSource(MainClockSource source)
   10dd0:	b082      	sub	sp, #8
   10dd2:	9001      	str	r0, [sp, #4]
   10dd4:	460b      	mov	r3, r1
   10dd6:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   10dda:	4b08      	ldr	r3, [pc, #32]	; (10dfc <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   10ddc:	681b      	ldr	r3, [r3, #0]
   10dde:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   10de2:	f423 7180 	bic.w	r1, r3, #256	; 0x100
        static_cast<uint32_t>(source);
   10de6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->CCLKSEL =
   10dea:	4b04      	ldr	r3, [pc, #16]	; (10dfc <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)+0x2c>)
   10dec:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~(kBaseClockSelect)) |
   10dee:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   10df0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   10df4:	bf00      	nop
   10df6:	b002      	add	sp, #8
   10df8:	4770      	bx	lr
   10dfa:	bf00      	nop
   10dfc:	10000004 	.word	0x10000004

00010e00 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>:

  void SelectUsbClockSource(UsbSource usb_clock)
   10e00:	b082      	sub	sp, #8
   10e02:	9001      	str	r0, [sp, #4]
   10e04:	460b      	mov	r3, r1
   10e06:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->USBCLKSEL =
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   10e0a:	4b08      	ldr	r3, [pc, #32]	; (10e2c <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   10e0c:	681b      	ldr	r3, [r3, #0]
   10e0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   10e12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(usb_clock);
   10e16:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->USBCLKSEL =
   10e1a:	4b04      	ldr	r3, [pc, #16]	; (10e2c <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)+0x2c>)
   10e1c:	681b      	ldr	r3, [r3, #0]
        (system_controller->USBCLKSEL & ~(kUsbClockSource)) |
   10e1e:	430a      	orrs	r2, r1
    system_controller->USBCLKSEL =
   10e20:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
   10e24:	bf00      	nop
   10e26:	b002      	add	sp, #8
   10e28:	4770      	bx	lr
   10e2a:	bf00      	nop
   10e2c:	10000004 	.word	0x10000004

00010e30 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>:

  void SelectSpifiClockSource(SpifiSource spifi_clock)
   10e30:	b082      	sub	sp, #8
   10e32:	9001      	str	r0, [sp, #4]
   10e34:	460b      	mov	r3, r1
   10e36:	f8ad 3002 	strh.w	r3, [sp, #2]
  {
    system_controller->SPIFISEL =
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   10e3a:	4b08      	ldr	r3, [pc, #32]	; (10e5c <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   10e3c:	681b      	ldr	r3, [r3, #0]
   10e3e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
   10e42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
        static_cast<uint32_t>(spifi_clock);
   10e46:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    system_controller->SPIFISEL =
   10e4a:	4b04      	ldr	r3, [pc, #16]	; (10e5c <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)+0x2c>)
   10e4c:	681b      	ldr	r3, [r3, #0]
        (system_controller->SPIFISEL & ~(kSpifiClockSource)) |
   10e4e:	430a      	orrs	r2, r1
    system_controller->SPIFISEL =
   10e50:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  }
   10e54:	bf00      	nop
   10e56:	b002      	add	sp, #8
   10e58:	4770      	bx	lr
   10e5a:	bf00      	nop
   10e5c:	10000004 	.word	0x10000004

00010e60 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t CalculatePll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   10e60:	b500      	push	{lr}
   10e62:	b087      	sub	sp, #28
   10e64:	9001      	str	r0, [sp, #4]
   10e66:	460b      	mov	r3, r1
   10e68:	f8ad 3002 	strh.w	r3, [sp, #2]
   10e6c:	4613      	mov	r3, r2
   10e6e:	f8ad 3000 	strh.w	r3, [sp]
  {
    SJ2_ASSERT_FATAL(desired_speed_in_mhz < 384 && desired_speed_in_mhz > 12,
   10e72:	f8bd 3000 	ldrh.w	r3, [sp]
   10e76:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   10e7a:	d203      	bcs.n	10e84 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x24>
   10e7c:	f8bd 3000 	ldrh.w	r3, [sp]
   10e80:	2b0c      	cmp	r3, #12
   10e82:	d80d      	bhi.n	10ea0 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x40>
   10e84:	23ff      	movs	r3, #255	; 0xff
   10e86:	4a34      	ldr	r2, [pc, #208]	; (10f58 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   10e88:	4934      	ldr	r1, [pc, #208]	; (10f5c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xfc>)
   10e8a:	4835      	ldr	r0, [pc, #212]	; (10f60 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x100>)
   10e8c:	f003 fa9a 	bl	143c4 <printf>
   10e90:	4834      	ldr	r0, [pc, #208]	; (10f64 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   10e92:	f002 f807 	bl	12ea4 <puts>
   10e96:	2100      	movs	r1, #0
   10e98:	2001      	movs	r0, #1
   10e9a:	f7ff fe0d 	bl	10ab8 <debug::PrintBacktrace(bool, void*)>
   10e9e:	e7fe      	b.n	10e9e <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x3e>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
   10ea0:	2301      	movs	r3, #1
   10ea2:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t multiplier_value;
    if ((desired_speed_in_mhz % static_cast<uint16_t>(input_frequency)) >= 1)
   10ea6:	f8bd 3000 	ldrh.w	r3, [sp]
   10eaa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10eae:	fbb3 f1f2 	udiv	r1, r3, r2
   10eb2:	fb02 f201 	mul.w	r2, r2, r1
   10eb6:	1a9b      	subs	r3, r3, r2
   10eb8:	b29b      	uxth	r3, r3
   10eba:	2b00      	cmp	r3, #0
   10ebc:	d009      	beq.n	10ed2 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x72>
    {
      multiplier_value = static_cast<uint32_t>(
          (desired_speed_in_mhz / static_cast<uint16_t>(input_frequency)) + 1);
   10ebe:	f8bd 2000 	ldrh.w	r2, [sp]
   10ec2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10ec6:	fbb2 f3f3 	udiv	r3, r2, r3
   10eca:	b29b      	uxth	r3, r3
   10ecc:	3301      	adds	r3, #1
      multiplier_value = static_cast<uint32_t>(
   10ece:	9304      	str	r3, [sp, #16]
   10ed0:	e007      	b.n	10ee2 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x82>
    }
    else
    {
      multiplier_value = static_cast<uint32_t>(
          desired_speed_in_mhz / static_cast<uint16_t>(input_frequency));
   10ed2:	f8bd 2000 	ldrh.w	r2, [sp]
   10ed6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10eda:	fbb2 f3f3 	udiv	r3, r2, r3
   10ede:	b29b      	uxth	r3, r3
      multiplier_value = static_cast<uint32_t>(
   10ee0:	9304      	str	r3, [sp, #16]
    }
    uint16_t divider_value = 1;
   10ee2:	2301      	movs	r3, #1
   10ee4:	f8ad 300e 	strh.w	r3, [sp, #14]
    while (calculating)
   10ee8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10eec:	2b00      	cmp	r3, #0
   10eee:	d02e      	beq.n	10f4e <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xee>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
   10ef0:	9b04      	ldr	r3, [sp, #16]
   10ef2:	b29b      	uxth	r3, r3
   10ef4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10ef8:	fb12 f303 	smulbb	r3, r2, r3
   10efc:	b29b      	uxth	r3, r3
   10efe:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   10f02:	fb12 f303 	smulbb	r3, r2, r3
   10f06:	b29b      	uxth	r3, r3
   10f08:	005b      	lsls	r3, r3, #1
   10f0a:	f8ad 300c 	strh.w	r3, [sp, #12]
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
   10f0e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   10f12:	2b9b      	cmp	r3, #155	; 0x9b
   10f14:	d903      	bls.n	10f1e <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xbe>
      {
        calculating = false;
   10f16:	2300      	movs	r3, #0
   10f18:	f88d 3017 	strb.w	r3, [sp, #23]
   10f1c:	e7e4      	b.n	10ee8 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
   10f1e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   10f22:	005b      	lsls	r3, r3, #1
   10f24:	f8ad 300e 	strh.w	r3, [sp, #14]
        SJ2_ASSERT_FATAL(divider_value < 8,
   10f28:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   10f2c:	2b07      	cmp	r3, #7
   10f2e:	d9db      	bls.n	10ee8 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x88>
   10f30:	f240 131b 	movw	r3, #283	; 0x11b
   10f34:	4a08      	ldr	r2, [pc, #32]	; (10f58 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>)
   10f36:	490c      	ldr	r1, [pc, #48]	; (10f68 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x108>)
   10f38:	480c      	ldr	r0, [pc, #48]	; (10f6c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x10c>)
   10f3a:	f003 fa43 	bl	143c4 <printf>
   10f3e:	4809      	ldr	r0, [pc, #36]	; (10f64 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0x104>)
   10f40:	f001 ffb0 	bl	12ea4 <puts>
   10f44:	2100      	movs	r1, #0
   10f46:	2001      	movs	r0, #1
   10f48:	f7ff fdb6 	bl	10ab8 <debug::PrintBacktrace(bool, void*)>
   10f4c:	e7fe      	b.n	10f4c <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)+0xec>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
   10f4e:	9b04      	ldr	r3, [sp, #16]
  }
   10f50:	4618      	mov	r0, r3
   10f52:	b007      	add	sp, #28
   10f54:	f85d fb04 	ldr.w	pc, [sp], #4
   10f58:	00017d18 	.word	0x00017d18
   10f5c:	00017ab0 	.word	0x00017ab0
   10f60:	0001769c 	.word	0x0001769c
   10f64:	00017684 	.word	0x00017684
   10f68:	00017ac8 	.word	0x00017ac8
   10f6c:	0001778c 	.word	0x0001778c

00010f70 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)>:

  uint32_t SetMainPll(PllInput input_frequency, uint16_t desired_speed_in_mhz)
   10f70:	b510      	push	{r4, lr}
   10f72:	b08a      	sub	sp, #40	; 0x28
   10f74:	9001      	str	r0, [sp, #4]
   10f76:	460b      	mov	r3, r1
   10f78:	f8ad 3002 	strh.w	r3, [sp, #2]
   10f7c:	4613      	mov	r3, r2
   10f7e:	f8ad 3000 	strh.w	r3, [sp]
  {
    uint16_t divider_value = 1;
   10f82:	2301      	movs	r3, #1
   10f84:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint64_t timeout_time  = Milliseconds() + kDefaultTimeout;
   10f88:	f7ff fb70 	bl	1066c <Milliseconds()>
   10f8c:	460a      	mov	r2, r1
   10f8e:	4601      	mov	r1, r0
   10f90:	f511 737a 	adds.w	r3, r1, #1000	; 0x3e8
   10f94:	f142 0400 	adc.w	r4, r2, #0
   10f98:	e9cd 3404 	strd	r3, r4, [sp, #16]
    uint64_t current_time  = Milliseconds();
   10f9c:	f7ff fb66 	bl	1066c <Milliseconds()>
   10fa0:	e9cd 0108 	strd	r0, r1, [sp, #32]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_speed_in_mhz);
   10fa4:	f8bd 2000 	ldrh.w	r2, [sp]
   10fa8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10fac:	4619      	mov	r1, r3
   10fae:	9801      	ldr	r0, [sp, #4]
   10fb0:	f7ff ff56 	bl	10e60 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)>
   10fb4:	9003      	str	r0, [sp, #12]
    uint32_t actual_speed =
        static_cast<uint32_t>(input_frequency) * multiplier_value;
   10fb6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    uint32_t actual_speed =
   10fba:	9b03      	ldr	r3, [sp, #12]
   10fbc:	fb02 f303 	mul.w	r3, r2, r3
   10fc0:	9307      	str	r3, [sp, #28]
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
   10fc2:	2100      	movs	r1, #0
   10fc4:	9801      	ldr	r0, [sp, #4]
   10fc6:	f7ff fee9 	bl	10d9c <Lpc40xxSystemController::SelectOscillatorSource(Lpc40xxSystemController::OscillatorSource)>
    SelectMainClockSource(MainClockSource::kBaseClock);
   10fca:	2100      	movs	r1, #0
   10fcc:	9801      	ldr	r0, [sp, #4]
   10fce:	f7ff feff 	bl	10dd0 <Lpc40xxSystemController::SelectMainClockSource(Lpc40xxSystemController::MainClockSource)>
    SelectUsbClockSource(UsbSource::kBaseClock);
   10fd2:	2100      	movs	r1, #0
   10fd4:	9801      	ldr	r0, [sp, #4]
   10fd6:	f7ff ff13 	bl	10e00 <Lpc40xxSystemController::SelectUsbClockSource(Lpc40xxSystemController::UsbSource)>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
   10fda:	2100      	movs	r1, #0
   10fdc:	9801      	ldr	r0, [sp, #4]
   10fde:	f7ff ff27 	bl	10e30 <Lpc40xxSystemController::SelectSpifiClockSource(Lpc40xxSystemController::SpifiSource)>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   10fe2:	4b3a      	ldr	r3, [pc, #232]	; (110cc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10fe4:	681b      	ldr	r3, [r3, #0]
   10fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   10fea:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
   10fee:	9b03      	ldr	r3, [sp, #12]
   10ff0:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
   10ff2:	4b36      	ldr	r3, [pc, #216]	; (110cc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10ff4:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
   10ff6:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   10ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   10ffc:	4b33      	ldr	r3, [pc, #204]	; (110cc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   10ffe:	681b      	ldr	r3, [r3, #0]
   11000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11004:	f023 0260 	bic.w	r2, r3, #96	; 0x60
   11008:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1100c:	015b      	lsls	r3, r3, #5
   1100e:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
   11010:	4b2e      	ldr	r3, [pc, #184]	; (110cc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11012:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
   11014:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
   11016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
   1101a:	4b2c      	ldr	r3, [pc, #176]	; (110cc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1101c:	681b      	ldr	r3, [r3, #0]
   1101e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   11022:	4b2a      	ldr	r3, [pc, #168]	; (110cc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11024:	681b      	ldr	r3, [r3, #0]
   11026:	f042 0201 	orr.w	r2, r2, #1
   1102a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // nessecary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
   1102e:	4b27      	ldr	r3, [pc, #156]	; (110cc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11030:	681b      	ldr	r3, [r3, #0]
   11032:	22aa      	movs	r2, #170	; 0xaa
   11034:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
   11038:	4b24      	ldr	r3, [pc, #144]	; (110cc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   1103a:	681b      	ldr	r3, [r3, #0]
   1103c:	2255      	movs	r2, #85	; 0x55
   1103e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   11042:	4b22      	ldr	r3, [pc, #136]	; (110cc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11044:	681b      	ldr	r3, [r3, #0]
   11046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   1104a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   1104e:	2b00      	cmp	r3, #0
   11050:	d109      	bne.n	11066 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   11052:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   11056:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   1105a:	42a2      	cmp	r2, r4
   1105c:	bf08      	it	eq
   1105e:	4299      	cmpeq	r1, r3
   11060:	d201      	bcs.n	11066 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf6>
   11062:	2301      	movs	r3, #1
   11064:	e000      	b.n	11068 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xf8>
   11066:	2300      	movs	r3, #0
   11068:	2b00      	cmp	r3, #0
   1106a:	d004      	beq.n	11076 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x106>
           (current_time < timeout_time))
    {
      current_time = Milliseconds();
   1106c:	f7ff fafe 	bl	1066c <Milliseconds()>
   11070:	e9cd 0108 	strd	r0, r1, [sp, #32]
    while (!(system_controller->PLL0STAT >> kPlock & 1) &&
   11074:	e7e5      	b.n	11042 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0xd2>
    }
    if (!(system_controller->PLL0STAT >> kPlock & 1) &&
   11076:	4b15      	ldr	r3, [pc, #84]	; (110cc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x15c>)
   11078:	681b      	ldr	r3, [r3, #0]
   1107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   1107e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   11082:	2b00      	cmp	r3, #0
   11084:	d109      	bne.n	1109a <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   11086:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   1108a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   1108e:	42a2      	cmp	r2, r4
   11090:	bf08      	it	eq
   11092:	4299      	cmpeq	r1, r3
   11094:	d301      	bcc.n	1109a <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12a>
   11096:	2301      	movs	r3, #1
   11098:	e000      	b.n	1109c <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x12c>
   1109a:	2300      	movs	r3, #0
   1109c:	2b00      	cmp	r3, #0
   1109e:	d00e      	beq.n	110be <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14e>
        (current_time >= timeout_time))
    {
      SJ2_ASSERT_FATAL(false,
   110a0:	f240 1343 	movw	r3, #323	; 0x143
   110a4:	4a0a      	ldr	r2, [pc, #40]	; (110d0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x160>)
   110a6:	490b      	ldr	r1, [pc, #44]	; (110d4 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x164>)
   110a8:	480b      	ldr	r0, [pc, #44]	; (110d8 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x168>)
   110aa:	f003 f98b 	bl	143c4 <printf>
   110ae:	480b      	ldr	r0, [pc, #44]	; (110dc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x16c>)
   110b0:	f001 fef8 	bl	12ea4 <puts>
   110b4:	2100      	movs	r1, #0
   110b6:	2001      	movs	r0, #1
   110b8:	f7ff fcfe 	bl	10ab8 <debug::PrintBacktrace(bool, void*)>
   110bc:	e7fe      	b.n	110bc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)+0x14c>
                       "PLL lock could not be established before timeout");
      actual_speed = kDefaultIRCFrequency;
    }
    return (actual_speed - desired_speed_in_mhz);
   110be:	f8bd 3000 	ldrh.w	r3, [sp]
   110c2:	9a07      	ldr	r2, [sp, #28]
   110c4:	1ad3      	subs	r3, r2, r3
  }
   110c6:	4618      	mov	r0, r3
   110c8:	b00a      	add	sp, #40	; 0x28
   110ca:	bd10      	pop	{r4, pc}
   110cc:	10000004 	.word	0x10000004
   110d0:	00017cbc 	.word	0x00017cbc
   110d4:	00017ae0 	.word	0x00017ae0
   110d8:	00017834 	.word	0x00017834
   110dc:	00017684 	.word	0x00017684

000110e0 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)>:
                       "PLL lock could not be established before timeout");
    }
    return (actual_speed - desired_speed_in_mhz);
  }

  void SetCpuClockDivider(uint8_t cpu_divider)
   110e0:	b500      	push	{lr}
   110e2:	b083      	sub	sp, #12
   110e4:	9001      	str	r0, [sp, #4]
   110e6:	460b      	mov	r3, r1
   110e8:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
   110ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
   110f0:	2b1f      	cmp	r3, #31
   110f2:	d90e      	bls.n	11112 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x32>
   110f4:	f240 136f 	movw	r3, #367	; 0x16f
   110f8:	4a0e      	ldr	r2, [pc, #56]	; (11134 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x54>)
   110fa:	490f      	ldr	r1, [pc, #60]	; (11138 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x58>)
   110fc:	480f      	ldr	r0, [pc, #60]	; (1113c <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x5c>)
   110fe:	f003 f961 	bl	143c4 <printf>
   11102:	480f      	ldr	r0, [pc, #60]	; (11140 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x60>)
   11104:	f001 fece 	bl	12ea4 <puts>
   11108:	2100      	movs	r1, #0
   1110a:	2001      	movs	r0, #1
   1110c:	f7ff fcd4 	bl	10ab8 <debug::PrintBacktrace(bool, void*)>
   11110:	e7fe      	b.n	11110 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x30>
    system_controller->CCLKSEL =
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   11112:	4b0c      	ldr	r3, [pc, #48]	; (11144 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   11114:	681b      	ldr	r3, [r3, #0]
   11116:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1111a:	f023 011f 	bic.w	r1, r3, #31
   1111e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->CCLKSEL =
   11122:	4b08      	ldr	r3, [pc, #32]	; (11144 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)+0x64>)
   11124:	681b      	ldr	r3, [r3, #0]
        (system_controller->CCLKSEL & ~kClearCpuDivider) | cpu_divider;
   11126:	430a      	orrs	r2, r1
    system_controller->CCLKSEL =
   11128:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
   1112c:	bf00      	nop
   1112e:	b003      	add	sp, #12
   11130:	f85d fb04 	ldr.w	pc, [sp], #4
   11134:	00017d74 	.word	0x00017d74
   11138:	00017af8 	.word	0x00017af8
   1113c:	000178dc 	.word	0x000178dc
   11140:	00017684 	.word	0x00017684
   11144:	10000004 	.word	0x10000004

00011148 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)>:

  void SetEmcClockDivider(EmcDivider emc_divider)
   11148:	b082      	sub	sp, #8
   1114a:	9001      	str	r0, [sp, #4]
   1114c:	460b      	mov	r3, r1
   1114e:	f88d 3003 	strb.w	r3, [sp, #3]
  {
    system_controller->EMCCLKSEL =
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   11152:	4b08      	ldr	r3, [pc, #32]	; (11174 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   11154:	681b      	ldr	r3, [r3, #0]
   11156:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1115a:	f023 0101 	bic.w	r1, r3, #1
        static_cast<uint8_t>(emc_divider);
   1115e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    system_controller->EMCCLKSEL =
   11162:	4b04      	ldr	r3, [pc, #16]	; (11174 <Lpc40xxSystemController::SetEmcClockDivider(Lpc40xxSystemController::EmcDivider)+0x2c>)
   11164:	681b      	ldr	r3, [r3, #0]
        (system_controller->EMCCLKSEL & ~kClearEmcDivider) |
   11166:	430a      	orrs	r2, r1
    system_controller->EMCCLKSEL =
   11168:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
   1116c:	bf00      	nop
   1116e:	b002      	add	sp, #8
   11170:	4770      	bx	lr
   11172:	bf00      	nop
   11174:	10000004 	.word	0x10000004

00011178 <SystemTimer::DisableTimer()>:
  /// system_timer_isr defaults to nullptr. The actual SystemTickHandler should
  /// check if the isr is set to nullptr, and if it is, turn off the timer, if
  /// set a proper function then execute it.
  inline static IsrPointer system_timer_isr = nullptr;
  /// WARNING: Doing so will most likely disable FreeRTOS
  static void DisableTimer()
   11178:	b510      	push	{r4, lr}
   1117a:	4674      	mov	r4, lr
   1117c:	4623      	mov	r3, r4
   1117e:	4619      	mov	r1, r3
   11180:	480a      	ldr	r0, [pc, #40]	; (111ac <SystemTimer::DisableTimer()+0x34>)
   11182:	f001 febf 	bl	12f04 <__cyg_profile_func_enter>
  {
    sys_tick->LOAD = 0;
   11186:	4b0a      	ldr	r3, [pc, #40]	; (111b0 <SystemTimer::DisableTimer()+0x38>)
   11188:	681b      	ldr	r3, [r3, #0]
   1118a:	2200      	movs	r2, #0
   1118c:	605a      	str	r2, [r3, #4]
    sys_tick->VAL  = 0;
   1118e:	4b08      	ldr	r3, [pc, #32]	; (111b0 <SystemTimer::DisableTimer()+0x38>)
   11190:	681b      	ldr	r3, [r3, #0]
   11192:	2200      	movs	r2, #0
   11194:	609a      	str	r2, [r3, #8]
    sys_tick->CTRL = 0;
   11196:	4b06      	ldr	r3, [pc, #24]	; (111b0 <SystemTimer::DisableTimer()+0x38>)
   11198:	681b      	ldr	r3, [r3, #0]
   1119a:	2200      	movs	r2, #0
   1119c:	601a      	str	r2, [r3, #0]
   1119e:	4623      	mov	r3, r4
   111a0:	4619      	mov	r1, r3
   111a2:	4802      	ldr	r0, [pc, #8]	; (111ac <SystemTimer::DisableTimer()+0x34>)
   111a4:	f001 fec2 	bl	12f2c <__cyg_profile_func_exit>
  }
   111a8:	bf00      	nop
   111aa:	bd10      	pop	{r4, pc}
   111ac:	00011179 	.word	0x00011179
   111b0:	1000000c 	.word	0x1000000c

000111b4 <SystemTimer::SystemTimerHandler()>:
  static void SystemTimerHandler()
   111b4:	b510      	push	{r4, lr}
   111b6:	4674      	mov	r4, lr
   111b8:	4623      	mov	r3, r4
   111ba:	4619      	mov	r1, r3
   111bc:	4808      	ldr	r0, [pc, #32]	; (111e0 <SystemTimer::SystemTimerHandler()+0x2c>)
   111be:	f001 fea1 	bl	12f04 <__cyg_profile_func_enter>
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    if (system_timer_isr != nullptr)
   111c2:	4b08      	ldr	r3, [pc, #32]	; (111e4 <SystemTimer::SystemTimerHandler()+0x30>)
   111c4:	681b      	ldr	r3, [r3, #0]
   111c6:	2b00      	cmp	r3, #0
   111c8:	d002      	beq.n	111d0 <SystemTimer::SystemTimerHandler()+0x1c>
    {
      system_timer_isr();
   111ca:	4b06      	ldr	r3, [pc, #24]	; (111e4 <SystemTimer::SystemTimerHandler()+0x30>)
   111cc:	681b      	ldr	r3, [r3, #0]
   111ce:	4798      	blx	r3
   111d0:	4623      	mov	r3, r4
   111d2:	4619      	mov	r1, r3
   111d4:	4802      	ldr	r0, [pc, #8]	; (111e0 <SystemTimer::SystemTimerHandler()+0x2c>)
   111d6:	f001 fea9 	bl	12f2c <__cyg_profile_func_exit>
    }
  }
   111da:	bf00      	nop
   111dc:	bd10      	pop	{r4, pc}
   111de:	bf00      	nop
   111e0:	000111b5 	.word	0x000111b5
   111e4:	10000268 	.word	0x10000268

000111e8 <SystemTimer::SetIsrFunction(void (*)())>:
  constexpr SystemTimer() {}
  void SetIsrFunction(IsrPointer isr) override
   111e8:	b510      	push	{r4, lr}
   111ea:	b082      	sub	sp, #8
   111ec:	4674      	mov	r4, lr
   111ee:	9001      	str	r0, [sp, #4]
   111f0:	9100      	str	r1, [sp, #0]
   111f2:	4623      	mov	r3, r4
   111f4:	4619      	mov	r1, r3
   111f6:	4807      	ldr	r0, [pc, #28]	; (11214 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   111f8:	f001 fe84 	bl	12f04 <__cyg_profile_func_enter>
  {
    system_timer_isr = isr;
   111fc:	4a06      	ldr	r2, [pc, #24]	; (11218 <SystemTimer::SetIsrFunction(void (*)())+0x30>)
   111fe:	9b00      	ldr	r3, [sp, #0]
   11200:	6013      	str	r3, [r2, #0]
   11202:	4623      	mov	r3, r4
   11204:	4619      	mov	r1, r3
   11206:	4803      	ldr	r0, [pc, #12]	; (11214 <SystemTimer::SetIsrFunction(void (*)())+0x2c>)
   11208:	f001 fe90 	bl	12f2c <__cyg_profile_func_exit>
  }
   1120c:	bf00      	nop
   1120e:	b002      	add	sp, #8
   11210:	bd10      	pop	{r4, pc}
   11212:	bf00      	nop
   11214:	000111e9 	.word	0x000111e9
   11218:	10000268 	.word	0x10000268

0001121c <SystemTimer::StartTimer()>:
  bool StartTimer() override
   1121c:	b530      	push	{r4, r5, lr}
   1121e:	b085      	sub	sp, #20
   11220:	4675      	mov	r5, lr
   11222:	9001      	str	r0, [sp, #4]
   11224:	462b      	mov	r3, r5
   11226:	4619      	mov	r1, r3
   11228:	4820      	ldr	r0, [pc, #128]	; (112ac <SystemTimer::StartTimer()+0x90>)
   1122a:	f001 fe6b 	bl	12f04 <__cyg_profile_func_enter>
  {
    bool successful = false;
   1122e:	2300      	movs	r3, #0
   11230:	f88d 300f 	strb.w	r3, [sp, #15]
    if (sys_tick->LOAD != 0)
   11234:	4b1e      	ldr	r3, [pc, #120]	; (112b0 <SystemTimer::StartTimer()+0x94>)
   11236:	681b      	ldr	r3, [r3, #0]
   11238:	685b      	ldr	r3, [r3, #4]
   1123a:	2b00      	cmp	r3, #0
   1123c:	bf14      	ite	ne
   1123e:	2301      	movne	r3, #1
   11240:	2300      	moveq	r3, #0
   11242:	b2db      	uxtb	r3, r3
   11244:	2b00      	cmp	r3, #0
   11246:	d01e      	beq.n	11286 <SystemTimer::StartTimer()+0x6a>
    {
      sys_tick->VAL = 0;
   11248:	4b19      	ldr	r3, [pc, #100]	; (112b0 <SystemTimer::StartTimer()+0x94>)
   1124a:	681b      	ldr	r3, [r3, #0]
   1124c:	2200      	movs	r2, #0
   1124e:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
   11250:	4b17      	ldr	r3, [pc, #92]	; (112b0 <SystemTimer::StartTimer()+0x94>)
   11252:	681b      	ldr	r3, [r3, #0]
   11254:	681a      	ldr	r2, [r3, #0]
   11256:	4b16      	ldr	r3, [pc, #88]	; (112b0 <SystemTimer::StartTimer()+0x94>)
   11258:	681b      	ldr	r3, [r3, #0]
   1125a:	f042 0202 	orr.w	r2, r2, #2
   1125e:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
   11260:	4b13      	ldr	r3, [pc, #76]	; (112b0 <SystemTimer::StartTimer()+0x94>)
   11262:	681b      	ldr	r3, [r3, #0]
   11264:	681a      	ldr	r2, [r3, #0]
   11266:	4b12      	ldr	r3, [pc, #72]	; (112b0 <SystemTimer::StartTimer()+0x94>)
   11268:	681b      	ldr	r3, [r3, #0]
   1126a:	f042 0201 	orr.w	r2, r2, #1
   1126e:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
   11270:	4b0f      	ldr	r3, [pc, #60]	; (112b0 <SystemTimer::StartTimer()+0x94>)
   11272:	681b      	ldr	r3, [r3, #0]
   11274:	681a      	ldr	r2, [r3, #0]
   11276:	4b0e      	ldr	r3, [pc, #56]	; (112b0 <SystemTimer::StartTimer()+0x94>)
   11278:	681b      	ldr	r3, [r3, #0]
   1127a:	f042 0204 	orr.w	r2, r2, #4
   1127e:	601a      	str	r2, [r3, #0]
      successful = true;
   11280:	2301      	movs	r3, #1
   11282:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    RegisterIsr(SysTick_IRQn, SystemTimerHandler);
   11286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1128a:	2201      	movs	r2, #1
   1128c:	4909      	ldr	r1, [pc, #36]	; (112b4 <SystemTimer::StartTimer()+0x98>)
   1128e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11292:	f001 fd0f 	bl	12cb4 <RegisterIsr(IRQn, void (*)(), bool, long)>
    return successful;
   11296:	f89d 400f 	ldrb.w	r4, [sp, #15]
   1129a:	462b      	mov	r3, r5
   1129c:	4619      	mov	r1, r3
   1129e:	4803      	ldr	r0, [pc, #12]	; (112ac <SystemTimer::StartTimer()+0x90>)
   112a0:	f001 fe44 	bl	12f2c <__cyg_profile_func_exit>
   112a4:	4623      	mov	r3, r4
  }
   112a6:	4618      	mov	r0, r3
   112a8:	b005      	add	sp, #20
   112aa:	bd30      	pop	{r4, r5, pc}
   112ac:	0001121d 	.word	0x0001121d
   112b0:	1000000c 	.word	0x1000000c
   112b4:	000111b5 	.word	0x000111b5

000112b8 <SystemTimer::SetTickFrequency(unsigned long)>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 2Hz, the function will
  ///          return without changing any hardware.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  uint32_t SetTickFrequency(uint32_t frequency) override
   112b8:	b530      	push	{r4, r5, lr}
   112ba:	b085      	sub	sp, #20
   112bc:	4675      	mov	r5, lr
   112be:	9001      	str	r0, [sp, #4]
   112c0:	9100      	str	r1, [sp, #0]
   112c2:	462b      	mov	r3, r5
   112c4:	4619      	mov	r1, r3
   112c6:	481f      	ldr	r0, [pc, #124]	; (11344 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   112c8:	f001 fe1c 	bl	12f04 <__cyg_profile_func_enter>
  {
    if (frequency <= 1)
   112cc:	9b00      	ldr	r3, [sp, #0]
   112ce:	2b01      	cmp	r3, #1
   112d0:	d801      	bhi.n	112d6 <SystemTimer::SetTickFrequency(unsigned long)+0x1e>
    {
      return 0;
   112d2:	2400      	movs	r4, #0
   112d4:	e02d      	b.n	11332 <SystemTimer::SetTickFrequency(unsigned long)+0x7a>
    }
    uint32_t reload_value = (GetSystemFrequency() / frequency) - 1;
   112d6:	9b01      	ldr	r3, [sp, #4]
   112d8:	1d1a      	adds	r2, r3, #4
   112da:	9b01      	ldr	r3, [sp, #4]
   112dc:	685b      	ldr	r3, [r3, #4]
   112de:	330c      	adds	r3, #12
   112e0:	681b      	ldr	r3, [r3, #0]
   112e2:	4610      	mov	r0, r2
   112e4:	4798      	blx	r3
   112e6:	4602      	mov	r2, r0
   112e8:	9b00      	ldr	r3, [sp, #0]
   112ea:	fbb2 f3f3 	udiv	r3, r2, r3
   112ee:	3b01      	subs	r3, #1
   112f0:	9303      	str	r3, [sp, #12]
    int remainder         = (GetSystemFrequency() % frequency);
   112f2:	9b01      	ldr	r3, [sp, #4]
   112f4:	1d1a      	adds	r2, r3, #4
   112f6:	9b01      	ldr	r3, [sp, #4]
   112f8:	685b      	ldr	r3, [r3, #4]
   112fa:	330c      	adds	r3, #12
   112fc:	681b      	ldr	r3, [r3, #0]
   112fe:	4610      	mov	r0, r2
   11300:	4798      	blx	r3
   11302:	4603      	mov	r3, r0
   11304:	9a00      	ldr	r2, [sp, #0]
   11306:	fbb3 f2f2 	udiv	r2, r3, r2
   1130a:	9900      	ldr	r1, [sp, #0]
   1130c:	fb01 f202 	mul.w	r2, r1, r2
   11310:	1a9b      	subs	r3, r3, r2
   11312:	9302      	str	r3, [sp, #8]
    if (reload_value > SysTick_LOAD_RELOAD_Msk)
   11314:	9b03      	ldr	r3, [sp, #12]
   11316:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1131a:	d305      	bcc.n	11328 <SystemTimer::SetTickFrequency(unsigned long)+0x70>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
   1131c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   11320:	9303      	str	r3, [sp, #12]
      remainder    = SysTick_LOAD_RELOAD_Msk;
   11322:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   11326:	9302      	str	r3, [sp, #8]
    }
    sys_tick->LOAD = reload_value;
   11328:	4b07      	ldr	r3, [pc, #28]	; (11348 <SystemTimer::SetTickFrequency(unsigned long)+0x90>)
   1132a:	681b      	ldr	r3, [r3, #0]
   1132c:	9a03      	ldr	r2, [sp, #12]
   1132e:	605a      	str	r2, [r3, #4]
    return remainder;
   11330:	9c02      	ldr	r4, [sp, #8]
   11332:	462b      	mov	r3, r5
   11334:	4619      	mov	r1, r3
   11336:	4803      	ldr	r0, [pc, #12]	; (11344 <SystemTimer::SetTickFrequency(unsigned long)+0x8c>)
   11338:	f001 fdf8 	bl	12f2c <__cyg_profile_func_exit>
   1133c:	4623      	mov	r3, r4
  }
   1133e:	4618      	mov	r0, r3
   11340:	b005      	add	sp, #20
   11342:	bd30      	pop	{r4, r5, pc}
   11344:	000112b9 	.word	0x000112b9
   11348:	1000000c 	.word	0x1000000c

0001134c <Pin::SetPinFunction(unsigned char)>:
  }
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
      : port_(port_number), pin_(pin_number)
  {
  }
  void SetPinFunction(uint8_t function) override
   1134c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1134e:	b085      	sub	sp, #20
   11350:	4677      	mov	r7, lr
   11352:	9003      	str	r0, [sp, #12]
   11354:	460b      	mov	r3, r1
   11356:	f88d 300b 	strb.w	r3, [sp, #11]
   1135a:	463b      	mov	r3, r7
   1135c:	4619      	mov	r1, r3
   1135e:	4817      	ldr	r0, [pc, #92]	; (113bc <Pin::SetPinFunction(unsigned char)+0x70>)
   11360:	f001 fdd0 	bl	12f04 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   11364:	4b16      	ldr	r3, [pc, #88]	; (113c0 <Pin::SetPinFunction(unsigned char)+0x74>)
   11366:	681b      	ldr	r3, [r3, #0]
   11368:	9a03      	ldr	r2, [sp, #12]
   1136a:	7912      	ldrb	r2, [r2, #4]
   1136c:	4610      	mov	r0, r2
   1136e:	9a03      	ldr	r2, [sp, #12]
   11370:	7952      	ldrb	r2, [r2, #5]
   11372:	4611      	mov	r1, r2
   11374:	0142      	lsls	r2, r0, #5
   11376:	440a      	add	r2, r1
   11378:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 function & 0b111, 3);
   1137c:	f89d 300b 	ldrb.w	r3, [sp, #11]
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   11380:	f003 0207 	and.w	r2, r3, #7
    pin_map->_register[port_][pin_] =
   11384:	4b0e      	ldr	r3, [pc, #56]	; (113c0 <Pin::SetPinFunction(unsigned char)+0x74>)
   11386:	681c      	ldr	r4, [r3, #0]
   11388:	9b03      	ldr	r3, [sp, #12]
   1138a:	791b      	ldrb	r3, [r3, #4]
   1138c:	461e      	mov	r6, r3
   1138e:	9b03      	ldr	r3, [sp, #12]
   11390:	795b      	ldrb	r3, [r3, #5]
   11392:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kFunction,
   11394:	2303      	movs	r3, #3
   11396:	9300      	str	r3, [sp, #0]
   11398:	4613      	mov	r3, r2
   1139a:	2200      	movs	r2, #0
   1139c:	9803      	ldr	r0, [sp, #12]
   1139e:	f000 fa67 	bl	11870 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   113a2:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   113a4:	0173      	lsls	r3, r6, #5
   113a6:	442b      	add	r3, r5
   113a8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   113ac:	463b      	mov	r3, r7
   113ae:	4619      	mov	r1, r3
   113b0:	4802      	ldr	r0, [pc, #8]	; (113bc <Pin::SetPinFunction(unsigned char)+0x70>)
   113b2:	f001 fdbb 	bl	12f2c <__cyg_profile_func_exit>
  }
   113b6:	bf00      	nop
   113b8:	b005      	add	sp, #20
   113ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   113bc:	0001134d 	.word	0x0001134d
   113c0:	10000010 	.word	0x10000010

000113c4 <Pin::SetMode(PinInterface::Mode)>:
  void SetMode(PinInterface::Mode mode) override
   113c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   113c6:	b087      	sub	sp, #28
   113c8:	4677      	mov	r7, lr
   113ca:	9003      	str	r0, [sp, #12]
   113cc:	460b      	mov	r3, r1
   113ce:	f88d 300b 	strb.w	r3, [sp, #11]
   113d2:	463b      	mov	r3, r7
   113d4:	4619      	mov	r1, r3
   113d6:	4819      	ldr	r0, [pc, #100]	; (1143c <Pin::SetMode(PinInterface::Mode)+0x78>)
   113d8:	f001 fd94 	bl	12f04 <__cyg_profile_func_enter>
  {
    uint8_t ui_mode                 = static_cast<uint8_t>(mode);
   113dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   113e0:	f88d 3017 	strb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   113e4:	4b16      	ldr	r3, [pc, #88]	; (11440 <Pin::SetMode(PinInterface::Mode)+0x7c>)
   113e6:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   113e8:	9a03      	ldr	r2, [sp, #12]
   113ea:	7912      	ldrb	r2, [r2, #4]
   113ec:	4610      	mov	r0, r2
   113ee:	9a03      	ldr	r2, [sp, #12]
   113f0:	7952      	ldrb	r2, [r2, #5]
   113f2:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   113f4:	0142      	lsls	r2, r0, #5
   113f6:	440a      	add	r2, r1
   113f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pin_map->_register[port_][pin_], PinBitMap::kMode, ui_mode & 0b11, 2);
   113fc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    pin_map->_register[port_][pin_] = BitPlace(
   11400:	f003 0203 	and.w	r2, r3, #3
   11404:	4b0e      	ldr	r3, [pc, #56]	; (11440 <Pin::SetMode(PinInterface::Mode)+0x7c>)
   11406:	681c      	ldr	r4, [r3, #0]
   11408:	9b03      	ldr	r3, [sp, #12]
   1140a:	791b      	ldrb	r3, [r3, #4]
   1140c:	461e      	mov	r6, r3
   1140e:	9b03      	ldr	r3, [sp, #12]
   11410:	795b      	ldrb	r3, [r3, #5]
   11412:	461d      	mov	r5, r3
   11414:	2302      	movs	r3, #2
   11416:	9300      	str	r3, [sp, #0]
   11418:	4613      	mov	r3, r2
   1141a:	2203      	movs	r2, #3
   1141c:	9803      	ldr	r0, [sp, #12]
   1141e:	f000 fa27 	bl	11870 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11422:	4602      	mov	r2, r0
   11424:	0173      	lsls	r3, r6, #5
   11426:	442b      	add	r3, r5
   11428:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1142c:	463b      	mov	r3, r7
   1142e:	4619      	mov	r1, r3
   11430:	4802      	ldr	r0, [pc, #8]	; (1143c <Pin::SetMode(PinInterface::Mode)+0x78>)
   11432:	f001 fd7b 	bl	12f2c <__cyg_profile_func_exit>
  }
   11436:	bf00      	nop
   11438:	b007      	add	sp, #28
   1143a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1143c:	000113c5 	.word	0x000113c5
   11440:	10000010 	.word	0x10000010

00011444 <Pin::EnableHysteresis(bool)>:
  void EnableHysteresis(bool enable_hysteresis = true) override
   11444:	b5f0      	push	{r4, r5, r6, r7, lr}
   11446:	b085      	sub	sp, #20
   11448:	4677      	mov	r7, lr
   1144a:	9003      	str	r0, [sp, #12]
   1144c:	460b      	mov	r3, r1
   1144e:	f88d 300b 	strb.w	r3, [sp, #11]
   11452:	463b      	mov	r3, r7
   11454:	4619      	mov	r1, r3
   11456:	4816      	ldr	r0, [pc, #88]	; (114b0 <Pin::EnableHysteresis(bool)+0x6c>)
   11458:	f001 fd54 	bl	12f04 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   1145c:	4b15      	ldr	r3, [pc, #84]	; (114b4 <Pin::EnableHysteresis(bool)+0x70>)
   1145e:	681b      	ldr	r3, [r3, #0]
   11460:	9a03      	ldr	r2, [sp, #12]
   11462:	7912      	ldrb	r2, [r2, #4]
   11464:	4610      	mov	r0, r2
   11466:	9a03      	ldr	r2, [sp, #12]
   11468:	7952      	ldrb	r2, [r2, #5]
   1146a:	4611      	mov	r1, r2
   1146c:	0142      	lsls	r2, r0, #5
   1146e:	440a      	add	r2, r1
   11470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11474:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11478:	4b0e      	ldr	r3, [pc, #56]	; (114b4 <Pin::EnableHysteresis(bool)+0x70>)
   1147a:	681c      	ldr	r4, [r3, #0]
   1147c:	9b03      	ldr	r3, [sp, #12]
   1147e:	791b      	ldrb	r3, [r3, #4]
   11480:	461e      	mov	r6, r3
   11482:	9b03      	ldr	r3, [sp, #12]
   11484:	795b      	ldrb	r3, [r3, #5]
   11486:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kHysteresis,
   11488:	2301      	movs	r3, #1
   1148a:	9300      	str	r3, [sp, #0]
   1148c:	4613      	mov	r3, r2
   1148e:	2205      	movs	r2, #5
   11490:	9803      	ldr	r0, [sp, #12]
   11492:	f000 f9ed 	bl	11870 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11496:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11498:	0173      	lsls	r3, r6, #5
   1149a:	442b      	add	r3, r5
   1149c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   114a0:	463b      	mov	r3, r7
   114a2:	4619      	mov	r1, r3
   114a4:	4802      	ldr	r0, [pc, #8]	; (114b0 <Pin::EnableHysteresis(bool)+0x6c>)
   114a6:	f001 fd41 	bl	12f2c <__cyg_profile_func_exit>
                 enable_hysteresis, 1);
  }
   114aa:	bf00      	nop
   114ac:	b005      	add	sp, #20
   114ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114b0:	00011445 	.word	0x00011445
   114b4:	10000010 	.word	0x10000010

000114b8 <Pin::SetAsActiveLow(bool)>:
  void SetAsActiveLow(bool set_as_active_low = true) override
   114b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   114ba:	b085      	sub	sp, #20
   114bc:	4677      	mov	r7, lr
   114be:	9003      	str	r0, [sp, #12]
   114c0:	460b      	mov	r3, r1
   114c2:	f88d 300b 	strb.w	r3, [sp, #11]
   114c6:	463b      	mov	r3, r7
   114c8:	4619      	mov	r1, r3
   114ca:	4816      	ldr	r0, [pc, #88]	; (11524 <Pin::SetAsActiveLow(bool)+0x6c>)
   114cc:	f001 fd1a 	bl	12f04 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   114d0:	4b15      	ldr	r3, [pc, #84]	; (11528 <Pin::SetAsActiveLow(bool)+0x70>)
   114d2:	681b      	ldr	r3, [r3, #0]
   114d4:	9a03      	ldr	r2, [sp, #12]
   114d6:	7912      	ldrb	r2, [r2, #4]
   114d8:	4610      	mov	r0, r2
   114da:	9a03      	ldr	r2, [sp, #12]
   114dc:	7952      	ldrb	r2, [r2, #5]
   114de:	4611      	mov	r1, r2
   114e0:	0142      	lsls	r2, r0, #5
   114e2:	440a      	add	r2, r1
   114e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   114e8:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   114ec:	4b0e      	ldr	r3, [pc, #56]	; (11528 <Pin::SetAsActiveLow(bool)+0x70>)
   114ee:	681c      	ldr	r4, [r3, #0]
   114f0:	9b03      	ldr	r3, [sp, #12]
   114f2:	791b      	ldrb	r3, [r3, #4]
   114f4:	461e      	mov	r6, r3
   114f6:	9b03      	ldr	r3, [sp, #12]
   114f8:	795b      	ldrb	r3, [r3, #5]
   114fa:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kInputInvert,
   114fc:	2301      	movs	r3, #1
   114fe:	9300      	str	r3, [sp, #0]
   11500:	4613      	mov	r3, r2
   11502:	2206      	movs	r2, #6
   11504:	9803      	ldr	r0, [sp, #12]
   11506:	f000 f9b3 	bl	11870 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1150a:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   1150c:	0173      	lsls	r3, r6, #5
   1150e:	442b      	add	r3, r5
   11510:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11514:	463b      	mov	r3, r7
   11516:	4619      	mov	r1, r3
   11518:	4802      	ldr	r0, [pc, #8]	; (11524 <Pin::SetAsActiveLow(bool)+0x6c>)
   1151a:	f001 fd07 	bl	12f2c <__cyg_profile_func_exit>
                 set_as_active_low, 1);
  }
   1151e:	bf00      	nop
   11520:	b005      	add	sp, #20
   11522:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11524:	000114b9 	.word	0x000114b9
   11528:	10000010 	.word	0x10000010

0001152c <Pin::SetAsAnalogMode(bool)>:
  // Set bit to 0 to enable analog mode
  void SetAsAnalogMode(bool set_as_analog = true) override
   1152c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1152e:	b085      	sub	sp, #20
   11530:	4677      	mov	r7, lr
   11532:	9003      	str	r0, [sp, #12]
   11534:	460b      	mov	r3, r1
   11536:	f88d 300b 	strb.w	r3, [sp, #11]
   1153a:	463b      	mov	r3, r7
   1153c:	4619      	mov	r1, r3
   1153e:	4818      	ldr	r0, [pc, #96]	; (115a0 <Pin::SetAsAnalogMode(bool)+0x74>)
   11540:	f001 fce0 	bl	12f04 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   11544:	4b17      	ldr	r3, [pc, #92]	; (115a4 <Pin::SetAsAnalogMode(bool)+0x78>)
   11546:	681b      	ldr	r3, [r3, #0]
   11548:	9a03      	ldr	r2, [sp, #12]
   1154a:	7912      	ldrb	r2, [r2, #4]
   1154c:	4610      	mov	r0, r2
   1154e:	9a03      	ldr	r2, [sp, #12]
   11550:	7952      	ldrb	r2, [r2, #5]
   11552:	4611      	mov	r1, r2
   11554:	0142      	lsls	r2, r0, #5
   11556:	440a      	add	r2, r1
   11558:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !set_as_analog, 1);
   1155c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11560:	f083 0301 	eor.w	r3, r3, #1
   11564:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   11566:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   11568:	4b0e      	ldr	r3, [pc, #56]	; (115a4 <Pin::SetAsAnalogMode(bool)+0x78>)
   1156a:	681c      	ldr	r4, [r3, #0]
   1156c:	9b03      	ldr	r3, [sp, #12]
   1156e:	791b      	ldrb	r3, [r3, #4]
   11570:	461e      	mov	r6, r3
   11572:	9b03      	ldr	r3, [sp, #12]
   11574:	795b      	ldrb	r3, [r3, #5]
   11576:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kAnalogDigitalMode,
   11578:	2301      	movs	r3, #1
   1157a:	9300      	str	r3, [sp, #0]
   1157c:	4613      	mov	r3, r2
   1157e:	2207      	movs	r2, #7
   11580:	9803      	ldr	r0, [sp, #12]
   11582:	f000 f975 	bl	11870 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11586:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11588:	0173      	lsls	r3, r6, #5
   1158a:	442b      	add	r3, r5
   1158c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11590:	463b      	mov	r3, r7
   11592:	4619      	mov	r1, r3
   11594:	4802      	ldr	r0, [pc, #8]	; (115a0 <Pin::SetAsAnalogMode(bool)+0x74>)
   11596:	f001 fcc9 	bl	12f2c <__cyg_profile_func_exit>
  }
   1159a:	bf00      	nop
   1159c:	b005      	add	sp, #20
   1159e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115a0:	0001152d 	.word	0x0001152d
   115a4:	10000010 	.word	0x10000010

000115a8 <Pin::EnableDigitalFilter(bool)>:
  // Enable by setting bit to 0 to enable digital filter.
  void EnableDigitalFilter(bool enable_digital_filter = true) override
   115a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   115aa:	b085      	sub	sp, #20
   115ac:	4677      	mov	r7, lr
   115ae:	9003      	str	r0, [sp, #12]
   115b0:	460b      	mov	r3, r1
   115b2:	f88d 300b 	strb.w	r3, [sp, #11]
   115b6:	463b      	mov	r3, r7
   115b8:	4619      	mov	r1, r3
   115ba:	4818      	ldr	r0, [pc, #96]	; (1161c <Pin::EnableDigitalFilter(bool)+0x74>)
   115bc:	f001 fca2 	bl	12f04 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   115c0:	4b17      	ldr	r3, [pc, #92]	; (11620 <Pin::EnableDigitalFilter(bool)+0x78>)
   115c2:	681b      	ldr	r3, [r3, #0]
   115c4:	9a03      	ldr	r2, [sp, #12]
   115c6:	7912      	ldrb	r2, [r2, #4]
   115c8:	4610      	mov	r0, r2
   115ca:	9a03      	ldr	r2, [sp, #12]
   115cc:	7952      	ldrb	r2, [r2, #5]
   115ce:	4611      	mov	r1, r2
   115d0:	0142      	lsls	r2, r0, #5
   115d2:	440a      	add	r2, r1
   115d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_digital_filter, 1);
   115d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   115dc:	f083 0301 	eor.w	r3, r3, #1
   115e0:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   115e2:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   115e4:	4b0e      	ldr	r3, [pc, #56]	; (11620 <Pin::EnableDigitalFilter(bool)+0x78>)
   115e6:	681c      	ldr	r4, [r3, #0]
   115e8:	9b03      	ldr	r3, [sp, #12]
   115ea:	791b      	ldrb	r3, [r3, #4]
   115ec:	461e      	mov	r6, r3
   115ee:	9b03      	ldr	r3, [sp, #12]
   115f0:	795b      	ldrb	r3, [r3, #5]
   115f2:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kDigitalFilter,
   115f4:	2301      	movs	r3, #1
   115f6:	9300      	str	r3, [sp, #0]
   115f8:	4613      	mov	r3, r2
   115fa:	2208      	movs	r2, #8
   115fc:	9803      	ldr	r0, [sp, #12]
   115fe:	f000 f937 	bl	11870 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11602:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11604:	0173      	lsls	r3, r6, #5
   11606:	442b      	add	r3, r5
   11608:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   1160c:	463b      	mov	r3, r7
   1160e:	4619      	mov	r1, r3
   11610:	4802      	ldr	r0, [pc, #8]	; (1161c <Pin::EnableDigitalFilter(bool)+0x74>)
   11612:	f001 fc8b 	bl	12f2c <__cyg_profile_func_exit>
  }
   11616:	bf00      	nop
   11618:	b005      	add	sp, #20
   1161a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1161c:	000115a9 	.word	0x000115a9
   11620:	10000010 	.word	0x10000010

00011624 <Pin::EnableFastMode(bool)>:
  void EnableFastMode(bool enable_fast_mode = true) override
   11624:	b5f0      	push	{r4, r5, r6, r7, lr}
   11626:	b085      	sub	sp, #20
   11628:	4677      	mov	r7, lr
   1162a:	9003      	str	r0, [sp, #12]
   1162c:	460b      	mov	r3, r1
   1162e:	f88d 300b 	strb.w	r3, [sp, #11]
   11632:	463b      	mov	r3, r7
   11634:	4619      	mov	r1, r3
   11636:	4816      	ldr	r0, [pc, #88]	; (11690 <Pin::EnableFastMode(bool)+0x6c>)
   11638:	f001 fc64 	bl	12f04 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   1163c:	4b15      	ldr	r3, [pc, #84]	; (11694 <Pin::EnableFastMode(bool)+0x70>)
   1163e:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kSlew, enable_fast_mode, 1);
   11640:	9a03      	ldr	r2, [sp, #12]
   11642:	7912      	ldrb	r2, [r2, #4]
   11644:	4610      	mov	r0, r2
   11646:	9a03      	ldr	r2, [sp, #12]
   11648:	7952      	ldrb	r2, [r2, #5]
   1164a:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   1164c:	0142      	lsls	r2, r0, #5
   1164e:	440a      	add	r2, r1
   11650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11654:	f89d 200b 	ldrb.w	r2, [sp, #11]
   11658:	4b0e      	ldr	r3, [pc, #56]	; (11694 <Pin::EnableFastMode(bool)+0x70>)
   1165a:	681c      	ldr	r4, [r3, #0]
   1165c:	9b03      	ldr	r3, [sp, #12]
   1165e:	791b      	ldrb	r3, [r3, #4]
   11660:	461e      	mov	r6, r3
   11662:	9b03      	ldr	r3, [sp, #12]
   11664:	795b      	ldrb	r3, [r3, #5]
   11666:	461d      	mov	r5, r3
   11668:	2301      	movs	r3, #1
   1166a:	9300      	str	r3, [sp, #0]
   1166c:	4613      	mov	r3, r2
   1166e:	2209      	movs	r2, #9
   11670:	9803      	ldr	r0, [sp, #12]
   11672:	f000 f8fd 	bl	11870 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11676:	4602      	mov	r2, r0
   11678:	0173      	lsls	r3, r6, #5
   1167a:	442b      	add	r3, r5
   1167c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11680:	463b      	mov	r3, r7
   11682:	4619      	mov	r1, r3
   11684:	4802      	ldr	r0, [pc, #8]	; (11690 <Pin::EnableFastMode(bool)+0x6c>)
   11686:	f001 fc51 	bl	12f2c <__cyg_profile_func_exit>
  }
   1168a:	bf00      	nop
   1168c:	b005      	add	sp, #20
   1168e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11690:	00011625 	.word	0x00011625
   11694:	10000010 	.word	0x10000010

00011698 <Pin::EnableI2cHighSpeedMode(bool)>:
  // Enable by setting bit to 0 for i2c high speed mode
  void EnableI2cHighSpeedMode(bool enable_high_speed = true) override
   11698:	b5f0      	push	{r4, r5, r6, r7, lr}
   1169a:	b085      	sub	sp, #20
   1169c:	4677      	mov	r7, lr
   1169e:	9003      	str	r0, [sp, #12]
   116a0:	460b      	mov	r3, r1
   116a2:	f88d 300b 	strb.w	r3, [sp, #11]
   116a6:	463b      	mov	r3, r7
   116a8:	4619      	mov	r1, r3
   116aa:	4818      	ldr	r0, [pc, #96]	; (1170c <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   116ac:	f001 fc2a 	bl	12f04 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   116b0:	4b17      	ldr	r3, [pc, #92]	; (11710 <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   116b2:	681b      	ldr	r3, [r3, #0]
   116b4:	9a03      	ldr	r2, [sp, #12]
   116b6:	7912      	ldrb	r2, [r2, #4]
   116b8:	4610      	mov	r0, r2
   116ba:	9a03      	ldr	r2, [sp, #12]
   116bc:	7952      	ldrb	r2, [r2, #5]
   116be:	4611      	mov	r1, r2
   116c0:	0142      	lsls	r2, r0, #5
   116c2:	440a      	add	r2, r1
   116c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                 !enable_high_speed, 1);
   116c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   116cc:	f083 0301 	eor.w	r3, r3, #1
   116d0:	b2db      	uxtb	r3, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   116d2:	461a      	mov	r2, r3
    pin_map->_register[port_][pin_] =
   116d4:	4b0e      	ldr	r3, [pc, #56]	; (11710 <Pin::EnableI2cHighSpeedMode(bool)+0x78>)
   116d6:	681c      	ldr	r4, [r3, #0]
   116d8:	9b03      	ldr	r3, [sp, #12]
   116da:	791b      	ldrb	r3, [r3, #4]
   116dc:	461e      	mov	r6, r3
   116de:	9b03      	ldr	r3, [sp, #12]
   116e0:	795b      	ldrb	r3, [r3, #5]
   116e2:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kI2cHighSpeed,
   116e4:	2301      	movs	r3, #1
   116e6:	9300      	str	r3, [sp, #0]
   116e8:	4613      	mov	r3, r2
   116ea:	2208      	movs	r2, #8
   116ec:	9803      	ldr	r0, [sp, #12]
   116ee:	f000 f8bf 	bl	11870 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   116f2:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   116f4:	0173      	lsls	r3, r6, #5
   116f6:	442b      	add	r3, r5
   116f8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   116fc:	463b      	mov	r3, r7
   116fe:	4619      	mov	r1, r3
   11700:	4802      	ldr	r0, [pc, #8]	; (1170c <Pin::EnableI2cHighSpeedMode(bool)+0x74>)
   11702:	f001 fc13 	bl	12f2c <__cyg_profile_func_exit>
  }
   11706:	bf00      	nop
   11708:	b005      	add	sp, #20
   1170a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1170c:	00011699 	.word	0x00011699
   11710:	10000010 	.word	0x10000010

00011714 <Pin::EnableI2cHighCurrentDrive(bool)>:
  void EnableI2cHighCurrentDrive(bool enable_high_current = true) override
   11714:	b5f0      	push	{r4, r5, r6, r7, lr}
   11716:	b085      	sub	sp, #20
   11718:	4677      	mov	r7, lr
   1171a:	9003      	str	r0, [sp, #12]
   1171c:	460b      	mov	r3, r1
   1171e:	f88d 300b 	strb.w	r3, [sp, #11]
   11722:	463b      	mov	r3, r7
   11724:	4619      	mov	r1, r3
   11726:	4816      	ldr	r0, [pc, #88]	; (11780 <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   11728:	f001 fbec 	bl	12f04 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_],
   1172c:	4b15      	ldr	r3, [pc, #84]	; (11784 <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   1172e:	681b      	ldr	r3, [r3, #0]
   11730:	9a03      	ldr	r2, [sp, #12]
   11732:	7912      	ldrb	r2, [r2, #4]
   11734:	4610      	mov	r0, r2
   11736:	9a03      	ldr	r2, [sp, #12]
   11738:	7952      	ldrb	r2, [r2, #5]
   1173a:	4611      	mov	r1, r2
   1173c:	0142      	lsls	r2, r0, #5
   1173e:	440a      	add	r2, r1
   11740:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11744:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   11748:	4b0e      	ldr	r3, [pc, #56]	; (11784 <Pin::EnableI2cHighCurrentDrive(bool)+0x70>)
   1174a:	681c      	ldr	r4, [r3, #0]
   1174c:	9b03      	ldr	r3, [sp, #12]
   1174e:	791b      	ldrb	r3, [r3, #4]
   11750:	461e      	mov	r6, r3
   11752:	9b03      	ldr	r3, [sp, #12]
   11754:	795b      	ldrb	r3, [r3, #5]
   11756:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_],
   11758:	2301      	movs	r3, #1
   1175a:	9300      	str	r3, [sp, #0]
   1175c:	4613      	mov	r3, r2
   1175e:	2209      	movs	r2, #9
   11760:	9803      	ldr	r0, [sp, #12]
   11762:	f000 f885 	bl	11870 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   11766:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   11768:	0173      	lsls	r3, r6, #5
   1176a:	442b      	add	r3, r5
   1176c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11770:	463b      	mov	r3, r7
   11772:	4619      	mov	r1, r3
   11774:	4802      	ldr	r0, [pc, #8]	; (11780 <Pin::EnableI2cHighCurrentDrive(bool)+0x6c>)
   11776:	f001 fbd9 	bl	12f2c <__cyg_profile_func_exit>
                 PinBitMap::kI2cHighCurrentDrive, enable_high_current, 1);
  }
   1177a:	bf00      	nop
   1177c:	b005      	add	sp, #20
   1177e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11780:	00011715 	.word	0x00011715
   11784:	10000010 	.word	0x10000010

00011788 <Pin::SetAsOpenDrain(bool)>:
  void SetAsOpenDrain(bool set_as_open_drain = true) override
   11788:	b5f0      	push	{r4, r5, r6, r7, lr}
   1178a:	b085      	sub	sp, #20
   1178c:	4677      	mov	r7, lr
   1178e:	9003      	str	r0, [sp, #12]
   11790:	460b      	mov	r3, r1
   11792:	f88d 300b 	strb.w	r3, [sp, #11]
   11796:	463b      	mov	r3, r7
   11798:	4619      	mov	r1, r3
   1179a:	4816      	ldr	r0, [pc, #88]	; (117f4 <Pin::SetAsOpenDrain(bool)+0x6c>)
   1179c:	f001 fbb2 	bl	12f04 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] =
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   117a0:	4b15      	ldr	r3, [pc, #84]	; (117f8 <Pin::SetAsOpenDrain(bool)+0x70>)
   117a2:	681b      	ldr	r3, [r3, #0]
   117a4:	9a03      	ldr	r2, [sp, #12]
   117a6:	7912      	ldrb	r2, [r2, #4]
   117a8:	4610      	mov	r0, r2
   117aa:	9a03      	ldr	r2, [sp, #12]
   117ac:	7952      	ldrb	r2, [r2, #5]
   117ae:	4611      	mov	r1, r2
   117b0:	0142      	lsls	r2, r0, #5
   117b2:	440a      	add	r2, r1
   117b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   117b8:	f89d 200b 	ldrb.w	r2, [sp, #11]
    pin_map->_register[port_][pin_] =
   117bc:	4b0e      	ldr	r3, [pc, #56]	; (117f8 <Pin::SetAsOpenDrain(bool)+0x70>)
   117be:	681c      	ldr	r4, [r3, #0]
   117c0:	9b03      	ldr	r3, [sp, #12]
   117c2:	791b      	ldrb	r3, [r3, #4]
   117c4:	461e      	mov	r6, r3
   117c6:	9b03      	ldr	r3, [sp, #12]
   117c8:	795b      	ldrb	r3, [r3, #5]
   117ca:	461d      	mov	r5, r3
        BitPlace(pin_map->_register[port_][pin_], PinBitMap::kOpenDrain,
   117cc:	2301      	movs	r3, #1
   117ce:	9300      	str	r3, [sp, #0]
   117d0:	4613      	mov	r3, r2
   117d2:	220a      	movs	r2, #10
   117d4:	9803      	ldr	r0, [sp, #12]
   117d6:	f000 f84b 	bl	11870 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   117da:	4602      	mov	r2, r0
    pin_map->_register[port_][pin_] =
   117dc:	0173      	lsls	r3, r6, #5
   117de:	442b      	add	r3, r5
   117e0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   117e4:	463b      	mov	r3, r7
   117e6:	4619      	mov	r1, r3
   117e8:	4802      	ldr	r0, [pc, #8]	; (117f4 <Pin::SetAsOpenDrain(bool)+0x6c>)
   117ea:	f001 fb9f 	bl	12f2c <__cyg_profile_func_exit>
                 set_as_open_drain, 1);
  }
   117ee:	bf00      	nop
   117f0:	b005      	add	sp, #20
   117f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   117f4:	00011789 	.word	0x00011789
   117f8:	10000010 	.word	0x10000010

000117fc <Pin::EnableDac(bool)>:
  void EnableDac(bool enable_dac = true) override
   117fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   117fe:	b085      	sub	sp, #20
   11800:	4677      	mov	r7, lr
   11802:	9003      	str	r0, [sp, #12]
   11804:	460b      	mov	r3, r1
   11806:	f88d 300b 	strb.w	r3, [sp, #11]
   1180a:	463b      	mov	r3, r7
   1180c:	4619      	mov	r1, r3
   1180e:	4816      	ldr	r0, [pc, #88]	; (11868 <Pin::EnableDac(bool)+0x6c>)
   11810:	f001 fb78 	bl	12f04 <__cyg_profile_func_enter>
  {
    pin_map->_register[port_][pin_] = BitPlace(
   11814:	4b15      	ldr	r3, [pc, #84]	; (1186c <Pin::EnableDac(bool)+0x70>)
   11816:	681b      	ldr	r3, [r3, #0]
        pin_map->_register[port_][pin_], PinBitMap::kDacEnable, enable_dac, 1);
   11818:	9a03      	ldr	r2, [sp, #12]
   1181a:	7912      	ldrb	r2, [r2, #4]
   1181c:	4610      	mov	r0, r2
   1181e:	9a03      	ldr	r2, [sp, #12]
   11820:	7952      	ldrb	r2, [r2, #5]
   11822:	4611      	mov	r1, r2
    pin_map->_register[port_][pin_] = BitPlace(
   11824:	0142      	lsls	r2, r0, #5
   11826:	440a      	add	r2, r1
   11828:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1182c:	f89d 200b 	ldrb.w	r2, [sp, #11]
   11830:	4b0e      	ldr	r3, [pc, #56]	; (1186c <Pin::EnableDac(bool)+0x70>)
   11832:	681c      	ldr	r4, [r3, #0]
   11834:	9b03      	ldr	r3, [sp, #12]
   11836:	791b      	ldrb	r3, [r3, #4]
   11838:	461e      	mov	r6, r3
   1183a:	9b03      	ldr	r3, [sp, #12]
   1183c:	795b      	ldrb	r3, [r3, #5]
   1183e:	461d      	mov	r5, r3
   11840:	2301      	movs	r3, #1
   11842:	9300      	str	r3, [sp, #0]
   11844:	4613      	mov	r3, r2
   11846:	2210      	movs	r2, #16
   11848:	9803      	ldr	r0, [sp, #12]
   1184a:	f000 f811 	bl	11870 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>
   1184e:	4602      	mov	r2, r0
   11850:	0173      	lsls	r3, r6, #5
   11852:	442b      	add	r3, r5
   11854:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   11858:	463b      	mov	r3, r7
   1185a:	4619      	mov	r1, r3
   1185c:	4802      	ldr	r0, [pc, #8]	; (11868 <Pin::EnableDac(bool)+0x6c>)
   1185e:	f001 fb65 	bl	12f2c <__cyg_profile_func_exit>
  }
   11862:	bf00      	nop
   11864:	b005      	add	sp, #20
   11866:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11868:	000117fd 	.word	0x000117fd
   1186c:	10000010 	.word	0x10000010

00011870 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)>:
  inline uint32_t BitPlace(uint32_t target, uint32_t position, uint32_t value,
   11870:	b530      	push	{r4, r5, lr}
   11872:	b087      	sub	sp, #28
   11874:	4675      	mov	r5, lr
   11876:	9003      	str	r0, [sp, #12]
   11878:	9102      	str	r1, [sp, #8]
   1187a:	9201      	str	r2, [sp, #4]
   1187c:	9300      	str	r3, [sp, #0]
   1187e:	462b      	mov	r3, r5
   11880:	4619      	mov	r1, r3
   11882:	4813      	ldr	r0, [pc, #76]	; (118d0 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   11884:	f001 fb3e 	bl	12f04 <__cyg_profile_func_enter>
                           uint32_t value_width)
  {
    // Generate mask with all 1s
    uint32_t mask = 0xFFFFFFFF >> (32 - value_width);
   11888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1188a:	f1c3 0320 	rsb	r3, r3, #32
   1188e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11892:	fa22 f303 	lsr.w	r3, r2, r3
   11896:	9305      	str	r3, [sp, #20]
    target &= ~(mask << position);
   11898:	9a05      	ldr	r2, [sp, #20]
   1189a:	9b01      	ldr	r3, [sp, #4]
   1189c:	fa02 f303 	lsl.w	r3, r2, r3
   118a0:	43db      	mvns	r3, r3
   118a2:	9a02      	ldr	r2, [sp, #8]
   118a4:	4013      	ands	r3, r2
   118a6:	9302      	str	r3, [sp, #8]
    target |= (value & mask) << position;
   118a8:	9a00      	ldr	r2, [sp, #0]
   118aa:	9b05      	ldr	r3, [sp, #20]
   118ac:	401a      	ands	r2, r3
   118ae:	9b01      	ldr	r3, [sp, #4]
   118b0:	fa02 f303 	lsl.w	r3, r2, r3
   118b4:	9a02      	ldr	r2, [sp, #8]
   118b6:	4313      	orrs	r3, r2
   118b8:	9302      	str	r3, [sp, #8]
    return target;
   118ba:	9c02      	ldr	r4, [sp, #8]
   118bc:	462b      	mov	r3, r5
   118be:	4619      	mov	r1, r3
   118c0:	4803      	ldr	r0, [pc, #12]	; (118d0 <Pin::BitPlace(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>)
   118c2:	f001 fb33 	bl	12f2c <__cyg_profile_func_exit>
   118c6:	4623      	mov	r3, r4
  }
   118c8:	4618      	mov	r0, r3
   118ca:	b007      	add	sp, #28
   118cc:	bd30      	pop	{r4, r5, pc}
   118ce:	bf00      	nop
   118d0:	00011871 	.word	0x00011871

000118d4 <Pin::GetPort() const>:
  uint8_t GetPort() const override
   118d4:	b530      	push	{r4, r5, lr}
   118d6:	b083      	sub	sp, #12
   118d8:	4675      	mov	r5, lr
   118da:	9001      	str	r0, [sp, #4]
   118dc:	462b      	mov	r3, r5
   118de:	4619      	mov	r1, r3
   118e0:	4806      	ldr	r0, [pc, #24]	; (118fc <Pin::GetPort() const+0x28>)
   118e2:	f001 fb0f 	bl	12f04 <__cyg_profile_func_enter>
  {
    return port_;
   118e6:	9b01      	ldr	r3, [sp, #4]
   118e8:	791c      	ldrb	r4, [r3, #4]
   118ea:	462b      	mov	r3, r5
   118ec:	4619      	mov	r1, r3
   118ee:	4803      	ldr	r0, [pc, #12]	; (118fc <Pin::GetPort() const+0x28>)
   118f0:	f001 fb1c 	bl	12f2c <__cyg_profile_func_exit>
   118f4:	4623      	mov	r3, r4
  }
   118f6:	4618      	mov	r0, r3
   118f8:	b003      	add	sp, #12
   118fa:	bd30      	pop	{r4, r5, pc}
   118fc:	000118d5 	.word	0x000118d5

00011900 <Pin::GetPin() const>:
  uint8_t GetPin() const override
   11900:	b530      	push	{r4, r5, lr}
   11902:	b083      	sub	sp, #12
   11904:	4675      	mov	r5, lr
   11906:	9001      	str	r0, [sp, #4]
   11908:	462b      	mov	r3, r5
   1190a:	4619      	mov	r1, r3
   1190c:	4806      	ldr	r0, [pc, #24]	; (11928 <Pin::GetPin() const+0x28>)
   1190e:	f001 faf9 	bl	12f04 <__cyg_profile_func_enter>
  {
    return pin_;
   11912:	9b01      	ldr	r3, [sp, #4]
   11914:	795c      	ldrb	r4, [r3, #5]
   11916:	462b      	mov	r3, r5
   11918:	4619      	mov	r1, r3
   1191a:	4803      	ldr	r0, [pc, #12]	; (11928 <Pin::GetPin() const+0x28>)
   1191c:	f001 fb06 	bl	12f2c <__cyg_profile_func_exit>
   11920:	4623      	mov	r3, r4
  }
   11922:	4618      	mov	r0, r3
   11924:	b003      	add	sp, #12
   11926:	bd30      	pop	{r4, r5, pc}
   11928:	00011901 	.word	0x00011901

0001192c <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>:
//
// @param enum_type_value variable you would like to get the value of.
// @return the value of the enum class type variable of with the underlying
//         type of the enum class.
template <typename Enum, typename Type = typename std::underlying_type_t<Enum>>
constexpr Type Value(Enum enum_type_value)
   1192c:	b530      	push	{r4, r5, lr}
   1192e:	b083      	sub	sp, #12
   11930:	4675      	mov	r5, lr
   11932:	4603      	mov	r3, r0
   11934:	f88d 3007 	strb.w	r3, [sp, #7]
   11938:	462b      	mov	r3, r5
   1193a:	4619      	mov	r1, r3
   1193c:	4806      	ldr	r0, [pc, #24]	; (11958 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   1193e:	f001 fae1 	bl	12f04 <__cyg_profile_func_enter>
{
  return static_cast<Type>(enum_type_value);
   11942:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11946:	462b      	mov	r3, r5
   11948:	4619      	mov	r1, r3
   1194a:	4803      	ldr	r0, [pc, #12]	; (11958 <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)+0x2c>)
   1194c:	f001 faee 	bl	12f2c <__cyg_profile_func_exit>
   11950:	4623      	mov	r3, r4
}
   11952:	4618      	mov	r0, r3
   11954:	b003      	add	sp, #12
   11956:	bd30      	pop	{r4, r5, pc}
   11958:	0001192d 	.word	0x0001192d

0001195c <Timer::DoNothingIsr()>:
    Lpc40xxSystemController::Peripherals::kTimer3
  };

  static constexpr IRQn kTimerIrq[] = { IRQn::TIMER0_IRQn, IRQn::TIMER1_IRQn,
                                        IRQn::TIMER2_IRQn, IRQn::TIMER3_IRQn };
  static void DoNothingIsr() {}
   1195c:	b510      	push	{r4, lr}
   1195e:	4674      	mov	r4, lr
   11960:	4623      	mov	r3, r4
   11962:	4619      	mov	r1, r3
   11964:	4804      	ldr	r0, [pc, #16]	; (11978 <Timer::DoNothingIsr()+0x1c>)
   11966:	f001 facd 	bl	12f04 <__cyg_profile_func_enter>
   1196a:	4623      	mov	r3, r4
   1196c:	4619      	mov	r1, r3
   1196e:	4802      	ldr	r0, [pc, #8]	; (11978 <Timer::DoNothingIsr()+0x1c>)
   11970:	f001 fadc 	bl	12f2c <__cyg_profile_func_exit>
   11974:	bf00      	nop
   11976:	bd10      	pop	{r4, pc}
   11978:	0001195d 	.word	0x0001195d

0001197c <Timer::Initialize(unsigned long, void (*)(), long)>:
  ///                  register will be 10 ms.
  /// @param isr an ISR that will fire when the condition set by SetTimer
  ///            method is achieved.
  /// @param priority sets the Timer interrupt's priority level, defaults to -1
  ///                 which uses the platforms default priority.
  void Initialize(uint32_t frequency, IsrPointer isr = DoNothingIsr,
   1197c:	b510      	push	{r4, lr}
   1197e:	b086      	sub	sp, #24
   11980:	4674      	mov	r4, lr
   11982:	9003      	str	r0, [sp, #12]
   11984:	9102      	str	r1, [sp, #8]
   11986:	9201      	str	r2, [sp, #4]
   11988:	9300      	str	r3, [sp, #0]
   1198a:	4623      	mov	r3, r4
   1198c:	4619      	mov	r1, r3
   1198e:	483e      	ldr	r0, [pc, #248]	; (11a88 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   11990:	f001 fab8 	bl	12f04 <__cyg_profile_func_enter>
                  int32_t priority = -1) override final
  {
    PowerUpPeripheral(kPowerbit[channel_]);
   11994:	9b03      	ldr	r3, [sp, #12]
   11996:	1d18      	adds	r0, r3, #4
   11998:	9b03      	ldr	r3, [sp, #12]
   1199a:	685b      	ldr	r3, [r3, #4]
   1199c:	3314      	adds	r3, #20
   1199e:	681b      	ldr	r3, [r3, #0]
   119a0:	9a03      	ldr	r2, [sp, #12]
   119a2:	7a12      	ldrb	r2, [r2, #8]
   119a4:	0092      	lsls	r2, r2, #2
   119a6:	4939      	ldr	r1, [pc, #228]	; (11a8c <Timer::Initialize(unsigned long, void (*)(), long)+0x110>)
   119a8:	440a      	add	r2, r1
   119aa:	4611      	mov	r1, r2
   119ac:	4798      	blx	r3
    SJ2_ASSERT_FATAL(
   119ae:	9b02      	ldr	r3, [sp, #8]
   119b0:	2b00      	cmp	r3, #0
   119b2:	d10d      	bne.n	119d0 <Timer::Initialize(unsigned long, void (*)(), long)+0x54>
   119b4:	2384      	movs	r3, #132	; 0x84
   119b6:	4a36      	ldr	r2, [pc, #216]	; (11a90 <Timer::Initialize(unsigned long, void (*)(), long)+0x114>)
   119b8:	4936      	ldr	r1, [pc, #216]	; (11a94 <Timer::Initialize(unsigned long, void (*)(), long)+0x118>)
   119ba:	4837      	ldr	r0, [pc, #220]	; (11a98 <Timer::Initialize(unsigned long, void (*)(), long)+0x11c>)
   119bc:	f002 fd02 	bl	143c4 <printf>
   119c0:	4836      	ldr	r0, [pc, #216]	; (11a9c <Timer::Initialize(unsigned long, void (*)(), long)+0x120>)
   119c2:	f001 fa6f 	bl	12ea4 <puts>
   119c6:	2100      	movs	r1, #0
   119c8:	2001      	movs	r0, #1
   119ca:	f7ff f875 	bl	10ab8 <debug::PrintBacktrace(bool, void*)>
   119ce:	e7fe      	b.n	119ce <Timer::Initialize(unsigned long, void (*)(), long)+0x52>
        frequency != 0,
        "Cannot have zero ticks per microsecond, please choose 1 or more.");
    // Set Prescale register for Prescale Counter to milliseconds
    uint32_t prescaler = GetPeripheralFrequency() / frequency;
   119d0:	9b03      	ldr	r3, [sp, #12]
   119d2:	1d1a      	adds	r2, r3, #4
   119d4:	9b03      	ldr	r3, [sp, #12]
   119d6:	685b      	ldr	r3, [r3, #4]
   119d8:	3310      	adds	r3, #16
   119da:	681b      	ldr	r3, [r3, #0]
   119dc:	4610      	mov	r0, r2
   119de:	4798      	blx	r3
   119e0:	4602      	mov	r2, r0
   119e2:	9b02      	ldr	r3, [sp, #8]
   119e4:	fbb2 f3f3 	udiv	r3, r2, r3
   119e8:	9305      	str	r3, [sp, #20]
    tim_register[channel_]->PR &= ~(kClear << 1);
   119ea:	9b03      	ldr	r3, [sp, #12]
   119ec:	7a1b      	ldrb	r3, [r3, #8]
   119ee:	461a      	mov	r2, r3
   119f0:	4b2b      	ldr	r3, [pc, #172]	; (11aa0 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   119f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   119f6:	68da      	ldr	r2, [r3, #12]
   119f8:	9b03      	ldr	r3, [sp, #12]
   119fa:	7a1b      	ldrb	r3, [r3, #8]
   119fc:	4619      	mov	r1, r3
   119fe:	4b28      	ldr	r3, [pc, #160]	; (11aa0 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11a00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11a04:	f002 0201 	and.w	r2, r2, #1
   11a08:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->PR |= (prescaler << 1);
   11a0a:	9b03      	ldr	r3, [sp, #12]
   11a0c:	7a1b      	ldrb	r3, [r3, #8]
   11a0e:	461a      	mov	r2, r3
   11a10:	4b23      	ldr	r3, [pc, #140]	; (11aa0 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11a16:	68d9      	ldr	r1, [r3, #12]
   11a18:	9b05      	ldr	r3, [sp, #20]
   11a1a:	005a      	lsls	r2, r3, #1
   11a1c:	9b03      	ldr	r3, [sp, #12]
   11a1e:	7a1b      	ldrb	r3, [r3, #8]
   11a20:	4618      	mov	r0, r3
   11a22:	4b1f      	ldr	r3, [pc, #124]	; (11aa0 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11a24:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11a28:	430a      	orrs	r2, r1
   11a2a:	60da      	str	r2, [r3, #12]
    tim_register[channel_]->TCR |= (1 << 0);
   11a2c:	9b03      	ldr	r3, [sp, #12]
   11a2e:	7a1b      	ldrb	r3, [r3, #8]
   11a30:	461a      	mov	r2, r3
   11a32:	4b1b      	ldr	r3, [pc, #108]	; (11aa0 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11a38:	685a      	ldr	r2, [r3, #4]
   11a3a:	9b03      	ldr	r3, [sp, #12]
   11a3c:	7a1b      	ldrb	r3, [r3, #8]
   11a3e:	4619      	mov	r1, r3
   11a40:	4b17      	ldr	r3, [pc, #92]	; (11aa0 <Timer::Initialize(unsigned long, void (*)(), long)+0x124>)
   11a42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11a46:	f042 0201 	orr.w	r2, r2, #1
   11a4a:	605a      	str	r2, [r3, #4]
    user_timer_isr[channel_] = isr;
   11a4c:	9b03      	ldr	r3, [sp, #12]
   11a4e:	7a1b      	ldrb	r3, [r3, #8]
   11a50:	4619      	mov	r1, r3
   11a52:	4a14      	ldr	r2, [pc, #80]	; (11aa4 <Timer::Initialize(unsigned long, void (*)(), long)+0x128>)
   11a54:	9b01      	ldr	r3, [sp, #4]
   11a56:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    RegisterIsr(kTimerIrq[channel_], kTimerIsr[channel_], true, priority);
   11a5a:	9b03      	ldr	r3, [sp, #12]
   11a5c:	7a1b      	ldrb	r3, [r3, #8]
   11a5e:	461a      	mov	r2, r3
   11a60:	4b11      	ldr	r3, [pc, #68]	; (11aa8 <Timer::Initialize(unsigned long, void (*)(), long)+0x12c>)
   11a62:	5698      	ldrsb	r0, [r3, r2]
   11a64:	9b03      	ldr	r3, [sp, #12]
   11a66:	7a1b      	ldrb	r3, [r3, #8]
   11a68:	461a      	mov	r2, r3
   11a6a:	4b10      	ldr	r3, [pc, #64]	; (11aac <Timer::Initialize(unsigned long, void (*)(), long)+0x130>)
   11a6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11a70:	9b00      	ldr	r3, [sp, #0]
   11a72:	2201      	movs	r2, #1
   11a74:	f001 f91e 	bl	12cb4 <RegisterIsr(IRQn, void (*)(), bool, long)>
   11a78:	4623      	mov	r3, r4
   11a7a:	4619      	mov	r1, r3
   11a7c:	4802      	ldr	r0, [pc, #8]	; (11a88 <Timer::Initialize(unsigned long, void (*)(), long)+0x10c>)
   11a7e:	f001 fa55 	bl	12f2c <__cyg_profile_func_exit>
  }
   11a82:	bf00      	nop
   11a84:	b006      	add	sp, #24
   11a86:	bd10      	pop	{r4, pc}
   11a88:	0001197d 	.word	0x0001197d
   11a8c:	00017b10 	.word	0x00017b10
   11a90:	00017db0 	.word	0x00017db0
   11a94:	00017b34 	.word	0x00017b34
   11a98:	00017978 	.word	0x00017978
   11a9c:	00017684 	.word	0x00017684
   11aa0:	10000014 	.word	0x10000014
   11aa4:	100002ac 	.word	0x100002ac
   11aa8:	00017b20 	.word	0x00017b20
   11aac:	00017b24 	.word	0x00017b24

00011ab0 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>:
constexpr Type Value(Enum enum_type_value)
   11ab0:	b530      	push	{r4, r5, lr}
   11ab2:	b083      	sub	sp, #12
   11ab4:	4675      	mov	r5, lr
   11ab6:	4603      	mov	r3, r0
   11ab8:	f88d 3007 	strb.w	r3, [sp, #7]
   11abc:	462b      	mov	r3, r5
   11abe:	4619      	mov	r1, r3
   11ac0:	4806      	ldr	r0, [pc, #24]	; (11adc <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   11ac2:	f001 fa1f 	bl	12f04 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   11ac6:	f89d 4007 	ldrb.w	r4, [sp, #7]
   11aca:	462b      	mov	r3, r5
   11acc:	4619      	mov	r1, r3
   11ace:	4803      	ldr	r0, [pc, #12]	; (11adc <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)+0x2c>)
   11ad0:	f001 fa2c 	bl	12f2c <__cyg_profile_func_exit>
   11ad4:	4623      	mov	r3, r4
}
   11ad6:	4618      	mov	r0, r3
   11ad8:	b003      	add	sp, #12
   11ada:	bd30      	pop	{r4, r5, pc}
   11adc:	00011ab1 	.word	0x00011ab1

00011ae0 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)>:
  ///
  /// @param ticks the count of the timer register (TC) to have an ISR fire
  /// @param condition the condition for which a timer interrupt will occur
  /// @param match_register which match register (from 0 to 3) should be used
  ///                       for holding the ticks for the condition.
  void SetTimer(uint32_t ticks, TimerIsrCondition condition,
   11ae0:	b570      	push	{r4, r5, r6, lr}
   11ae2:	b086      	sub	sp, #24
   11ae4:	4676      	mov	r6, lr
   11ae6:	9003      	str	r0, [sp, #12]
   11ae8:	9102      	str	r1, [sp, #8]
   11aea:	4611      	mov	r1, r2
   11aec:	461a      	mov	r2, r3
   11aee:	460b      	mov	r3, r1
   11af0:	f88d 3007 	strb.w	r3, [sp, #7]
   11af4:	4613      	mov	r3, r2
   11af6:	f88d 3006 	strb.w	r3, [sp, #6]
   11afa:	4633      	mov	r3, r6
   11afc:	4619      	mov	r1, r3
   11afe:	4832      	ldr	r0, [pc, #200]	; (11bc8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   11b00:	f001 fa00 	bl	12f04 <__cyg_profile_func_enter>
                MatchControlRegister match_register = kMat0) override final
  {
    static constexpr uint8_t kClearMode = 0b0111;

    uint8_t match_value = util::Value(match_register);
   11b04:	f89d 3006 	ldrb.w	r3, [sp, #6]
   11b08:	4618      	mov	r0, r3
   11b0a:	f7ff ffd1 	bl	11ab0 <unsigned char util::Value<TimerInterface::MatchControlRegister, unsigned char>(TimerInterface::MatchControlRegister)>
   11b0e:	4603      	mov	r3, r0
   11b10:	f88d 3017 	strb.w	r3, [sp, #23]
    tim_register[channel_]->MCR &= ~(kClearMode << match_value);
   11b14:	9b03      	ldr	r3, [sp, #12]
   11b16:	7a1b      	ldrb	r3, [r3, #8]
   11b18:	461a      	mov	r2, r3
   11b1a:	4b2c      	ldr	r3, [pc, #176]	; (11bcc <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11b20:	695a      	ldr	r2, [r3, #20]
   11b22:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11b26:	2107      	movs	r1, #7
   11b28:	fa01 f303 	lsl.w	r3, r1, r3
   11b2c:	43db      	mvns	r3, r3
   11b2e:	4619      	mov	r1, r3
   11b30:	9b03      	ldr	r3, [sp, #12]
   11b32:	7a1b      	ldrb	r3, [r3, #8]
   11b34:	4618      	mov	r0, r3
   11b36:	4b25      	ldr	r3, [pc, #148]	; (11bcc <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11b38:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11b3c:	400a      	ands	r2, r1
   11b3e:	615a      	str	r2, [r3, #20]
    tim_register[channel_]->MCR |= condition << match_value;
   11b40:	9b03      	ldr	r3, [sp, #12]
   11b42:	7a1b      	ldrb	r3, [r3, #8]
   11b44:	461a      	mov	r2, r3
   11b46:	4b21      	ldr	r3, [pc, #132]	; (11bcc <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11b4c:	695a      	ldr	r2, [r3, #20]
   11b4e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   11b52:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11b56:	fa01 f303 	lsl.w	r3, r1, r3
   11b5a:	4619      	mov	r1, r3
   11b5c:	9b03      	ldr	r3, [sp, #12]
   11b5e:	7a1b      	ldrb	r3, [r3, #8]
   11b60:	4618      	mov	r0, r3
   11b62:	4b1a      	ldr	r3, [pc, #104]	; (11bcc <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xec>)
   11b64:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11b68:	430a      	orrs	r2, r1
   11b6a:	615a      	str	r2, [r3, #20]
    *match[channel_][match_value / 3] |= (((ticks / 2)) << 0);
   11b6c:	9b03      	ldr	r3, [sp, #12]
   11b6e:	7a1b      	ldrb	r3, [r3, #8]
   11b70:	4618      	mov	r0, r3
   11b72:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11b76:	4a16      	ldr	r2, [pc, #88]	; (11bd0 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   11b78:	fba2 2303 	umull	r2, r3, r2, r3
   11b7c:	085b      	lsrs	r3, r3, #1
   11b7e:	b2db      	uxtb	r3, r3
   11b80:	4619      	mov	r1, r3
   11b82:	4a14      	ldr	r2, [pc, #80]	; (11bd4 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   11b84:	0083      	lsls	r3, r0, #2
   11b86:	440b      	add	r3, r1
   11b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b8c:	6819      	ldr	r1, [r3, #0]
   11b8e:	9b02      	ldr	r3, [sp, #8]
   11b90:	085a      	lsrs	r2, r3, #1
   11b92:	9b03      	ldr	r3, [sp, #12]
   11b94:	7a1b      	ldrb	r3, [r3, #8]
   11b96:	461d      	mov	r5, r3
   11b98:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11b9c:	480c      	ldr	r0, [pc, #48]	; (11bd0 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf0>)
   11b9e:	fba0 0303 	umull	r0, r3, r0, r3
   11ba2:	085b      	lsrs	r3, r3, #1
   11ba4:	b2db      	uxtb	r3, r3
   11ba6:	461c      	mov	r4, r3
   11ba8:	480a      	ldr	r0, [pc, #40]	; (11bd4 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xf4>)
   11baa:	00ab      	lsls	r3, r5, #2
   11bac:	4423      	add	r3, r4
   11bae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   11bb2:	430a      	orrs	r2, r1
   11bb4:	601a      	str	r2, [r3, #0]
   11bb6:	4633      	mov	r3, r6
   11bb8:	4619      	mov	r1, r3
   11bba:	4803      	ldr	r0, [pc, #12]	; (11bc8 <Timer::SetTimer(unsigned long, TimerInterface::TimerIsrCondition, TimerInterface::MatchControlRegister)+0xe8>)
   11bbc:	f001 f9b6 	bl	12f2c <__cyg_profile_func_exit>
  }
   11bc0:	bf00      	nop
   11bc2:	b006      	add	sp, #24
   11bc4:	bd70      	pop	{r4, r5, r6, pc}
   11bc6:	bf00      	nop
   11bc8:	00011ae1 	.word	0x00011ae1
   11bcc:	10000014 	.word	0x10000014
   11bd0:	aaaaaaab 	.word	0xaaaaaaab
   11bd4:	1000026c 	.word	0x1000026c

00011bd8 <Timer::GetTimer()>:

  [[gnu::always_inline]] uint32_t GetTimer() override final {
   11bd8:	b530      	push	{r4, r5, lr}
   11bda:	b083      	sub	sp, #12
   11bdc:	4675      	mov	r5, lr
   11bde:	9001      	str	r0, [sp, #4]
   11be0:	462b      	mov	r3, r5
   11be2:	4619      	mov	r1, r3
   11be4:	4809      	ldr	r0, [pc, #36]	; (11c0c <Timer::GetTimer()+0x34>)
   11be6:	f001 f98d 	bl	12f04 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   11bea:	9b01      	ldr	r3, [sp, #4]
   11bec:	7a1b      	ldrb	r3, [r3, #8]
   11bee:	461a      	mov	r2, r3
   11bf0:	4b07      	ldr	r3, [pc, #28]	; (11c10 <Timer::GetTimer()+0x38>)
   11bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11bf6:	689c      	ldr	r4, [r3, #8]
   11bf8:	462b      	mov	r3, r5
   11bfa:	4619      	mov	r1, r3
   11bfc:	4803      	ldr	r0, [pc, #12]	; (11c0c <Timer::GetTimer()+0x34>)
   11bfe:	f001 f995 	bl	12f2c <__cyg_profile_func_exit>
   11c02:	4623      	mov	r3, r4
  }
   11c04:	4618      	mov	r0, r3
   11c06:	b003      	add	sp, #12
   11c08:	bd30      	pop	{r4, r5, pc}
   11c0a:	bf00      	nop
   11c0c:	00011bd9 	.word	0x00011bd9
   11c10:	10000014 	.word	0x10000014

00011c14 <Uart::SetBaudRate(unsigned long)>:
  constexpr Uart(Channels mode, PinInterface * tx_pin, PinInterface * rx_pin)
      : channel_(static_cast<uint8_t>(mode)), tx_(tx_pin), rx_(rx_pin)
  {
  }

  void SetBaudRate(uint32_t baud_rate) override
   11c14:	b510      	push	{r4, lr}
   11c16:	b088      	sub	sp, #32
   11c18:	4674      	mov	r4, lr
   11c1a:	9001      	str	r0, [sp, #4]
   11c1c:	9100      	str	r1, [sp, #0]
   11c1e:	4623      	mov	r3, r4
   11c20:	4619      	mov	r1, r3
   11c22:	482d      	ldr	r0, [pc, #180]	; (11cd8 <Uart::SetBaudRate(unsigned long)+0xc4>)
   11c24:	f001 f96e 	bl	12f04 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kDlabBit = (1 << 7);
   11c28:	2380      	movs	r3, #128	; 0x80
   11c2a:	f88d 301f 	strb.w	r3, [sp, #31]
    float baudrate             = static_cast<float>(baud_rate);
   11c2e:	9b00      	ldr	r3, [sp, #0]
   11c30:	ee07 3a90 	vmov	s15, r3
   11c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
   11c38:	edcd 7a06 	vstr	s15, [sp, #24]
    UartCalibration_t dividers = GenerateUartCalibration(baudrate);
   11c3c:	ab02      	add	r3, sp, #8
   11c3e:	ed9d 0a06 	vldr	s0, [sp, #24]
   11c42:	9901      	ldr	r1, [sp, #4]
   11c44:	4618      	mov	r0, r3
   11c46:	f000 fb2d 	bl	122a4 <Uart::GenerateUartCalibration(float)>

    uint8_t dlm = static_cast<uint8_t>((dividers.divide_latch >> 8) & 0xFF);
   11c4a:	9b02      	ldr	r3, [sp, #8]
   11c4c:	0a1b      	lsrs	r3, r3, #8
   11c4e:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t dll = static_cast<uint8_t>(dividers.divide_latch & 0xFF);
   11c52:	9b02      	ldr	r3, [sp, #8]
   11c54:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   11c58:	9b04      	ldr	r3, [sp, #16]
   11c5a:	b2db      	uxtb	r3, r3
   11c5c:	011b      	lsls	r3, r3, #4
   11c5e:	b2da      	uxtb	r2, r3
                                       (dividers.divide_add & 0xF));
   11c60:	9b03      	ldr	r3, [sp, #12]
   11c62:	b2db      	uxtb	r3, r3
   11c64:	f003 030f 	and.w	r3, r3, #15
   11c68:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((dividers.multiply & 0xF) << 4 |
   11c6a:	4313      	orrs	r3, r2
   11c6c:	f88d 3015 	strb.w	r3, [sp, #21]

    // Set baud rate
    uart[channel_]->LCR = kDlabBit;
   11c70:	9b01      	ldr	r3, [sp, #4]
   11c72:	7a1b      	ldrb	r3, [r3, #8]
   11c74:	461a      	mov	r2, r3
   11c76:	4b19      	ldr	r3, [pc, #100]	; (11cdc <Uart::SetBaudRate(unsigned long)+0xc8>)
   11c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11c7c:	2280      	movs	r2, #128	; 0x80
   11c7e:	731a      	strb	r2, [r3, #12]
    uart[channel_]->DLM = dlm;
   11c80:	9b01      	ldr	r3, [sp, #4]
   11c82:	7a1b      	ldrb	r3, [r3, #8]
   11c84:	461a      	mov	r2, r3
   11c86:	4b15      	ldr	r3, [pc, #84]	; (11cdc <Uart::SetBaudRate(unsigned long)+0xc8>)
   11c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11c8c:	f89d 2017 	ldrb.w	r2, [sp, #23]
   11c90:	711a      	strb	r2, [r3, #4]
    uart[channel_]->DLL = dll;
   11c92:	9b01      	ldr	r3, [sp, #4]
   11c94:	7a1b      	ldrb	r3, [r3, #8]
   11c96:	461a      	mov	r2, r3
   11c98:	4b10      	ldr	r3, [pc, #64]	; (11cdc <Uart::SetBaudRate(unsigned long)+0xc8>)
   11c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11c9e:	f89d 2016 	ldrb.w	r2, [sp, #22]
   11ca2:	701a      	strb	r2, [r3, #0]
    uart[channel_]->FDR = fdr;
   11ca4:	9b01      	ldr	r3, [sp, #4]
   11ca6:	7a1b      	ldrb	r3, [r3, #8]
   11ca8:	461a      	mov	r2, r3
   11caa:	4b0c      	ldr	r3, [pc, #48]	; (11cdc <Uart::SetBaudRate(unsigned long)+0xc8>)
   11cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11cb0:	f89d 2015 	ldrb.w	r2, [sp, #21]
   11cb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uart[channel_]->LCR = kStandardUart;
   11cb8:	9b01      	ldr	r3, [sp, #4]
   11cba:	7a1b      	ldrb	r3, [r3, #8]
   11cbc:	461a      	mov	r2, r3
   11cbe:	4b07      	ldr	r3, [pc, #28]	; (11cdc <Uart::SetBaudRate(unsigned long)+0xc8>)
   11cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11cc4:	2203      	movs	r2, #3
   11cc6:	731a      	strb	r2, [r3, #12]
   11cc8:	4623      	mov	r3, r4
   11cca:	4619      	mov	r1, r3
   11ccc:	4802      	ldr	r0, [pc, #8]	; (11cd8 <Uart::SetBaudRate(unsigned long)+0xc4>)
   11cce:	f001 f92d 	bl	12f2c <__cyg_profile_func_exit>
  }
   11cd2:	bf00      	nop
   11cd4:	b008      	add	sp, #32
   11cd6:	bd10      	pop	{r4, pc}
   11cd8:	00011c15 	.word	0x00011c15
   11cdc:	10000024 	.word	0x10000024

00011ce0 <Uart::Initialize(unsigned long)>:

  bool Initialize(uint32_t baud_rate) override
   11ce0:	b530      	push	{r4, r5, lr}
   11ce2:	b085      	sub	sp, #20
   11ce4:	4675      	mov	r5, lr
   11ce6:	9001      	str	r0, [sp, #4]
   11ce8:	9100      	str	r1, [sp, #0]
   11cea:	462b      	mov	r3, r5
   11cec:	4619      	mov	r1, r3
   11cee:	4830      	ldr	r0, [pc, #192]	; (11db0 <Uart::Initialize(unsigned long)+0xd0>)
   11cf0:	f001 f908 	bl	12f04 <__cyg_profile_func_enter>
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
   11cf4:	2307      	movs	r3, #7
   11cf6:	f88d 300f 	strb.w	r3, [sp, #15]
    // Powering the port
    PowerUpPeripheral(kPowerbit[channel_]);
   11cfa:	9b01      	ldr	r3, [sp, #4]
   11cfc:	1d18      	adds	r0, r3, #4
   11cfe:	9b01      	ldr	r3, [sp, #4]
   11d00:	685b      	ldr	r3, [r3, #4]
   11d02:	3314      	adds	r3, #20
   11d04:	681b      	ldr	r3, [r3, #0]
   11d06:	9a01      	ldr	r2, [sp, #4]
   11d08:	7a12      	ldrb	r2, [r2, #8]
   11d0a:	0092      	lsls	r2, r2, #2
   11d0c:	4929      	ldr	r1, [pc, #164]	; (11db4 <Uart::Initialize(unsigned long)+0xd4>)
   11d0e:	440a      	add	r2, r1
   11d10:	4611      	mov	r1, r2
   11d12:	4798      	blx	r3
    // Setting the pin functions and modes
    rx_->SetPinFunction(kRxUartPortFunction[channel_]);
   11d14:	9b01      	ldr	r3, [sp, #4]
   11d16:	6918      	ldr	r0, [r3, #16]
   11d18:	9b01      	ldr	r3, [sp, #4]
   11d1a:	691b      	ldr	r3, [r3, #16]
   11d1c:	681b      	ldr	r3, [r3, #0]
   11d1e:	681b      	ldr	r3, [r3, #0]
   11d20:	9a01      	ldr	r2, [sp, #4]
   11d22:	7a12      	ldrb	r2, [r2, #8]
   11d24:	4611      	mov	r1, r2
   11d26:	4a24      	ldr	r2, [pc, #144]	; (11db8 <Uart::Initialize(unsigned long)+0xd8>)
   11d28:	5c52      	ldrb	r2, [r2, r1]
   11d2a:	4611      	mov	r1, r2
   11d2c:	4798      	blx	r3
    tx_->SetPinFunction(kTxUartPortFunction[channel_]);
   11d2e:	9b01      	ldr	r3, [sp, #4]
   11d30:	68d8      	ldr	r0, [r3, #12]
   11d32:	9b01      	ldr	r3, [sp, #4]
   11d34:	68db      	ldr	r3, [r3, #12]
   11d36:	681b      	ldr	r3, [r3, #0]
   11d38:	681b      	ldr	r3, [r3, #0]
   11d3a:	9a01      	ldr	r2, [sp, #4]
   11d3c:	7a12      	ldrb	r2, [r2, #8]
   11d3e:	4611      	mov	r1, r2
   11d40:	4a1e      	ldr	r2, [pc, #120]	; (11dbc <Uart::Initialize(unsigned long)+0xdc>)
   11d42:	5c52      	ldrb	r2, [r2, r1]
   11d44:	4611      	mov	r1, r2
   11d46:	4798      	blx	r3
    rx_->SetMode(PinInterface::Mode::kPullUp);
   11d48:	9b01      	ldr	r3, [sp, #4]
   11d4a:	691a      	ldr	r2, [r3, #16]
   11d4c:	9b01      	ldr	r3, [sp, #4]
   11d4e:	691b      	ldr	r3, [r3, #16]
   11d50:	681b      	ldr	r3, [r3, #0]
   11d52:	3304      	adds	r3, #4
   11d54:	681b      	ldr	r3, [r3, #0]
   11d56:	2102      	movs	r1, #2
   11d58:	4610      	mov	r0, r2
   11d5a:	4798      	blx	r3
    tx_->SetMode(PinInterface::Mode::kPullUp);
   11d5c:	9b01      	ldr	r3, [sp, #4]
   11d5e:	68da      	ldr	r2, [r3, #12]
   11d60:	9b01      	ldr	r3, [sp, #4]
   11d62:	68db      	ldr	r3, [r3, #12]
   11d64:	681b      	ldr	r3, [r3, #0]
   11d66:	3304      	adds	r3, #4
   11d68:	681b      	ldr	r3, [r3, #0]
   11d6a:	2102      	movs	r1, #2
   11d6c:	4610      	mov	r0, r2
   11d6e:	4798      	blx	r3
    // Baud rate setting
    SetBaudRate(baud_rate);
   11d70:	9900      	ldr	r1, [sp, #0]
   11d72:	9801      	ldr	r0, [sp, #4]
   11d74:	f7ff ff4e 	bl	11c14 <Uart::SetBaudRate(unsigned long)>
    uart[channel_]->FCR |= kFIFOEnableAndReset;
   11d78:	9b01      	ldr	r3, [sp, #4]
   11d7a:	7a1b      	ldrb	r3, [r3, #8]
   11d7c:	461a      	mov	r2, r3
   11d7e:	4b10      	ldr	r3, [pc, #64]	; (11dc0 <Uart::Initialize(unsigned long)+0xe0>)
   11d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11d84:	7a1b      	ldrb	r3, [r3, #8]
   11d86:	b2da      	uxtb	r2, r3
   11d88:	9b01      	ldr	r3, [sp, #4]
   11d8a:	7a1b      	ldrb	r3, [r3, #8]
   11d8c:	4619      	mov	r1, r3
   11d8e:	4b0c      	ldr	r3, [pc, #48]	; (11dc0 <Uart::Initialize(unsigned long)+0xe0>)
   11d90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11d94:	f042 0207 	orr.w	r2, r2, #7
   11d98:	b2d2      	uxtb	r2, r2
   11d9a:	721a      	strb	r2, [r3, #8]
    return true;
   11d9c:	2401      	movs	r4, #1
   11d9e:	462b      	mov	r3, r5
   11da0:	4619      	mov	r1, r3
   11da2:	4803      	ldr	r0, [pc, #12]	; (11db0 <Uart::Initialize(unsigned long)+0xd0>)
   11da4:	f001 f8c2 	bl	12f2c <__cyg_profile_func_exit>
   11da8:	4623      	mov	r3, r4
  }
   11daa:	4618      	mov	r0, r3
   11dac:	b005      	add	sp, #20
   11dae:	bd30      	pop	{r4, r5, pc}
   11db0:	00011ce1 	.word	0x00011ce1
   11db4:	00017b48 	.word	0x00017b48
   11db8:	00017b44 	.word	0x00017b44
   11dbc:	00017b40 	.word	0x00017b40
   11dc0:	10000024 	.word	0x10000024

00011dc4 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>:

  void Send(uint8_t data) override
  {
    uart[channel_]->THR              = data;
    auto wait_for_transfer_to_finish = [this]() -> bool {
   11dc4:	b530      	push	{r4, r5, lr}
   11dc6:	b083      	sub	sp, #12
   11dc8:	4675      	mov	r5, lr
   11dca:	9001      	str	r0, [sp, #4]
   11dcc:	462b      	mov	r3, r5
   11dce:	4619      	mov	r1, r3
   11dd0:	480d      	ldr	r0, [pc, #52]	; (11e08 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   11dd2:	f001 f897 	bl	12f04 <__cyg_profile_func_enter>
   11dd6:	9b01      	ldr	r3, [sp, #4]
   11dd8:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 5));
   11dda:	7a1b      	ldrb	r3, [r3, #8]
   11ddc:	461a      	mov	r2, r3
   11dde:	4b0b      	ldr	r3, [pc, #44]	; (11e0c <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x48>)
   11de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11de4:	7d1b      	ldrb	r3, [r3, #20]
   11de6:	b2db      	uxtb	r3, r3
   11de8:	f003 0320 	and.w	r3, r3, #32
   11dec:	2b00      	cmp	r3, #0
   11dee:	bf14      	ite	ne
   11df0:	2301      	movne	r3, #1
   11df2:	2300      	moveq	r3, #0
   11df4:	b2dc      	uxtb	r4, r3
   11df6:	462b      	mov	r3, r5
   11df8:	4619      	mov	r1, r3
   11dfa:	4803      	ldr	r0, [pc, #12]	; (11e08 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const+0x44>)
   11dfc:	f001 f896 	bl	12f2c <__cyg_profile_func_exit>
   11e00:	4623      	mov	r3, r4
    };
   11e02:	4618      	mov	r0, r3
   11e04:	b003      	add	sp, #12
   11e06:	bd30      	pop	{r4, r5, pc}
   11e08:	00011dc5 	.word	0x00011dc5
   11e0c:	10000024 	.word	0x10000024

00011e10 <Uart::Send(unsigned char)>:
  void Send(uint8_t data) override
   11e10:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   11e14:	b08a      	sub	sp, #40	; 0x28
   11e16:	4675      	mov	r5, lr
   11e18:	9001      	str	r0, [sp, #4]
   11e1a:	460b      	mov	r3, r1
   11e1c:	f88d 3003 	strb.w	r3, [sp, #3]
   11e20:	462b      	mov	r3, r5
   11e22:	4619      	mov	r1, r3
   11e24:	4831      	ldr	r0, [pc, #196]	; (11eec <Uart::Send(unsigned char)+0xdc>)
   11e26:	f001 f86d 	bl	12f04 <__cyg_profile_func_enter>
    uart[channel_]->THR              = data;
   11e2a:	9b01      	ldr	r3, [sp, #4]
   11e2c:	7a1b      	ldrb	r3, [r3, #8]
   11e2e:	461a      	mov	r2, r3
   11e30:	4b2f      	ldr	r3, [pc, #188]	; (11ef0 <Uart::Send(unsigned char)+0xe0>)
   11e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11e36:	f89d 2003 	ldrb.w	r2, [sp, #3]
   11e3a:	701a      	strb	r2, [r3, #0]
    };
   11e3c:	9b01      	ldr	r3, [sp, #4]
   11e3e:	9304      	str	r3, [sp, #16]
   11e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11e44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11e48:	e9cd 3408 	strd	r3, r4, [sp, #32]
   11e4c:	9b04      	ldr	r3, [sp, #16]
   11e4e:	9303      	str	r3, [sp, #12]
   11e50:	462b      	mov	r3, r5
   11e52:	4619      	mov	r1, r3
   11e54:	4827      	ldr	r0, [pc, #156]	; (11ef4 <Uart::Send(unsigned char)+0xe4>)
   11e56:	f001 f855 	bl	12f04 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   11e5a:	f04f 0300 	mov.w	r3, #0
   11e5e:	f04f 0400 	mov.w	r4, #0
   11e62:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   11e66:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11e6a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   11e6e:	bf08      	it	eq
   11e70:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   11e74:	d106      	bne.n	11e84 <Uart::Send(unsigned char)+0x74>
    timeout_time = kMaxWait;
   11e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11e7a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11e7e:	e9cd 3406 	strd	r3, r4, [sp, #24]
   11e82:	e00b      	b.n	11e9c <Uart::Send(unsigned char)+0x8c>
    timeout_time = Milliseconds() + timeout;
   11e84:	f7fe fbf2 	bl	1066c <Milliseconds()>
   11e88:	460a      	mov	r2, r1
   11e8a:	4601      	mov	r1, r0
   11e8c:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11e90:	eb13 0b01 	adds.w	fp, r3, r1
   11e94:	eb44 0c02 	adc.w	ip, r4, r2
   11e98:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   11e9c:	2301      	movs	r3, #1
   11e9e:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   11ea0:	f7fe fbe4 	bl	1066c <Milliseconds()>
   11ea4:	460a      	mov	r2, r1
   11ea6:	4601      	mov	r1, r0
   11ea8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   11eac:	42a2      	cmp	r2, r4
   11eae:	bf08      	it	eq
   11eb0:	4299      	cmpeq	r1, r3
   11eb2:	bf34      	ite	cc
   11eb4:	2301      	movcc	r3, #1
   11eb6:	2300      	movcs	r3, #0
   11eb8:	b2db      	uxtb	r3, r3
   11eba:	2b00      	cmp	r3, #0
   11ebc:	d008      	beq.n	11ed0 <Uart::Send(unsigned char)+0xc0>
    if (is_done())
   11ebe:	ab03      	add	r3, sp, #12
   11ec0:	4618      	mov	r0, r3
   11ec2:	f7ff ff7f 	bl	11dc4 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   11ec6:	4603      	mov	r3, r0
   11ec8:	2b00      	cmp	r3, #0
   11eca:	d0e9      	beq.n	11ea0 <Uart::Send(unsigned char)+0x90>
      status = Status::kSuccess;
   11ecc:	2300      	movs	r3, #0
   11ece:	9305      	str	r3, [sp, #20]
   11ed0:	462b      	mov	r3, r5
   11ed2:	4619      	mov	r1, r3
   11ed4:	4807      	ldr	r0, [pc, #28]	; (11ef4 <Uart::Send(unsigned char)+0xe4>)
   11ed6:	f001 f829 	bl	12f2c <__cyg_profile_func_exit>
   11eda:	462b      	mov	r3, r5
   11edc:	4619      	mov	r1, r3
   11ede:	4803      	ldr	r0, [pc, #12]	; (11eec <Uart::Send(unsigned char)+0xdc>)
   11ee0:	f001 f824 	bl	12f2c <__cyg_profile_func_exit>
    Wait(kMaxWait, wait_for_transfer_to_finish);
  }
   11ee4:	bf00      	nop
   11ee6:	b00a      	add	sp, #40	; 0x28
   11ee8:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   11eec:	00011e11 	.word	0x00011e11
   11ef0:	10000024 	.word	0x10000024
   11ef4:	0001270d 	.word	0x0001270d

00011ef8 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>:

  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
  {
    uint8_t receiver   = '\xFF';
    auto byte_recieved = [this]() -> bool {
   11ef8:	b530      	push	{r4, r5, lr}
   11efa:	b083      	sub	sp, #12
   11efc:	4675      	mov	r5, lr
   11efe:	9001      	str	r0, [sp, #4]
   11f00:	462b      	mov	r3, r5
   11f02:	4619      	mov	r1, r3
   11f04:	480d      	ldr	r0, [pc, #52]	; (11f3c <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   11f06:	f000 fffd 	bl	12f04 <__cyg_profile_func_enter>
   11f0a:	9b01      	ldr	r3, [sp, #4]
   11f0c:	681b      	ldr	r3, [r3, #0]
      return (uart[channel_]->LSR & (1 << 0));
   11f0e:	7a1b      	ldrb	r3, [r3, #8]
   11f10:	461a      	mov	r2, r3
   11f12:	4b0b      	ldr	r3, [pc, #44]	; (11f40 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x48>)
   11f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11f18:	7d1b      	ldrb	r3, [r3, #20]
   11f1a:	b2db      	uxtb	r3, r3
   11f1c:	f003 0301 	and.w	r3, r3, #1
   11f20:	2b00      	cmp	r3, #0
   11f22:	bf14      	ite	ne
   11f24:	2301      	movne	r3, #1
   11f26:	2300      	moveq	r3, #0
   11f28:	b2dc      	uxtb	r4, r3
   11f2a:	462b      	mov	r3, r5
   11f2c:	4619      	mov	r1, r3
   11f2e:	4803      	ldr	r0, [pc, #12]	; (11f3c <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const+0x44>)
   11f30:	f000 fffc 	bl	12f2c <__cyg_profile_func_exit>
   11f34:	4623      	mov	r3, r4
    };
   11f36:	4618      	mov	r0, r3
   11f38:	b003      	add	sp, #12
   11f3a:	bd30      	pop	{r4, r5, pc}
   11f3c:	00011ef9 	.word	0x00011ef9
   11f40:	10000024 	.word	0x10000024

00011f44 <Uart::Receive(unsigned long)>:
  uint8_t Receive([[maybe_unused]] uint32_t timeout = 0x7FFFFFFF) override
   11f44:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   11f48:	b08c      	sub	sp, #48	; 0x30
   11f4a:	4675      	mov	r5, lr
   11f4c:	9001      	str	r0, [sp, #4]
   11f4e:	9100      	str	r1, [sp, #0]
   11f50:	462b      	mov	r3, r5
   11f52:	4619      	mov	r1, r3
   11f54:	4836      	ldr	r0, [pc, #216]	; (12030 <Uart::Receive(unsigned long)+0xec>)
   11f56:	f000 ffd5 	bl	12f04 <__cyg_profile_func_enter>
    uint8_t receiver   = '\xFF';
   11f5a:	23ff      	movs	r3, #255	; 0xff
   11f5c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    };
   11f60:	9b01      	ldr	r3, [sp, #4]
   11f62:	9304      	str	r3, [sp, #16]

    Status status = Wait(timeout, byte_recieved);
   11f64:	9b00      	ldr	r3, [sp, #0]
   11f66:	f04f 0400 	mov.w	r4, #0
   11f6a:	e9cd 3408 	strd	r3, r4, [sp, #32]
   11f6e:	9b04      	ldr	r3, [sp, #16]
   11f70:	9303      	str	r3, [sp, #12]
   11f72:	462b      	mov	r3, r5
   11f74:	4619      	mov	r1, r3
   11f76:	482f      	ldr	r0, [pc, #188]	; (12034 <Uart::Receive(unsigned long)+0xf0>)
   11f78:	f000 ffc4 	bl	12f04 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   11f7c:	f04f 0300 	mov.w	r3, #0
   11f80:	f04f 0400 	mov.w	r4, #0
   11f84:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   11f88:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11f8c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   11f90:	bf08      	it	eq
   11f92:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   11f96:	d106      	bne.n	11fa6 <Uart::Receive(unsigned long)+0x62>
    timeout_time = kMaxWait;
   11f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11f9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11fa0:	e9cd 3406 	strd	r3, r4, [sp, #24]
   11fa4:	e00b      	b.n	11fbe <Uart::Receive(unsigned long)+0x7a>
    timeout_time = Milliseconds() + timeout;
   11fa6:	f7fe fb61 	bl	1066c <Milliseconds()>
   11faa:	460a      	mov	r2, r1
   11fac:	4601      	mov	r1, r0
   11fae:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   11fb2:	eb13 0b01 	adds.w	fp, r3, r1
   11fb6:	eb44 0c02 	adc.w	ip, r4, r2
   11fba:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   11fbe:	2301      	movs	r3, #1
   11fc0:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   11fc2:	f7fe fb53 	bl	1066c <Milliseconds()>
   11fc6:	460a      	mov	r2, r1
   11fc8:	4601      	mov	r1, r0
   11fca:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   11fce:	42a2      	cmp	r2, r4
   11fd0:	bf08      	it	eq
   11fd2:	4299      	cmpeq	r1, r3
   11fd4:	bf34      	ite	cc
   11fd6:	2301      	movcc	r3, #1
   11fd8:	2300      	movcs	r3, #0
   11fda:	b2db      	uxtb	r3, r3
   11fdc:	2b00      	cmp	r3, #0
   11fde:	d008      	beq.n	11ff2 <Uart::Receive(unsigned long)+0xae>
    if (is_done())
   11fe0:	ab03      	add	r3, sp, #12
   11fe2:	4618      	mov	r0, r3
   11fe4:	f7ff ff88 	bl	11ef8 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   11fe8:	4603      	mov	r3, r0
   11fea:	2b00      	cmp	r3, #0
   11fec:	d0e9      	beq.n	11fc2 <Uart::Receive(unsigned long)+0x7e>
      status = Status::kSuccess;
   11fee:	2300      	movs	r3, #0
   11ff0:	9305      	str	r3, [sp, #20]
  return status;
   11ff2:	9c05      	ldr	r4, [sp, #20]
   11ff4:	462b      	mov	r3, r5
   11ff6:	4619      	mov	r1, r3
   11ff8:	480e      	ldr	r0, [pc, #56]	; (12034 <Uart::Receive(unsigned long)+0xf0>)
   11ffa:	f000 ff97 	bl	12f2c <__cyg_profile_func_exit>
   11ffe:	940a      	str	r4, [sp, #40]	; 0x28

    if (status == Status::kSuccess)
   12000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12002:	2b00      	cmp	r3, #0
   12004:	d108      	bne.n	12018 <Uart::Receive(unsigned long)+0xd4>
    {
      receiver = static_cast<uint8_t>(uart[channel_]->RBR);
   12006:	9b01      	ldr	r3, [sp, #4]
   12008:	7a1b      	ldrb	r3, [r3, #8]
   1200a:	461a      	mov	r2, r3
   1200c:	4b0a      	ldr	r3, [pc, #40]	; (12038 <Uart::Receive(unsigned long)+0xf4>)
   1200e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12012:	781b      	ldrb	r3, [r3, #0]
   12014:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    }
    return receiver;
   12018:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
   1201c:	462b      	mov	r3, r5
   1201e:	4619      	mov	r1, r3
   12020:	4803      	ldr	r0, [pc, #12]	; (12030 <Uart::Receive(unsigned long)+0xec>)
   12022:	f000 ff83 	bl	12f2c <__cyg_profile_func_exit>
   12026:	4623      	mov	r3, r4
  }
   12028:	4618      	mov	r0, r3
   1202a:	b00c      	add	sp, #48	; 0x30
   1202c:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   12030:	00011f45 	.word	0x00011f45
   12034:	000127b5 	.word	0x000127b5
   12038:	10000024 	.word	0x10000024

0001203c <Uart::FindClosestFractional(float)>:

 private:
  UartCalibration_t FindClosestFractional(float decimal)
   1203c:	b510      	push	{r4, lr}
   1203e:	b08a      	sub	sp, #40	; 0x28
   12040:	4674      	mov	r4, lr
   12042:	9003      	str	r0, [sp, #12]
   12044:	9102      	str	r1, [sp, #8]
   12046:	ed8d 0a01 	vstr	s0, [sp, #4]
   1204a:	4623      	mov	r3, r4
   1204c:	4619      	mov	r1, r3
   1204e:	4838      	ldr	r0, [pc, #224]	; (12130 <Uart::FindClosestFractional(float)+0xf4>)
   12050:	f000 ff58 	bl	12f04 <__cyg_profile_func_enter>
  {
    UartCalibration_t result;
   12054:	9b03      	ldr	r3, [sp, #12]
   12056:	2200      	movs	r2, #0
   12058:	601a      	str	r2, [r3, #0]
   1205a:	9b03      	ldr	r3, [sp, #12]
   1205c:	2200      	movs	r2, #0
   1205e:	605a      	str	r2, [r3, #4]
   12060:	9b03      	ldr	r3, [sp, #12]
   12062:	2201      	movs	r2, #1
   12064:	609a      	str	r2, [r3, #8]
    bool finished = false;
   12066:	2300      	movs	r3, #0
   12068:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (int div = 0; div < 15 && !finished; div++)
   1206c:	2300      	movs	r3, #0
   1206e:	9308      	str	r3, [sp, #32]
   12070:	9b08      	ldr	r3, [sp, #32]
   12072:	2b0e      	cmp	r3, #14
   12074:	dc52      	bgt.n	1211c <Uart::FindClosestFractional(float)+0xe0>
   12076:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1207a:	2b00      	cmp	r3, #0
   1207c:	d14e      	bne.n	1211c <Uart::FindClosestFractional(float)+0xe0>
    {
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   1207e:	9b08      	ldr	r3, [sp, #32]
   12080:	3301      	adds	r3, #1
   12082:	9307      	str	r3, [sp, #28]
   12084:	9b07      	ldr	r3, [sp, #28]
   12086:	2b0e      	cmp	r3, #14
   12088:	dc44      	bgt.n	12114 <Uart::FindClosestFractional(float)+0xd8>
   1208a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1208e:	2b00      	cmp	r3, #0
   12090:	d140      	bne.n	12114 <Uart::FindClosestFractional(float)+0xd8>
      {
        float divf         = static_cast<float>(div);
   12092:	9b08      	ldr	r3, [sp, #32]
   12094:	ee07 3a90 	vmov	s15, r3
   12098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1209c:	edcd 7a06 	vstr	s15, [sp, #24]
        float mulf         = static_cast<float>(mul);
   120a0:	9b07      	ldr	r3, [sp, #28]
   120a2:	ee07 3a90 	vmov	s15, r3
   120a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   120aa:	edcd 7a05 	vstr	s15, [sp, #20]
        float test_decimal = 1.0f + divf / mulf;
   120ae:	eddd 6a06 	vldr	s13, [sp, #24]
   120b2:	ed9d 7a05 	vldr	s14, [sp, #20]
   120b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
   120ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   120be:	ee77 7a87 	vadd.f32	s15, s15, s14
   120c2:	edcd 7a04 	vstr	s15, [sp, #16]
        if (decimal <= test_decimal + kThreshold &&
   120c6:	eddd 7a04 	vldr	s15, [sp, #16]
   120ca:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 12134 <Uart::FindClosestFractional(float)+0xf8>
   120ce:	ee77 7a87 	vadd.f32	s15, s15, s14
   120d2:	ed9d 7a01 	vldr	s14, [sp, #4]
   120d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   120da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   120de:	d815      	bhi.n	1210c <Uart::FindClosestFractional(float)+0xd0>
            decimal >= test_decimal - kThreshold)
   120e0:	eddd 7a04 	vldr	s15, [sp, #16]
   120e4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 12134 <Uart::FindClosestFractional(float)+0xf8>
   120e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (decimal <= test_decimal + kThreshold &&
   120ec:	ed9d 7a01 	vldr	s14, [sp, #4]
   120f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
   120f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   120f8:	db08      	blt.n	1210c <Uart::FindClosestFractional(float)+0xd0>
        {
          result.divide_add = div;
   120fa:	9a08      	ldr	r2, [sp, #32]
   120fc:	9b03      	ldr	r3, [sp, #12]
   120fe:	605a      	str	r2, [r3, #4]
          result.multiply   = mul;
   12100:	9a07      	ldr	r2, [sp, #28]
   12102:	9b03      	ldr	r3, [sp, #12]
   12104:	609a      	str	r2, [r3, #8]
          finished          = true;
   12106:	2301      	movs	r3, #1
   12108:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      for (int mul = div + 1; mul < 15 && !finished; mul++)
   1210c:	9b07      	ldr	r3, [sp, #28]
   1210e:	3301      	adds	r3, #1
   12110:	9307      	str	r3, [sp, #28]
   12112:	e7b7      	b.n	12084 <Uart::FindClosestFractional(float)+0x48>
    for (int div = 0; div < 15 && !finished; div++)
   12114:	9b08      	ldr	r3, [sp, #32]
   12116:	3301      	adds	r3, #1
   12118:	9308      	str	r3, [sp, #32]
   1211a:	e7a9      	b.n	12070 <Uart::FindClosestFractional(float)+0x34>
        }
      }
    }
    return result;
   1211c:	bf00      	nop
   1211e:	4623      	mov	r3, r4
   12120:	4619      	mov	r1, r3
   12122:	4803      	ldr	r0, [pc, #12]	; (12130 <Uart::FindClosestFractional(float)+0xf4>)
   12124:	f000 ff02 	bl	12f2c <__cyg_profile_func_exit>
   12128:	bf00      	nop
  }
   1212a:	9803      	ldr	r0, [sp, #12]
   1212c:	b00a      	add	sp, #40	; 0x28
   1212e:	bd10      	pop	{r4, pc}
   12130:	0001203d 	.word	0x0001203d
   12134:	3d4ccccd 	.word	0x3d4ccccd

00012138 <Uart::DividerEstimate(float, float)>:

  float DividerEstimate(float baud_rate, float fraction_estimate = 1)
   12138:	b510      	push	{r4, lr}
   1213a:	ed2d 8b02 	vpush	{d8}
   1213e:	b086      	sub	sp, #24
   12140:	4674      	mov	r4, lr
   12142:	9003      	str	r0, [sp, #12]
   12144:	ed8d 0a02 	vstr	s0, [sp, #8]
   12148:	edcd 0a01 	vstr	s1, [sp, #4]
   1214c:	4623      	mov	r3, r4
   1214e:	4619      	mov	r1, r3
   12150:	4815      	ldr	r0, [pc, #84]	; (121a8 <Uart::DividerEstimate(float, float)+0x70>)
   12152:	f000 fed7 	bl	12f04 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   12156:	9b03      	ldr	r3, [sp, #12]
   12158:	1d1a      	adds	r2, r3, #4
   1215a:	9b03      	ldr	r3, [sp, #12]
   1215c:	685b      	ldr	r3, [r3, #4]
   1215e:	3310      	adds	r3, #16
   12160:	681b      	ldr	r3, [r3, #0]
   12162:	4610      	mov	r0, r2
   12164:	4798      	blx	r3
   12166:	ee07 0a90 	vmov	s15, r0
   1216a:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1216e:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * fraction_estimate);
   12172:	eddd 7a02 	vldr	s15, [sp, #8]
   12176:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   1217a:	ee27 7a87 	vmul.f32	s14, s15, s14
   1217e:	eddd 7a01 	vldr	s15, [sp, #4]
   12182:	ee67 7a27 	vmul.f32	s15, s14, s15
   12186:	ed9d 7a05 	vldr	s14, [sp, #20]
   1218a:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1218e:	4623      	mov	r3, r4
   12190:	4619      	mov	r1, r3
   12192:	4805      	ldr	r0, [pc, #20]	; (121a8 <Uart::DividerEstimate(float, float)+0x70>)
   12194:	f000 feca 	bl	12f2c <__cyg_profile_func_exit>
   12198:	eef0 7a48 	vmov.f32	s15, s16
  }
   1219c:	eeb0 0a67 	vmov.f32	s0, s15
   121a0:	b006      	add	sp, #24
   121a2:	ecbd 8b02 	vpop	{d8}
   121a6:	bd10      	pop	{r4, pc}
   121a8:	00012139 	.word	0x00012139

000121ac <Uart::FractionalEstimate(float, float)>:

  float FractionalEstimate(float baud_rate, float divider)
   121ac:	b510      	push	{r4, lr}
   121ae:	ed2d 8b02 	vpush	{d8}
   121b2:	b086      	sub	sp, #24
   121b4:	4674      	mov	r4, lr
   121b6:	9003      	str	r0, [sp, #12]
   121b8:	ed8d 0a02 	vstr	s0, [sp, #8]
   121bc:	edcd 0a01 	vstr	s1, [sp, #4]
   121c0:	4623      	mov	r3, r4
   121c2:	4619      	mov	r1, r3
   121c4:	4815      	ldr	r0, [pc, #84]	; (1221c <Uart::FractionalEstimate(float, float)+0x70>)
   121c6:	f000 fe9d 	bl	12f04 <__cyg_profile_func_enter>
  {
    float clock_frequency = static_cast<float>(GetPeripheralFrequency());
   121ca:	9b03      	ldr	r3, [sp, #12]
   121cc:	1d1a      	adds	r2, r3, #4
   121ce:	9b03      	ldr	r3, [sp, #12]
   121d0:	685b      	ldr	r3, [r3, #4]
   121d2:	3310      	adds	r3, #16
   121d4:	681b      	ldr	r3, [r3, #0]
   121d6:	4610      	mov	r0, r2
   121d8:	4798      	blx	r3
   121da:	ee07 0a90 	vmov	s15, r0
   121de:	eef8 7a67 	vcvt.f32.u32	s15, s15
   121e2:	edcd 7a05 	vstr	s15, [sp, #20]
    return clock_frequency / (16.0f * baud_rate * divider);
   121e6:	eddd 7a02 	vldr	s15, [sp, #8]
   121ea:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
   121ee:	ee27 7a87 	vmul.f32	s14, s15, s14
   121f2:	eddd 7a01 	vldr	s15, [sp, #4]
   121f6:	ee67 7a27 	vmul.f32	s15, s14, s15
   121fa:	ed9d 7a05 	vldr	s14, [sp, #20]
   121fe:	ee87 8a27 	vdiv.f32	s16, s14, s15
   12202:	4623      	mov	r3, r4
   12204:	4619      	mov	r1, r3
   12206:	4805      	ldr	r0, [pc, #20]	; (1221c <Uart::FractionalEstimate(float, float)+0x70>)
   12208:	f000 fe90 	bl	12f2c <__cyg_profile_func_exit>
   1220c:	eef0 7a48 	vmov.f32	s15, s16
  }
   12210:	eeb0 0a67 	vmov.f32	s0, s15
   12214:	b006      	add	sp, #24
   12216:	ecbd 8b02 	vpop	{d8}
   1221a:	bd10      	pop	{r4, pc}
   1221c:	000121ad 	.word	0x000121ad

00012220 <Uart::IsDecmial(float)>:

  bool IsDecmial(float value)
   12220:	b530      	push	{r4, r5, lr}
   12222:	b087      	sub	sp, #28
   12224:	4675      	mov	r5, lr
   12226:	9001      	str	r0, [sp, #4]
   12228:	ed8d 0a00 	vstr	s0, [sp]
   1222c:	462b      	mov	r3, r5
   1222e:	4619      	mov	r1, r3
   12230:	4819      	ldr	r0, [pc, #100]	; (12298 <Uart::IsDecmial(float)+0x78>)
   12232:	f000 fe67 	bl	12f04 <__cyg_profile_func_enter>
  {
    bool result         = false;
   12236:	2300      	movs	r3, #0
   12238:	f88d 3017 	strb.w	r3, [sp, #23]
    float rounded_value = roundf(value);
   1223c:	ed9d 0a00 	vldr	s0, [sp]
   12240:	f004 fe40 	bl	16ec4 <roundf>
   12244:	ed8d 0a04 	vstr	s0, [sp, #16]
    float error         = value - rounded_value;
   12248:	ed9d 7a00 	vldr	s14, [sp]
   1224c:	eddd 7a04 	vldr	s15, [sp, #16]
   12250:	ee77 7a67 	vsub.f32	s15, s14, s15
   12254:	edcd 7a03 	vstr	s15, [sp, #12]
    if (-kThreshold <= error && error <= kThreshold)
   12258:	eddd 7a03 	vldr	s15, [sp, #12]
   1225c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 1229c <Uart::IsDecmial(float)+0x7c>
   12260:	eef4 7ac7 	vcmpe.f32	s15, s14
   12264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12268:	db0b      	blt.n	12282 <Uart::IsDecmial(float)+0x62>
   1226a:	eddd 7a03 	vldr	s15, [sp, #12]
   1226e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 122a0 <Uart::IsDecmial(float)+0x80>
   12272:	eef4 7ac7 	vcmpe.f32	s15, s14
   12276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1227a:	d802      	bhi.n	12282 <Uart::IsDecmial(float)+0x62>
    {
      result = true;
   1227c:	2301      	movs	r3, #1
   1227e:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return result;
   12282:	f89d 4017 	ldrb.w	r4, [sp, #23]
   12286:	462b      	mov	r3, r5
   12288:	4619      	mov	r1, r3
   1228a:	4803      	ldr	r0, [pc, #12]	; (12298 <Uart::IsDecmial(float)+0x78>)
   1228c:	f000 fe4e 	bl	12f2c <__cyg_profile_func_exit>
   12290:	4623      	mov	r3, r4
  }
   12292:	4618      	mov	r0, r3
   12294:	b007      	add	sp, #28
   12296:	bd30      	pop	{r4, r5, pc}
   12298:	00012221 	.word	0x00012221
   1229c:	bd4ccccd 	.word	0xbd4ccccd
   122a0:	3d4ccccd 	.word	0x3d4ccccd

000122a4 <Uart::GenerateUartCalibration(float)>:

  UartCalibration_t GenerateUartCalibration(float baud_rate)
   122a4:	b530      	push	{r4, r5, lr}
   122a6:	b08f      	sub	sp, #60	; 0x3c
   122a8:	4675      	mov	r5, lr
   122aa:	9007      	str	r0, [sp, #28]
   122ac:	9106      	str	r1, [sp, #24]
   122ae:	ed8d 0a05 	vstr	s0, [sp, #20]
   122b2:	462b      	mov	r3, r5
   122b4:	4619      	mov	r1, r3
   122b6:	4874      	ldr	r0, [pc, #464]	; (12488 <Uart::GenerateUartCalibration(float)+0x1e4>)
   122b8:	f000 fe24 	bl	12f04 <__cyg_profile_func_enter>
  {
    States state = States::kCalculateIntegerDivideLatch;
   122bc:	2300      	movs	r3, #0
   122be:	930d      	str	r3, [sp, #52]	; 0x34
    UartCalibration_t uart_calibration;
   122c0:	9b07      	ldr	r3, [sp, #28]
   122c2:	2200      	movs	r2, #0
   122c4:	601a      	str	r2, [r3, #0]
   122c6:	9b07      	ldr	r3, [sp, #28]
   122c8:	2200      	movs	r2, #0
   122ca:	605a      	str	r2, [r3, #4]
   122cc:	9b07      	ldr	r3, [sp, #28]
   122ce:	2201      	movs	r2, #1
   122d0:	609a      	str	r2, [r3, #8]
    float divide_estimate = 0;
   122d2:	f04f 0300 	mov.w	r3, #0
   122d6:	930c      	str	r3, [sp, #48]	; 0x30
    float decimal         = 1.5;
   122d8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   122dc:	930b      	str	r3, [sp, #44]	; 0x2c
    float div             = 1;
   122de:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   122e2:	930a      	str	r3, [sp, #40]	; 0x28
    float mul             = 2;
   122e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   122e8:	9309      	str	r3, [sp, #36]	; 0x24
    while (state != States::kDone)
   122ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   122ec:	2b04      	cmp	r3, #4
   122ee:	f000 80c1 	beq.w	12474 <Uart::GenerateUartCalibration(float)+0x1d0>
    {
      switch (state)
   122f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   122f4:	2b04      	cmp	r3, #4
   122f6:	f200 80bb 	bhi.w	12470 <Uart::GenerateUartCalibration(float)+0x1cc>
   122fa:	a201      	add	r2, pc, #4	; (adr r2, 12300 <Uart::GenerateUartCalibration(float)+0x5c>)
   122fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12300:	00012315 	.word	0x00012315
   12304:	00012371 	.word	0x00012371
   12308:	000123d1 	.word	0x000123d1
   1230c:	00012441 	.word	0x00012441
   12310:	00012471 	.word	0x00012471
      {
        case States::kCalculateIntegerDivideLatch:
        {
          divide_estimate = DividerEstimate(baud_rate);
   12314:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   12318:	ed9d 0a05 	vldr	s0, [sp, #20]
   1231c:	9806      	ldr	r0, [sp, #24]
   1231e:	f7ff ff0b 	bl	12138 <Uart::DividerEstimate(float, float)>
   12322:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          if (divide_estimate < 1.0f)
   12326:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   1232a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1232e:	eef4 7ac7 	vcmpe.f32	s15, s14
   12332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12336:	d505      	bpl.n	12344 <Uart::GenerateUartCalibration(float)+0xa0>
          {
            uart_calibration.divide_latch = 0;
   12338:	9b07      	ldr	r3, [sp, #28]
   1233a:	2200      	movs	r2, #0
   1233c:	601a      	str	r2, [r3, #0]
            state                         = States::kDone;
   1233e:	2304      	movs	r3, #4
   12340:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kCalculateDivideLatchWithDecimal;
          }
          break;
   12342:	e096      	b.n	12472 <Uart::GenerateUartCalibration(float)+0x1ce>
          else if (IsDecmial(divide_estimate))
   12344:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
   12348:	9806      	ldr	r0, [sp, #24]
   1234a:	f7ff ff69 	bl	12220 <Uart::IsDecmial(float)>
   1234e:	4603      	mov	r3, r0
   12350:	2b00      	cmp	r3, #0
   12352:	d00a      	beq.n	1236a <Uart::GenerateUartCalibration(float)+0xc6>
                static_cast<uint32_t>(divide_estimate);
   12354:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   12358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1235c:	ee17 2a90 	vmov	r2, s15
            uart_calibration.divide_latch =
   12360:	9b07      	ldr	r3, [sp, #28]
   12362:	601a      	str	r2, [r3, #0]
            state = States::kDone;
   12364:	2304      	movs	r3, #4
   12366:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   12368:	e083      	b.n	12472 <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kCalculateDivideLatchWithDecimal;
   1236a:	2301      	movs	r3, #1
   1236c:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1236e:	e080      	b.n	12472 <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kCalculateDivideLatchWithDecimal:
        {
          divide_estimate = roundf(DividerEstimate(baud_rate, decimal));
   12370:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
   12374:	ed9d 0a05 	vldr	s0, [sp, #20]
   12378:	9806      	ldr	r0, [sp, #24]
   1237a:	f7ff fedd 	bl	12138 <Uart::DividerEstimate(float, float)>
   1237e:	eef0 7a40 	vmov.f32	s15, s0
   12382:	eeb0 0a67 	vmov.f32	s0, s15
   12386:	f004 fd9d 	bl	16ec4 <roundf>
   1238a:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
          decimal         = FractionalEstimate(baud_rate, divide_estimate);
   1238e:	eddd 0a0c 	vldr	s1, [sp, #48]	; 0x30
   12392:	ed9d 0a05 	vldr	s0, [sp, #20]
   12396:	9806      	ldr	r0, [sp, #24]
   12398:	f7ff ff08 	bl	121ac <Uart::FractionalEstimate(float, float)>
   1239c:	ed8d 0a0b 	vstr	s0, [sp, #44]	; 0x2c
          if (1.1f <= decimal && decimal <= 1.9f)
   123a0:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   123a4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 1248c <Uart::GenerateUartCalibration(float)+0x1e8>
   123a8:	eef4 7ac7 	vcmpe.f32	s15, s14
   123ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   123b0:	db0b      	blt.n	123ca <Uart::GenerateUartCalibration(float)+0x126>
   123b2:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
   123b6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 12490 <Uart::GenerateUartCalibration(float)+0x1ec>
   123ba:	eef4 7ac7 	vcmpe.f32	s15, s14
   123be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   123c2:	d802      	bhi.n	123ca <Uart::GenerateUartCalibration(float)+0x126>
          {
            state = States::kGenerateFractionFromDecimal;
   123c4:	2303      	movs	r3, #3
   123c6:	930d      	str	r3, [sp, #52]	; 0x34
          }
          else
          {
            state = States::kDecimalFailedGenerateNewDecimal;
          }
          break;
   123c8:	e053      	b.n	12472 <Uart::GenerateUartCalibration(float)+0x1ce>
            state = States::kDecimalFailedGenerateNewDecimal;
   123ca:	2302      	movs	r3, #2
   123cc:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   123ce:	e050      	b.n	12472 <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDecimalFailedGenerateNewDecimal:
        {
          mul += 1;
   123d0:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   123d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   123d8:	ee77 7a87 	vadd.f32	s15, s15, s14
   123dc:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24

          if (div > 15)
   123e0:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   123e4:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   123e8:	eef4 7ac7 	vcmpe.f32	s15, s14
   123ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   123f0:	dd02      	ble.n	123f8 <Uart::GenerateUartCalibration(float)+0x154>
          {
            state = States::kDone;
   123f2:	2304      	movs	r3, #4
   123f4:	930d      	str	r3, [sp, #52]	; 0x34
            break;
   123f6:	e03c      	b.n	12472 <Uart::GenerateUartCalibration(float)+0x1ce>
          }
          else if (mul > 15)
   123f8:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
   123fc:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
   12400:	eef4 7ac7 	vcmpe.f32	s15, s14
   12404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12408:	dd0f      	ble.n	1242a <Uart::GenerateUartCalibration(float)+0x186>
          {
            div += 1;
   1240a:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   1240e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   12412:	ee77 7a87 	vadd.f32	s15, s15, s14
   12416:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
            mul = div + 1;
   1241a:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
   1241e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   12422:	ee77 7a87 	vadd.f32	s15, s15, s14
   12426:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
          }
          decimal = div / mul;
   1242a:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
   1242e:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
   12432:	eec6 7a87 	vdiv.f32	s15, s13, s14
   12436:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
          state   = States::kCalculateDivideLatchWithDecimal;
   1243a:	2301      	movs	r3, #1
   1243c:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1243e:	e018      	b.n	12472 <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kGenerateFractionFromDecimal:
        {
          uart_calibration = FindClosestFractional(decimal);
   12440:	9c07      	ldr	r4, [sp, #28]
   12442:	466b      	mov	r3, sp
   12444:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   12448:	9906      	ldr	r1, [sp, #24]
   1244a:	4618      	mov	r0, r3
   1244c:	f7ff fdf6 	bl	1203c <Uart::FindClosestFractional(float)>
   12450:	466b      	mov	r3, sp
   12452:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12456:	e884 0007 	stmia.w	r4, {r0, r1, r2}
          uart_calibration.divide_latch =
              static_cast<uint32_t>(divide_estimate);
   1245a:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
   1245e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   12462:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
   12466:	9b07      	ldr	r3, [sp, #28]
   12468:	601a      	str	r2, [r3, #0]
          state = States::kDone;
   1246a:	2304      	movs	r3, #4
   1246c:	930d      	str	r3, [sp, #52]	; 0x34
          break;
   1246e:	e000      	b.n	12472 <Uart::GenerateUartCalibration(float)+0x1ce>
        }
        case States::kDone: { break;
        }
        default: { break;
   12470:	bf00      	nop
    while (state != States::kDone)
   12472:	e73a      	b.n	122ea <Uart::GenerateUartCalibration(float)+0x46>
        }
      }
    }
    return uart_calibration;
   12474:	bf00      	nop
   12476:	462b      	mov	r3, r5
   12478:	4619      	mov	r1, r3
   1247a:	4803      	ldr	r0, [pc, #12]	; (12488 <Uart::GenerateUartCalibration(float)+0x1e4>)
   1247c:	f000 fd56 	bl	12f2c <__cyg_profile_func_exit>
   12480:	bf00      	nop
  }
   12482:	9807      	ldr	r0, [sp, #28]
   12484:	b00f      	add	sp, #60	; 0x3c
   12486:	bd30      	pop	{r4, r5, pc}
   12488:	000122a5 	.word	0x000122a5
   1248c:	3f8ccccd 	.word	0x3f8ccccd
   12490:	3ff33333 	.word	0x3ff33333

00012494 <(anonymous namespace)::Lpc40xxUptime()>:
{
   12494:	b538      	push	{r3, r4, r5, lr}
   12496:	4675      	mov	r5, lr
   12498:	462b      	mov	r3, r5
   1249a:	4619      	mov	r1, r3
   1249c:	480a      	ldr	r0, [pc, #40]	; (124c8 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   1249e:	f000 fd31 	bl	12f04 <__cyg_profile_func_enter>
    return tim_register[channel_]->TC;
   124a2:	4b0a      	ldr	r3, [pc, #40]	; (124cc <(anonymous namespace)::Lpc40xxUptime()+0x38>)
   124a4:	7a1b      	ldrb	r3, [r3, #8]
   124a6:	461a      	mov	r2, r3
   124a8:	4b09      	ldr	r3, [pc, #36]	; (124d0 <(anonymous namespace)::Lpc40xxUptime()+0x3c>)
   124aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   124ae:	689c      	ldr	r4, [r3, #8]
   124b0:	462b      	mov	r3, r5
   124b2:	4619      	mov	r1, r3
   124b4:	4804      	ldr	r0, [pc, #16]	; (124c8 <(anonymous namespace)::Lpc40xxUptime()+0x34>)
   124b6:	f000 fd39 	bl	12f2c <__cyg_profile_func_exit>
  return timer0.GetTimer();
   124ba:	4623      	mov	r3, r4
   124bc:	f04f 0400 	mov.w	r4, #0
}
   124c0:	4618      	mov	r0, r3
   124c2:	4621      	mov	r1, r4
   124c4:	bd38      	pop	{r3, r4, r5, pc}
   124c6:	bf00      	nop
   124c8:	00011bd9 	.word	0x00011bd9
   124cc:	10000094 	.word	0x10000094
   124d0:	10000014 	.word	0x10000014

000124d4 <UptimeRTOS>:
{
   124d4:	b538      	push	{r3, r4, r5, lr}
   124d6:	4675      	mov	r5, lr
   124d8:	462b      	mov	r3, r5
   124da:	4619      	mov	r1, r3
   124dc:	480a      	ldr	r0, [pc, #40]	; (12508 <UptimeRTOS+0x34>)
   124de:	f000 fd11 	bl	12f04 <__cyg_profile_func_enter>
   124e2:	4b0a      	ldr	r3, [pc, #40]	; (1250c <UptimeRTOS+0x38>)
   124e4:	7a1b      	ldrb	r3, [r3, #8]
   124e6:	461a      	mov	r2, r3
   124e8:	4b09      	ldr	r3, [pc, #36]	; (12510 <UptimeRTOS+0x3c>)
   124ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   124ee:	689c      	ldr	r4, [r3, #8]
   124f0:	462b      	mov	r3, r5
   124f2:	4619      	mov	r1, r3
   124f4:	4804      	ldr	r0, [pc, #16]	; (12508 <UptimeRTOS+0x34>)
   124f6:	f000 fd19 	bl	12f2c <__cyg_profile_func_exit>
  return timer0.GetTimer();
   124fa:	4623      	mov	r3, r4
   124fc:	f04f 0400 	mov.w	r4, #0
}
   12500:	4618      	mov	r0, r3
   12502:	4621      	mov	r1, r4
   12504:	bd38      	pop	{r3, r4, r5, pc}
   12506:	bf00      	nop
   12508:	00011bd9 	.word	0x00011bd9
   1250c:	10000094 	.word	0x10000094
   12510:	10000014 	.word	0x10000014

00012514 <LowLevelInit()>:

void LowLevelInit()
{
   12514:	b500      	push	{lr}
   12516:	b083      	sub	sp, #12
  // Set the SystemTick frequency to the RTOS tick frequency
  // It is critical that this happens before you set the system_clock, since
  // The system_timer keeps the time that the system_clock uses to delay itself.
  system_timer.SetTickFrequency(config::kRtosFrequency);
   12518:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1251c:	4822      	ldr	r0, [pc, #136]	; (125a8 <LowLevelInit()+0x94>)
   1251e:	f7fe fecb 	bl	112b8 <SystemTimer::SetTickFrequency(unsigned long)>
  bool timer_started_successfully = system_timer.StartTimer();
   12522:	4821      	ldr	r0, [pc, #132]	; (125a8 <LowLevelInit()+0x94>)
   12524:	f7fe fe7a 	bl	1121c <SystemTimer::StartTimer()>
   12528:	4603      	mov	r3, r0
   1252a:	f88d 3007 	strb.w	r3, [sp, #7]
  SJ2_ASSERT_WARNING(timer_started_successfully,
   1252e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12532:	f083 0301 	eor.w	r3, r3, #1
   12536:	b2db      	uxtb	r3, r3
   12538:	2b00      	cmp	r3, #0
   1253a:	d005      	beq.n	12548 <LowLevelInit()+0x34>
   1253c:	23ad      	movs	r3, #173	; 0xad
   1253e:	4a1b      	ldr	r2, [pc, #108]	; (125ac <LowLevelInit()+0x98>)
   12540:	491b      	ldr	r1, [pc, #108]	; (125b0 <LowLevelInit()+0x9c>)
   12542:	481c      	ldr	r0, [pc, #112]	; (125b4 <LowLevelInit()+0xa0>)
   12544:	f001 ff3e 	bl	143c4 <printf>
                     "System Timer has FAILED to start!");
  // Set Clock Speed
  // SetClockFrequency will timeout return the offset between desire clockspeed
  // and actual clockspeed if the PLL doesn't get a frequency fix within a
  // defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   12548:	2130      	movs	r1, #48	; 0x30
   1254a:	481b      	ldr	r0, [pc, #108]	; (125b8 <LowLevelInit()+0xa4>)
   1254c:	f7fe fb4c 	bl	10be8 <Lpc40xxSystemController::SetClockFrequency(unsigned char)>
   12550:	4603      	mov	r3, r0
   12552:	2b00      	cmp	r3, #0
   12554:	bf14      	ite	ne
   12556:	2301      	movne	r3, #1
   12558:	2300      	moveq	r3, #0
   1255a:	b2db      	uxtb	r3, r3
   1255c:	2b00      	cmp	r3, #0
   1255e:	d001      	beq.n	12564 <LowLevelInit()+0x50>
  {
    // Continually attempt to set the clock frequency to the desired until the
    // delta between desired and actual are 0.
    continue;
   12560:	bf00      	nop
  while (system_controller.SetClockFrequency(config::kSystemClockRateMhz) != 0)
   12562:	e7f1      	b.n	12548 <LowLevelInit()+0x34>
  }
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider(1);
   12564:	2101      	movs	r1, #1
   12566:	4814      	ldr	r0, [pc, #80]	; (125b8 <LowLevelInit()+0xa4>)
   12568:	f7fe fb86 	bl	10c78 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)>
  // Set System Timer frequency again, since the clock speed has changed since
  // the last time we ran this.
  system_timer.DisableTimer();
   1256c:	f7fe fe04 	bl	11178 <SystemTimer::DisableTimer()>
  system_timer.SetTickFrequency(config::kRtosFrequency);
   12570:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12574:	480c      	ldr	r0, [pc, #48]	; (125a8 <LowLevelInit()+0x94>)
   12576:	f7fe fe9f 	bl	112b8 <SystemTimer::SetTickFrequency(unsigned long)>
  system_timer.StartTimer();
   1257a:	480b      	ldr	r0, [pc, #44]	; (125a8 <LowLevelInit()+0x94>)
   1257c:	f7fe fe4e 	bl	1121c <SystemTimer::StartTimer()>
  // Set timer0 to 1 MHz (1,000,000 Hz) so that the timer increments every 1
  // micro second.
  timer0.Initialize(1'000'000);
   12580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12584:	4a0d      	ldr	r2, [pc, #52]	; (125bc <LowLevelInit()+0xa8>)
   12586:	490e      	ldr	r1, [pc, #56]	; (125c0 <LowLevelInit()+0xac>)
   12588:	480e      	ldr	r0, [pc, #56]	; (125c4 <LowLevelInit()+0xb0>)
   1258a:	f7ff f9f7 	bl	1197c <Timer::Initialize(unsigned long, void (*)(), long)>
  SetUptimeFunction(Lpc40xxUptime);
   1258e:	480e      	ldr	r0, [pc, #56]	; (125c8 <LowLevelInit()+0xb4>)
   12590:	f7fe fb12 	bl	10bb8 <SetUptimeFunction(unsigned long long (*)())>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
   12594:	f44f 4116 	mov.w	r1, #38400	; 0x9600
   12598:	480c      	ldr	r0, [pc, #48]	; (125cc <LowLevelInit()+0xb8>)
   1259a:	f7ff fba1 	bl	11ce0 <Uart::Initialize(unsigned long)>
}
   1259e:	bf00      	nop
   125a0:	b003      	add	sp, #12
   125a2:	f85d fb04 	ldr.w	pc, [sp], #4
   125a6:	bf00      	nop
   125a8:	10000088 	.word	0x10000088
   125ac:	00017df0 	.word	0x00017df0
   125b0:	00017b58 	.word	0x00017b58
   125b4:	00017a38 	.word	0x00017a38
   125b8:	10000090 	.word	0x10000090
   125bc:	0001195d 	.word	0x0001195d
   125c0:	000f4240 	.word	0x000f4240
   125c4:	10000094 	.word	0x10000094
   125c8:	00012495 	.word	0x00012495
   125cc:	10000074 	.word	0x10000074

000125d0 <SystemInit>:

void SystemInit()
{
   125d0:	b508      	push	{r3, lr}
  // Transfer data section values from flash to RAM
  InitDataSection();
   125d2:	f7fd fd9b 	bl	1010c <InitDataSection()>
  // Clear BSS section of RAM
  // This is required because the nano implementation of the standard C/C++
  // libraries assumes that the BSS section is initialized to 0.
  InitBssSection();
   125d6:	f7fd fde1 	bl	1019c <InitBssSection()>
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point operations occur without
  // Initializing the FPU.
  InitFpu();
   125da:	f7fd fe0f 	bl	101fc <InitFpu()>
  // Initialisation C++ libraries
  __libc_init_array();
   125de:	f004 fe79 	bl	172d4 <__libc_init_array>
  // Run LowLevel System Initialization
  LowLevelInit();
   125e2:	f7ff ff97 	bl	12514 <LowLevelInit()>
}
   125e6:	bf00      	nop
   125e8:	bd08      	pop	{r3, pc}
   125ea:	Address 0x00000000000125ea is out of bounds.


000125ec <ResetIsr>:
// Sets up a simple runtime environment and initializes the C/C++ library.

extern "C"
{
  void ResetIsr(void)
  {
   125ec:	b580      	push	{r7, lr}
   125ee:	b084      	sub	sp, #16
   125f0:	af00      	add	r7, sp, #0
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
   125f2:	4b09      	ldr	r3, [pc, #36]	; (12618 <ResetIsr+0x2c>)
   125f4:	60fb      	str	r3, [r7, #12]
   125f6:	68fb      	ldr	r3, [r7, #12]
   125f8:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
   125fa:	683b      	ldr	r3, [r7, #0]
   125fc:	f383 8809 	msr	PSP, r3
   12600:	68fb      	ldr	r3, [r7, #12]
   12602:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
   12604:	687b      	ldr	r3, [r7, #4]
   12606:	f383 8808 	msr	MSP, r3
    __set_PSP(kTopOfStack);
    __set_MSP(kTopOfStack);

    SystemInit();
   1260a:	f7ff ffe1 	bl	125d0 <SystemInit>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    [[maybe_unused]] int32_t result = main();
   1260e:	f7fe f8f5 	bl	107fc <main>
   12612:	60b8      	str	r0, [r7, #8]
   12614:	e7fe      	b.n	12614 <ResetIsr+0x28>
   12616:	bf00      	nop
   12618:	10010000 	.word	0x10010000

0001261c <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()>:
  static void TimerHandler()
   1261c:	b510      	push	{r4, lr}
   1261e:	4674      	mov	r4, lr
   12620:	4623      	mov	r3, r4
   12622:	4619      	mov	r1, r3
   12624:	480a      	ldr	r0, [pc, #40]	; (12650 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   12626:	f000 fc6d 	bl	12f04 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   1262a:	2000      	movs	r0, #0
   1262c:	f7ff f97e 	bl	1192c <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   12630:	4603      	mov	r3, r0
   12632:	461a      	mov	r2, r3
   12634:	4b07      	ldr	r3, [pc, #28]	; (12654 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x38>)
   12636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1263a:	4798      	blx	r3
    ClearInterrupts<port>();
   1263c:	f000 f90e 	bl	1285c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>
   12640:	4623      	mov	r3, r4
   12642:	4619      	mov	r1, r3
   12644:	4802      	ldr	r0, [pc, #8]	; (12650 <void Timer::TimerHandler<(TimerInterface::TimerPort)0>()+0x34>)
   12646:	f000 fc71 	bl	12f2c <__cyg_profile_func_exit>
  }
   1264a:	bf00      	nop
   1264c:	bd10      	pop	{r4, pc}
   1264e:	bf00      	nop
   12650:	0001261d 	.word	0x0001261d
   12654:	100002ac 	.word	0x100002ac

00012658 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()>:
  static void TimerHandler()
   12658:	b510      	push	{r4, lr}
   1265a:	4674      	mov	r4, lr
   1265c:	4623      	mov	r3, r4
   1265e:	4619      	mov	r1, r3
   12660:	480a      	ldr	r0, [pc, #40]	; (1268c <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   12662:	f000 fc4f 	bl	12f04 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   12666:	2001      	movs	r0, #1
   12668:	f7ff f960 	bl	1192c <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   1266c:	4603      	mov	r3, r0
   1266e:	461a      	mov	r2, r3
   12670:	4b07      	ldr	r3, [pc, #28]	; (12690 <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x38>)
   12672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12676:	4798      	blx	r3
    ClearInterrupts<port>();
   12678:	f000 f940 	bl	128fc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>
   1267c:	4623      	mov	r3, r4
   1267e:	4619      	mov	r1, r3
   12680:	4802      	ldr	r0, [pc, #8]	; (1268c <void Timer::TimerHandler<(TimerInterface::TimerPort)1>()+0x34>)
   12682:	f000 fc53 	bl	12f2c <__cyg_profile_func_exit>
  }
   12686:	bf00      	nop
   12688:	bd10      	pop	{r4, pc}
   1268a:	bf00      	nop
   1268c:	00012659 	.word	0x00012659
   12690:	100002ac 	.word	0x100002ac

00012694 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()>:
  static void TimerHandler()
   12694:	b510      	push	{r4, lr}
   12696:	4674      	mov	r4, lr
   12698:	4623      	mov	r3, r4
   1269a:	4619      	mov	r1, r3
   1269c:	480a      	ldr	r0, [pc, #40]	; (126c8 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   1269e:	f000 fc31 	bl	12f04 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   126a2:	2002      	movs	r0, #2
   126a4:	f7ff f942 	bl	1192c <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   126a8:	4603      	mov	r3, r0
   126aa:	461a      	mov	r2, r3
   126ac:	4b07      	ldr	r3, [pc, #28]	; (126cc <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x38>)
   126ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   126b2:	4798      	blx	r3
    ClearInterrupts<port>();
   126b4:	f000 f972 	bl	1299c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>
   126b8:	4623      	mov	r3, r4
   126ba:	4619      	mov	r1, r3
   126bc:	4802      	ldr	r0, [pc, #8]	; (126c8 <void Timer::TimerHandler<(TimerInterface::TimerPort)2>()+0x34>)
   126be:	f000 fc35 	bl	12f2c <__cyg_profile_func_exit>
  }
   126c2:	bf00      	nop
   126c4:	bd10      	pop	{r4, pc}
   126c6:	bf00      	nop
   126c8:	00012695 	.word	0x00012695
   126cc:	100002ac 	.word	0x100002ac

000126d0 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()>:
  static void TimerHandler()
   126d0:	b510      	push	{r4, lr}
   126d2:	4674      	mov	r4, lr
   126d4:	4623      	mov	r3, r4
   126d6:	4619      	mov	r1, r3
   126d8:	480a      	ldr	r0, [pc, #40]	; (12704 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   126da:	f000 fc13 	bl	12f04 <__cyg_profile_func_enter>
      user_timer_isr[util::Value(port)]();
   126de:	2003      	movs	r0, #3
   126e0:	f7ff f924 	bl	1192c <unsigned char util::Value<TimerInterface::TimerPort, unsigned char>(TimerInterface::TimerPort)>
   126e4:	4603      	mov	r3, r0
   126e6:	461a      	mov	r2, r3
   126e8:	4b07      	ldr	r3, [pc, #28]	; (12708 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x38>)
   126ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   126ee:	4798      	blx	r3
    ClearInterrupts<port>();
   126f0:	f000 f9a4 	bl	12a3c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>
   126f4:	4623      	mov	r3, r4
   126f6:	4619      	mov	r1, r3
   126f8:	4802      	ldr	r0, [pc, #8]	; (12704 <void Timer::TimerHandler<(TimerInterface::TimerPort)3>()+0x34>)
   126fa:	f000 fc17 	bl	12f2c <__cyg_profile_func_exit>
  }
   126fe:	bf00      	nop
   12700:	bd10      	pop	{r4, pc}
   12702:	bf00      	nop
   12704:	000126d1 	.word	0x000126d1
   12708:	100002ac 	.word	0x100002ac

0001270c <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   1270c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   12710:	b088      	sub	sp, #32
   12712:	4675      	mov	r5, lr
   12714:	e9cd 0102 	strd	r0, r1, [sp, #8]
   12718:	9201      	str	r2, [sp, #4]
   1271a:	462b      	mov	r3, r5
   1271c:	4619      	mov	r1, r3
   1271e:	4824      	ldr	r0, [pc, #144]	; (127b0 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   12720:	f000 fbf0 	bl	12f04 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   12724:	f04f 0300 	mov.w	r3, #0
   12728:	f04f 0400 	mov.w	r4, #0
   1272c:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   12730:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   12734:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   12738:	bf08      	it	eq
   1273a:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   1273e:	d106      	bne.n	1274e <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   12740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12744:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12748:	e9cd 3406 	strd	r3, r4, [sp, #24]
   1274c:	e00b      	b.n	12766 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   1274e:	f7fd ff8d 	bl	1066c <Milliseconds()>
   12752:	460a      	mov	r2, r1
   12754:	4601      	mov	r1, r0
   12756:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1275a:	eb13 0b01 	adds.w	fp, r3, r1
   1275e:	eb44 0c02 	adc.w	ip, r4, r2
   12762:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   12766:	2301      	movs	r3, #1
   12768:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   1276a:	f7fd ff7f 	bl	1066c <Milliseconds()>
   1276e:	460a      	mov	r2, r1
   12770:	4601      	mov	r1, r0
   12772:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   12776:	42a2      	cmp	r2, r4
   12778:	bf08      	it	eq
   1277a:	4299      	cmpeq	r1, r3
   1277c:	bf34      	ite	cc
   1277e:	2301      	movcc	r3, #1
   12780:	2300      	movcs	r3, #0
   12782:	b2db      	uxtb	r3, r3
   12784:	2b00      	cmp	r3, #0
   12786:	d008      	beq.n	1279a <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x8e>
    if (is_done())
   12788:	ab01      	add	r3, sp, #4
   1278a:	4618      	mov	r0, r3
   1278c:	f7ff fb1a 	bl	11dc4 <Uart::Send(unsigned char)::{lambda()#1}::operator()() const>
   12790:	4603      	mov	r3, r0
   12792:	2b00      	cmp	r3, #0
   12794:	d0e9      	beq.n	1276a <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   12796:	2300      	movs	r3, #0
   12798:	9305      	str	r3, [sp, #20]
  return status;
   1279a:	9c05      	ldr	r4, [sp, #20]
   1279c:	462b      	mov	r3, r5
   1279e:	4619      	mov	r1, r3
   127a0:	4803      	ldr	r0, [pc, #12]	; (127b0 <Status Wait<Uart::Send(unsigned char)::{lambda()#1}>(unsigned long long, Uart::Send(unsigned char)::{lambda()#1})+0xa4>)
   127a2:	f000 fbc3 	bl	12f2c <__cyg_profile_func_exit>
   127a6:	4623      	mov	r3, r4
}
   127a8:	4618      	mov	r0, r3
   127aa:	b008      	add	sp, #32
   127ac:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   127b0:	0001270d 	.word	0x0001270d

000127b4 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})>:
inline Status Wait(uint64_t timeout, F is_done)
   127b4:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   127b8:	b088      	sub	sp, #32
   127ba:	4675      	mov	r5, lr
   127bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   127c0:	9201      	str	r2, [sp, #4]
   127c2:	462b      	mov	r3, r5
   127c4:	4619      	mov	r1, r3
   127c6:	4824      	ldr	r0, [pc, #144]	; (12858 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   127c8:	f000 fb9c 	bl	12f04 <__cyg_profile_func_enter>
  uint64_t timeout_time = 0;
   127cc:	f04f 0300 	mov.w	r3, #0
   127d0:	f04f 0400 	mov.w	r4, #0
   127d4:	e9cd 3406 	strd	r3, r4, [sp, #24]
  if (timeout == kMaxWait)
   127d8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   127dc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   127e0:	bf08      	it	eq
   127e2:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   127e6:	d106      	bne.n	127f6 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x42>
    timeout_time = kMaxWait;
   127e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   127ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   127f0:	e9cd 3406 	strd	r3, r4, [sp, #24]
   127f4:	e00b      	b.n	1280e <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5a>
    timeout_time = Milliseconds() + timeout;
   127f6:	f7fd ff39 	bl	1066c <Milliseconds()>
   127fa:	460a      	mov	r2, r1
   127fc:	4601      	mov	r1, r0
   127fe:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   12802:	eb13 0b01 	adds.w	fp, r3, r1
   12806:	eb44 0c02 	adc.w	ip, r4, r2
   1280a:	e9cd bc06 	strd	fp, ip, [sp, #24]
  Status status = Status::kTimedOut;
   1280e:	2301      	movs	r3, #1
   12810:	9305      	str	r3, [sp, #20]
  while (Milliseconds() < timeout_time)
   12812:	f7fd ff2b 	bl	1066c <Milliseconds()>
   12816:	460a      	mov	r2, r1
   12818:	4601      	mov	r1, r0
   1281a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
   1281e:	42a2      	cmp	r2, r4
   12820:	bf08      	it	eq
   12822:	4299      	cmpeq	r1, r3
   12824:	bf34      	ite	cc
   12826:	2301      	movcc	r3, #1
   12828:	2300      	movcs	r3, #0
   1282a:	b2db      	uxtb	r3, r3
   1282c:	2b00      	cmp	r3, #0
   1282e:	d008      	beq.n	12842 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x8e>
    if (is_done())
   12830:	ab01      	add	r3, sp, #4
   12832:	4618      	mov	r0, r3
   12834:	f7ff fb60 	bl	11ef8 <Uart::Receive(unsigned long)::{lambda()#1}::operator()() const>
   12838:	4603      	mov	r3, r0
   1283a:	2b00      	cmp	r3, #0
   1283c:	d0e9      	beq.n	12812 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0x5e>
      status = Status::kSuccess;
   1283e:	2300      	movs	r3, #0
   12840:	9305      	str	r3, [sp, #20]
  return status;
   12842:	9c05      	ldr	r4, [sp, #20]
   12844:	462b      	mov	r3, r5
   12846:	4619      	mov	r1, r3
   12848:	4803      	ldr	r0, [pc, #12]	; (12858 <Status Wait<Uart::Receive(unsigned long)::{lambda()#1}>(unsigned long long, Uart::Receive(unsigned long)::{lambda()#1})+0xa4>)
   1284a:	f000 fb6f 	bl	12f2c <__cyg_profile_func_exit>
   1284e:	4623      	mov	r3, r4
}
   12850:	4618      	mov	r0, r3
   12852:	b008      	add	sp, #32
   12854:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   12858:	000127b5 	.word	0x000127b5

0001285c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()>:
  static void ClearInterrupts()
   1285c:	b510      	push	{r4, lr}
   1285e:	b082      	sub	sp, #8
   12860:	4674      	mov	r4, lr
   12862:	4623      	mov	r3, r4
   12864:	4619      	mov	r1, r3
   12866:	4823      	ldr	r0, [pc, #140]	; (128f4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   12868:	f000 fb4c 	bl	12f04 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   1286c:	2300      	movs	r3, #0
   1286e:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   12872:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12876:	4a20      	ldr	r2, [pc, #128]	; (128f8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1287c:	681a      	ldr	r2, [r3, #0]
   1287e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12882:	491d      	ldr	r1, [pc, #116]	; (128f8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12884:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12888:	f042 0201 	orr.w	r2, r2, #1
   1288c:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   1288e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12892:	4a19      	ldr	r2, [pc, #100]	; (128f8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   12894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12898:	681a      	ldr	r2, [r3, #0]
   1289a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1289e:	4916      	ldr	r1, [pc, #88]	; (128f8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   128a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   128a4:	f042 0202 	orr.w	r2, r2, #2
   128a8:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   128aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   128ae:	4a12      	ldr	r2, [pc, #72]	; (128f8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   128b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128b4:	681a      	ldr	r2, [r3, #0]
   128b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   128ba:	490f      	ldr	r1, [pc, #60]	; (128f8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   128bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   128c0:	f042 0204 	orr.w	r2, r2, #4
   128c4:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   128c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   128ca:	4a0b      	ldr	r2, [pc, #44]	; (128f8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   128cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128d0:	681a      	ldr	r2, [r3, #0]
   128d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   128d6:	4908      	ldr	r1, [pc, #32]	; (128f8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x9c>)
   128d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   128dc:	f042 0208 	orr.w	r2, r2, #8
   128e0:	601a      	str	r2, [r3, #0]
   128e2:	4623      	mov	r3, r4
   128e4:	4619      	mov	r1, r3
   128e6:	4803      	ldr	r0, [pc, #12]	; (128f4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)0>()+0x98>)
   128e8:	f000 fb20 	bl	12f2c <__cyg_profile_func_exit>
  }
   128ec:	bf00      	nop
   128ee:	b002      	add	sp, #8
   128f0:	bd10      	pop	{r4, pc}
   128f2:	bf00      	nop
   128f4:	0001285d 	.word	0x0001285d
   128f8:	10000014 	.word	0x10000014

000128fc <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()>:
  static void ClearInterrupts()
   128fc:	b510      	push	{r4, lr}
   128fe:	b082      	sub	sp, #8
   12900:	4674      	mov	r4, lr
   12902:	4623      	mov	r3, r4
   12904:	4619      	mov	r1, r3
   12906:	4823      	ldr	r0, [pc, #140]	; (12994 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   12908:	f000 fafc 	bl	12f04 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   1290c:	2301      	movs	r3, #1
   1290e:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   12912:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12916:	4a20      	ldr	r2, [pc, #128]	; (12998 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1291c:	681a      	ldr	r2, [r3, #0]
   1291e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12922:	491d      	ldr	r1, [pc, #116]	; (12998 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12924:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12928:	f042 0201 	orr.w	r2, r2, #1
   1292c:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   1292e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12932:	4a19      	ldr	r2, [pc, #100]	; (12998 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12938:	681a      	ldr	r2, [r3, #0]
   1293a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1293e:	4916      	ldr	r1, [pc, #88]	; (12998 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12940:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12944:	f042 0202 	orr.w	r2, r2, #2
   12948:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   1294a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1294e:	4a12      	ldr	r2, [pc, #72]	; (12998 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12954:	681a      	ldr	r2, [r3, #0]
   12956:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1295a:	490f      	ldr	r1, [pc, #60]	; (12998 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   1295c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12960:	f042 0204 	orr.w	r2, r2, #4
   12964:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12966:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1296a:	4a0b      	ldr	r2, [pc, #44]	; (12998 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   1296c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12970:	681a      	ldr	r2, [r3, #0]
   12972:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12976:	4908      	ldr	r1, [pc, #32]	; (12998 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x9c>)
   12978:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1297c:	f042 0208 	orr.w	r2, r2, #8
   12980:	601a      	str	r2, [r3, #0]
   12982:	4623      	mov	r3, r4
   12984:	4619      	mov	r1, r3
   12986:	4803      	ldr	r0, [pc, #12]	; (12994 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)1>()+0x98>)
   12988:	f000 fad0 	bl	12f2c <__cyg_profile_func_exit>
  }
   1298c:	bf00      	nop
   1298e:	b002      	add	sp, #8
   12990:	bd10      	pop	{r4, pc}
   12992:	bf00      	nop
   12994:	000128fd 	.word	0x000128fd
   12998:	10000014 	.word	0x10000014

0001299c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()>:
  static void ClearInterrupts()
   1299c:	b510      	push	{r4, lr}
   1299e:	b082      	sub	sp, #8
   129a0:	4674      	mov	r4, lr
   129a2:	4623      	mov	r3, r4
   129a4:	4619      	mov	r1, r3
   129a6:	4823      	ldr	r0, [pc, #140]	; (12a34 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   129a8:	f000 faac 	bl	12f04 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   129ac:	2302      	movs	r3, #2
   129ae:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   129b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129b6:	4a20      	ldr	r2, [pc, #128]	; (12a38 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   129b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129bc:	681a      	ldr	r2, [r3, #0]
   129be:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129c2:	491d      	ldr	r1, [pc, #116]	; (12a38 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   129c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   129c8:	f042 0201 	orr.w	r2, r2, #1
   129cc:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   129ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129d2:	4a19      	ldr	r2, [pc, #100]	; (12a38 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   129d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129d8:	681a      	ldr	r2, [r3, #0]
   129da:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129de:	4916      	ldr	r1, [pc, #88]	; (12a38 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   129e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   129e4:	f042 0202 	orr.w	r2, r2, #2
   129e8:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   129ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129ee:	4a12      	ldr	r2, [pc, #72]	; (12a38 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   129f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129f4:	681a      	ldr	r2, [r3, #0]
   129f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129fa:	490f      	ldr	r1, [pc, #60]	; (12a38 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   129fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12a00:	f042 0204 	orr.w	r2, r2, #4
   12a04:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12a06:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a0a:	4a0b      	ldr	r2, [pc, #44]	; (12a38 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a10:	681a      	ldr	r2, [r3, #0]
   12a12:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a16:	4908      	ldr	r1, [pc, #32]	; (12a38 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x9c>)
   12a18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12a1c:	f042 0208 	orr.w	r2, r2, #8
   12a20:	601a      	str	r2, [r3, #0]
   12a22:	4623      	mov	r3, r4
   12a24:	4619      	mov	r1, r3
   12a26:	4803      	ldr	r0, [pc, #12]	; (12a34 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)2>()+0x98>)
   12a28:	f000 fa80 	bl	12f2c <__cyg_profile_func_exit>
  }
   12a2c:	bf00      	nop
   12a2e:	b002      	add	sp, #8
   12a30:	bd10      	pop	{r4, pc}
   12a32:	bf00      	nop
   12a34:	0001299d 	.word	0x0001299d
   12a38:	10000014 	.word	0x10000014

00012a3c <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()>:
  static void ClearInterrupts()
   12a3c:	b510      	push	{r4, lr}
   12a3e:	b082      	sub	sp, #8
   12a40:	4674      	mov	r4, lr
   12a42:	4623      	mov	r3, r4
   12a44:	4619      	mov	r1, r3
   12a46:	4823      	ldr	r0, [pc, #140]	; (12ad4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   12a48:	f000 fa5c 	bl	12f04 <__cyg_profile_func_enter>
    uint8_t channel = util::Value(port);
   12a4c:	2303      	movs	r3, #3
   12a4e:	f88d 3007 	strb.w	r3, [sp, #7]
    tim_register[channel]->IR |= (1 << kRegMR0);
   12a52:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a56:	4a20      	ldr	r2, [pc, #128]	; (12ad8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a5c:	681a      	ldr	r2, [r3, #0]
   12a5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a62:	491d      	ldr	r1, [pc, #116]	; (12ad8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12a64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12a68:	f042 0201 	orr.w	r2, r2, #1
   12a6c:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR1);
   12a6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a72:	4a19      	ldr	r2, [pc, #100]	; (12ad8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a78:	681a      	ldr	r2, [r3, #0]
   12a7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a7e:	4916      	ldr	r1, [pc, #88]	; (12ad8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12a80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12a84:	f042 0202 	orr.w	r2, r2, #2
   12a88:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR2);
   12a8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a8e:	4a12      	ldr	r2, [pc, #72]	; (12ad8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a94:	681a      	ldr	r2, [r3, #0]
   12a96:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12a9a:	490f      	ldr	r1, [pc, #60]	; (12ad8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12a9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12aa0:	f042 0204 	orr.w	r2, r2, #4
   12aa4:	601a      	str	r2, [r3, #0]
    tim_register[channel]->IR |= (1 << kRegMR3);
   12aa6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12aaa:	4a0b      	ldr	r2, [pc, #44]	; (12ad8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ab0:	681a      	ldr	r2, [r3, #0]
   12ab2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12ab6:	4908      	ldr	r1, [pc, #32]	; (12ad8 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x9c>)
   12ab8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   12abc:	f042 0208 	orr.w	r2, r2, #8
   12ac0:	601a      	str	r2, [r3, #0]
   12ac2:	4623      	mov	r3, r4
   12ac4:	4619      	mov	r1, r3
   12ac6:	4803      	ldr	r0, [pc, #12]	; (12ad4 <void Timer::ClearInterrupts<(TimerInterface::TimerPort)3>()+0x98>)
   12ac8:	f000 fa30 	bl	12f2c <__cyg_profile_func_exit>
  }
   12acc:	bf00      	nop
   12ace:	b002      	add	sp, #8
   12ad0:	bd10      	pop	{r4, pc}
   12ad2:	bf00      	nop
   12ad4:	00012a3d 	.word	0x00012a3d
   12ad8:	10000014 	.word	0x10000014

00012adc <__static_initialization_and_destruction_0(int, int)>:
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    Halt();
  }
}
   12adc:	b082      	sub	sp, #8
   12ade:	9001      	str	r0, [sp, #4]
   12ae0:	9100      	str	r1, [sp, #0]
   12ae2:	9b01      	ldr	r3, [sp, #4]
   12ae4:	2b01      	cmp	r3, #1
   12ae6:	d15d      	bne.n	12ba4 <__static_initialization_and_destruction_0(int, int)+0xc8>
   12ae8:	9b00      	ldr	r3, [sp, #0]
   12aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12aee:	4293      	cmp	r3, r2
   12af0:	d158      	bne.n	12ba4 <__static_initialization_and_destruction_0(int, int)+0xc8>
  inline static volatile uint32_t * match[4][4] = {
   12af2:	4b2e      	ldr	r3, [pc, #184]	; (12bac <__static_initialization_and_destruction_0(int, int)+0xd0>)
   12af4:	681b      	ldr	r3, [r3, #0]
   12af6:	f003 0301 	and.w	r3, r3, #1
   12afa:	2b00      	cmp	r3, #0
   12afc:	d152      	bne.n	12ba4 <__static_initialization_and_destruction_0(int, int)+0xc8>
   12afe:	4b2b      	ldr	r3, [pc, #172]	; (12bac <__static_initialization_and_destruction_0(int, int)+0xd0>)
   12b00:	2201      	movs	r2, #1
   12b02:	601a      	str	r2, [r3, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   12b04:	4b2a      	ldr	r3, [pc, #168]	; (12bb0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12b06:	681b      	ldr	r3, [r3, #0]
   12b08:	3318      	adds	r3, #24
  };
   12b0a:	4a2a      	ldr	r2, [pc, #168]	; (12bb4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12b0c:	6013      	str	r3, [r2, #0]
    [kTimer0] = { &tim_register[0]->MR0, &tim_register[0]->MR1,
   12b0e:	4b28      	ldr	r3, [pc, #160]	; (12bb0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12b10:	681b      	ldr	r3, [r3, #0]
   12b12:	331c      	adds	r3, #28
  };
   12b14:	4a27      	ldr	r2, [pc, #156]	; (12bb4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12b16:	6053      	str	r3, [r2, #4]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   12b18:	4b25      	ldr	r3, [pc, #148]	; (12bb0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12b1a:	681b      	ldr	r3, [r3, #0]
   12b1c:	3320      	adds	r3, #32
  };
   12b1e:	4a25      	ldr	r2, [pc, #148]	; (12bb4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12b20:	6093      	str	r3, [r2, #8]
                  &tim_register[0]->MR2, &tim_register[0]->MR3 },
   12b22:	4b23      	ldr	r3, [pc, #140]	; (12bb0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12b24:	681b      	ldr	r3, [r3, #0]
   12b26:	3324      	adds	r3, #36	; 0x24
  };
   12b28:	4a22      	ldr	r2, [pc, #136]	; (12bb4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12b2a:	60d3      	str	r3, [r2, #12]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   12b2c:	4b20      	ldr	r3, [pc, #128]	; (12bb0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12b2e:	685b      	ldr	r3, [r3, #4]
   12b30:	3318      	adds	r3, #24
  };
   12b32:	4a20      	ldr	r2, [pc, #128]	; (12bb4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12b34:	6113      	str	r3, [r2, #16]
    [kTimer1] = { &tim_register[1]->MR0, &tim_register[1]->MR1,
   12b36:	4b1e      	ldr	r3, [pc, #120]	; (12bb0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12b38:	685b      	ldr	r3, [r3, #4]
   12b3a:	331c      	adds	r3, #28
  };
   12b3c:	4a1d      	ldr	r2, [pc, #116]	; (12bb4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12b3e:	6153      	str	r3, [r2, #20]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   12b40:	4b1b      	ldr	r3, [pc, #108]	; (12bb0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12b42:	685b      	ldr	r3, [r3, #4]
   12b44:	3320      	adds	r3, #32
  };
   12b46:	4a1b      	ldr	r2, [pc, #108]	; (12bb4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12b48:	6193      	str	r3, [r2, #24]
                  &tim_register[1]->MR2, &tim_register[1]->MR3 },
   12b4a:	4b19      	ldr	r3, [pc, #100]	; (12bb0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12b4c:	685b      	ldr	r3, [r3, #4]
   12b4e:	3324      	adds	r3, #36	; 0x24
  };
   12b50:	4a18      	ldr	r2, [pc, #96]	; (12bb4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12b52:	61d3      	str	r3, [r2, #28]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   12b54:	4b16      	ldr	r3, [pc, #88]	; (12bb0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12b56:	689b      	ldr	r3, [r3, #8]
   12b58:	3318      	adds	r3, #24
  };
   12b5a:	4a16      	ldr	r2, [pc, #88]	; (12bb4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12b5c:	6213      	str	r3, [r2, #32]
    [kTimer2] = { &tim_register[2]->MR0, &tim_register[2]->MR1,
   12b5e:	4b14      	ldr	r3, [pc, #80]	; (12bb0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12b60:	689b      	ldr	r3, [r3, #8]
   12b62:	331c      	adds	r3, #28
  };
   12b64:	4a13      	ldr	r2, [pc, #76]	; (12bb4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12b66:	6253      	str	r3, [r2, #36]	; 0x24
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   12b68:	4b11      	ldr	r3, [pc, #68]	; (12bb0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12b6a:	689b      	ldr	r3, [r3, #8]
   12b6c:	3320      	adds	r3, #32
  };
   12b6e:	4a11      	ldr	r2, [pc, #68]	; (12bb4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12b70:	6293      	str	r3, [r2, #40]	; 0x28
                  &tim_register[2]->MR2, &tim_register[2]->MR3 },
   12b72:	4b0f      	ldr	r3, [pc, #60]	; (12bb0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12b74:	689b      	ldr	r3, [r3, #8]
   12b76:	3324      	adds	r3, #36	; 0x24
  };
   12b78:	4a0e      	ldr	r2, [pc, #56]	; (12bb4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12b7a:	62d3      	str	r3, [r2, #44]	; 0x2c
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   12b7c:	4b0c      	ldr	r3, [pc, #48]	; (12bb0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12b7e:	68db      	ldr	r3, [r3, #12]
   12b80:	3318      	adds	r3, #24
  };
   12b82:	4a0c      	ldr	r2, [pc, #48]	; (12bb4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12b84:	6313      	str	r3, [r2, #48]	; 0x30
    [kTimer3] = { &tim_register[3]->MR0, &tim_register[3]->MR1,
   12b86:	4b0a      	ldr	r3, [pc, #40]	; (12bb0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12b88:	68db      	ldr	r3, [r3, #12]
   12b8a:	331c      	adds	r3, #28
  };
   12b8c:	4a09      	ldr	r2, [pc, #36]	; (12bb4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12b8e:	6353      	str	r3, [r2, #52]	; 0x34
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   12b90:	4b07      	ldr	r3, [pc, #28]	; (12bb0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12b92:	68db      	ldr	r3, [r3, #12]
   12b94:	3320      	adds	r3, #32
  };
   12b96:	4a07      	ldr	r2, [pc, #28]	; (12bb4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12b98:	6393      	str	r3, [r2, #56]	; 0x38
                  &tim_register[3]->MR2, &tim_register[3]->MR3 }
   12b9a:	4b05      	ldr	r3, [pc, #20]	; (12bb0 <__static_initialization_and_destruction_0(int, int)+0xd4>)
   12b9c:	68db      	ldr	r3, [r3, #12]
   12b9e:	3324      	adds	r3, #36	; 0x24
  };
   12ba0:	4a04      	ldr	r2, [pc, #16]	; (12bb4 <__static_initialization_and_destruction_0(int, int)+0xd8>)
   12ba2:	63d3      	str	r3, [r2, #60]	; 0x3c
   12ba4:	bf00      	nop
   12ba6:	b002      	add	sp, #8
   12ba8:	4770      	bx	lr
   12baa:	bf00      	nop
   12bac:	100002bc 	.word	0x100002bc
   12bb0:	10000014 	.word	0x10000014
   12bb4:	1000026c 	.word	0x1000026c

00012bb8 <_GLOBAL__sub_I_UptimeRTOS>:
   12bb8:	b508      	push	{r3, lr}
   12bba:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12bbe:	2001      	movs	r0, #1
   12bc0:	f7ff ff8c 	bl	12adc <__static_initialization_and_destruction_0(int, int)>
   12bc4:	bd08      	pop	{r3, pc}
   12bc6:	Address 0x0000000000012bc6 is out of bounds.


00012bc8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   12bc8:	b082      	sub	sp, #8
   12bca:	4603      	mov	r3, r0
   12bcc:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   12bd0:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12bd4:	f003 021f 	and.w	r2, r3, #31
   12bd8:	4905      	ldr	r1, [pc, #20]	; (12bf0 <NVIC_EnableIRQ+0x28>)
   12bda:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12bde:	095b      	lsrs	r3, r3, #5
   12be0:	2001      	movs	r0, #1
   12be2:	fa00 f202 	lsl.w	r2, r0, r2
   12be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12bea:	bf00      	nop
   12bec:	b002      	add	sp, #8
   12bee:	4770      	bx	lr
   12bf0:	e000e100 	.word	0xe000e100

00012bf4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   12bf4:	b082      	sub	sp, #8
   12bf6:	4603      	mov	r3, r0
   12bf8:	9100      	str	r1, [sp, #0]
   12bfa:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) < 0)
   12bfe:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12c02:	2b00      	cmp	r3, #0
   12c04:	da0c      	bge.n	12c20 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12c06:	9b00      	ldr	r3, [sp, #0]
   12c08:	b2da      	uxtb	r2, r3
   12c0a:	490d      	ldr	r1, [pc, #52]	; (12c40 <NVIC_SetPriority+0x4c>)
   12c0c:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   12c10:	f003 030f 	and.w	r3, r3, #15
   12c14:	3b04      	subs	r3, #4
   12c16:	0152      	lsls	r2, r2, #5
   12c18:	b2d2      	uxtb	r2, r2
   12c1a:	440b      	add	r3, r1
   12c1c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   12c1e:	e00b      	b.n	12c38 <NVIC_SetPriority+0x44>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12c20:	9b00      	ldr	r3, [sp, #0]
   12c22:	b2db      	uxtb	r3, r3
   12c24:	4a07      	ldr	r2, [pc, #28]	; (12c44 <NVIC_SetPriority+0x50>)
   12c26:	f99d 1007 	ldrsb.w	r1, [sp, #7]
   12c2a:	4608      	mov	r0, r1
   12c2c:	015b      	lsls	r3, r3, #5
   12c2e:	b2d9      	uxtb	r1, r3
   12c30:	1813      	adds	r3, r2, r0
   12c32:	460a      	mov	r2, r1
   12c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   12c38:	bf00      	nop
   12c3a:	b002      	add	sp, #8
   12c3c:	4770      	bx	lr
   12c3e:	bf00      	nop
   12c40:	e000ed00 	.word	0xe000ed00
   12c44:	e000e100 	.word	0xe000e100

00012c48 <InterruptLookupHandler>:
{
   12c48:	b500      	push	{lr}
   12c4a:	b085      	sub	sp, #20
  uint8_t active_isr = (SCB->ICSR & 0xFF);
   12c4c:	4b12      	ldr	r3, [pc, #72]	; (12c98 <InterruptLookupHandler+0x50>)
   12c4e:	685b      	ldr	r3, [r3, #4]
   12c50:	f88d 300f 	strb.w	r3, [sp, #15]
  IsrPointer isr     = dynamic_isr_vector_table[active_isr];
   12c54:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12c58:	4a10      	ldr	r2, [pc, #64]	; (12c9c <InterruptLookupHandler+0x54>)
   12c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c5e:	9302      	str	r3, [sp, #8]
  SJ2_ASSERT_FATAL(isr != InterruptLookupHandler,
   12c60:	9b02      	ldr	r3, [sp, #8]
   12c62:	4a0f      	ldr	r2, [pc, #60]	; (12ca0 <InterruptLookupHandler+0x58>)
   12c64:	4293      	cmp	r3, r2
   12c66:	d110      	bne.n	12c8a <InterruptLookupHandler+0x42>
   12c68:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12c6c:	9300      	str	r3, [sp, #0]
   12c6e:	23dd      	movs	r3, #221	; 0xdd
   12c70:	4a0c      	ldr	r2, [pc, #48]	; (12ca4 <InterruptLookupHandler+0x5c>)
   12c72:	490d      	ldr	r1, [pc, #52]	; (12ca8 <InterruptLookupHandler+0x60>)
   12c74:	480d      	ldr	r0, [pc, #52]	; (12cac <InterruptLookupHandler+0x64>)
   12c76:	f001 fba5 	bl	143c4 <printf>
   12c7a:	480d      	ldr	r0, [pc, #52]	; (12cb0 <InterruptLookupHandler+0x68>)
   12c7c:	f000 f912 	bl	12ea4 <puts>
   12c80:	2100      	movs	r1, #0
   12c82:	2001      	movs	r0, #1
   12c84:	f7fd ff18 	bl	10ab8 <debug::PrintBacktrace(bool, void*)>
   12c88:	e7fe      	b.n	12c88 <InterruptLookupHandler+0x40>
  isr();
   12c8a:	9b02      	ldr	r3, [sp, #8]
   12c8c:	4798      	blx	r3
}
   12c8e:	bf00      	nop
   12c90:	b005      	add	sp, #20
   12c92:	f85d fb04 	ldr.w	pc, [sp], #4
   12c96:	bf00      	nop
   12c98:	e000ed00 	.word	0xe000ed00
   12c9c:	100000a0 	.word	0x100000a0
   12ca0:	00012c49 	.word	0x00012c49
   12ca4:	0001806c 	.word	0x0001806c
   12ca8:	0001805c 	.word	0x0001805c
   12cac:	00017f00 	.word	0x00017f00
   12cb0:	00017fac 	.word	0x00017fac

00012cb4 <RegisterIsr(IRQn, void (*)(), bool, long)>:
{
   12cb4:	b500      	push	{lr}
   12cb6:	b085      	sub	sp, #20
   12cb8:	9102      	str	r1, [sp, #8]
   12cba:	9301      	str	r3, [sp, #4]
   12cbc:	4603      	mov	r3, r0
   12cbe:	f88d 300f 	strb.w	r3, [sp, #15]
   12cc2:	4613      	mov	r3, r2
   12cc4:	f88d 300e 	strb.w	r3, [sp, #14]
  dynamic_isr_vector_table[irq + kIrqOffset] = isr;
   12cc8:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12ccc:	3310      	adds	r3, #16
   12cce:	490f      	ldr	r1, [pc, #60]	; (12d0c <RegisterIsr(IRQn, void (*)(), bool, long)+0x58>)
   12cd0:	9a02      	ldr	r2, [sp, #8]
   12cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if (enable_interrupt && irq >= 0)
   12cd6:	f89d 300e 	ldrb.w	r3, [sp, #14]
   12cda:	2b00      	cmp	r3, #0
   12cdc:	d008      	beq.n	12cf0 <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
   12cde:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12ce2:	2b00      	cmp	r3, #0
   12ce4:	db04      	blt.n	12cf0 <RegisterIsr(IRQn, void (*)(), bool, long)+0x3c>
    NVIC_EnableIRQ(irq);
   12ce6:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12cea:	4618      	mov	r0, r3
   12cec:	f7ff ff6c 	bl	12bc8 <NVIC_EnableIRQ>
  if (priority > -1)
   12cf0:	9b01      	ldr	r3, [sp, #4]
   12cf2:	2b00      	cmp	r3, #0
   12cf4:	db06      	blt.n	12d04 <RegisterIsr(IRQn, void (*)(), bool, long)+0x50>
    NVIC_SetPriority(irq, priority);
   12cf6:	9a01      	ldr	r2, [sp, #4]
   12cf8:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   12cfc:	4611      	mov	r1, r2
   12cfe:	4618      	mov	r0, r3
   12d00:	f7ff ff78 	bl	12bf4 <NVIC_SetPriority>
}
   12d04:	bf00      	nop
   12d06:	b005      	add	sp, #20
   12d08:	f85d fb04 	ldr.w	pc, [sp], #4
   12d0c:	100000a0 	.word	0x100000a0

00012d10 <GetRegistersFromStack>:
{
   12d10:	b500      	push	{lr}
   12d12:	b08d      	sub	sp, #52	; 0x34
   12d14:	9003      	str	r0, [sp, #12]
  volatile uint32_t r0  = fault_stack_address[0];
   12d16:	9b03      	ldr	r3, [sp, #12]
   12d18:	681b      	ldr	r3, [r3, #0]
   12d1a:	930b      	str	r3, [sp, #44]	; 0x2c
  volatile uint32_t r1  = fault_stack_address[1];
   12d1c:	9b03      	ldr	r3, [sp, #12]
   12d1e:	685b      	ldr	r3, [r3, #4]
   12d20:	930a      	str	r3, [sp, #40]	; 0x28
  volatile uint32_t r2  = fault_stack_address[2];
   12d22:	9b03      	ldr	r3, [sp, #12]
   12d24:	689b      	ldr	r3, [r3, #8]
   12d26:	9309      	str	r3, [sp, #36]	; 0x24
  volatile uint32_t r3  = fault_stack_address[3];
   12d28:	9b03      	ldr	r3, [sp, #12]
   12d2a:	68db      	ldr	r3, [r3, #12]
   12d2c:	9308      	str	r3, [sp, #32]
  volatile uint32_t r12 = fault_stack_address[4];
   12d2e:	9b03      	ldr	r3, [sp, #12]
   12d30:	691b      	ldr	r3, [r3, #16]
   12d32:	9307      	str	r3, [sp, #28]
  volatile uint32_t lr = fault_stack_address[5];
   12d34:	9b03      	ldr	r3, [sp, #12]
   12d36:	695b      	ldr	r3, [r3, #20]
   12d38:	9306      	str	r3, [sp, #24]
  volatile uint32_t pc = fault_stack_address[6];
   12d3a:	9b03      	ldr	r3, [sp, #12]
   12d3c:	699b      	ldr	r3, [r3, #24]
   12d3e:	9305      	str	r3, [sp, #20]
  volatile uint32_t psr = fault_stack_address[7];
   12d40:	9b03      	ldr	r3, [sp, #12]
   12d42:	69db      	ldr	r3, [r3, #28]
   12d44:	9304      	str	r3, [sp, #16]
  printf(SJ2_BACKGROUND_RED "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
   12d46:	480d      	ldr	r0, [pc, #52]	; (12d7c <GetRegistersFromStack+0x6c>)
   12d48:	f001 fb3c 	bl	143c4 <printf>
  printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
   12d4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12d4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12d50:	9809      	ldr	r0, [sp, #36]	; 0x24
   12d52:	9b08      	ldr	r3, [sp, #32]
   12d54:	9300      	str	r3, [sp, #0]
   12d56:	4603      	mov	r3, r0
   12d58:	4809      	ldr	r0, [pc, #36]	; (12d80 <GetRegistersFromStack+0x70>)
   12d5a:	f001 fb33 	bl	143c4 <printf>
  printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
   12d5e:	9907      	ldr	r1, [sp, #28]
   12d60:	9a06      	ldr	r2, [sp, #24]
   12d62:	9805      	ldr	r0, [sp, #20]
   12d64:	9b04      	ldr	r3, [sp, #16]
   12d66:	9300      	str	r3, [sp, #0]
   12d68:	4603      	mov	r3, r0
   12d6a:	4806      	ldr	r0, [pc, #24]	; (12d84 <GetRegistersFromStack+0x74>)
   12d6c:	f001 fb2a 	bl	143c4 <printf>
  debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
   12d70:	9b05      	ldr	r3, [sp, #20]
   12d72:	4619      	mov	r1, r3
   12d74:	2001      	movs	r0, #1
   12d76:	f7fd fe9f 	bl	10ab8 <debug::PrintBacktrace(bool, void*)>
   12d7a:	e7fe      	b.n	12d7a <GetRegistersFromStack+0x6a>
   12d7c:	00017fc4 	.word	0x00017fc4
   12d80:	00017ff0 	.word	0x00017ff0
   12d84:	00018024 	.word	0x00018024

00012d88 <FirmwareStdOut(int)>:
}
Stdout out = HostWrite;
Stdin in   = HostRead;
#else
int FirmwareStdOut(int data)
{
   12d88:	b530      	push	{r4, r5, lr}
   12d8a:	b083      	sub	sp, #12
   12d8c:	4675      	mov	r5, lr
   12d8e:	9001      	str	r0, [sp, #4]
   12d90:	462b      	mov	r3, r5
   12d92:	4619      	mov	r1, r3
   12d94:	4809      	ldr	r0, [pc, #36]	; (12dbc <FirmwareStdOut(int)+0x34>)
   12d96:	f000 f8b5 	bl	12f04 <__cyg_profile_func_enter>
  uart0.Send(static_cast<uint8_t>(data));
   12d9a:	9b01      	ldr	r3, [sp, #4]
   12d9c:	b2db      	uxtb	r3, r3
   12d9e:	4619      	mov	r1, r3
   12da0:	4807      	ldr	r0, [pc, #28]	; (12dc0 <FirmwareStdOut(int)+0x38>)
   12da2:	f7ff f835 	bl	11e10 <Uart::Send(unsigned char)>
  return 1;
   12da6:	2401      	movs	r4, #1
   12da8:	462b      	mov	r3, r5
   12daa:	4619      	mov	r1, r3
   12dac:	4803      	ldr	r0, [pc, #12]	; (12dbc <FirmwareStdOut(int)+0x34>)
   12dae:	f000 f8bd 	bl	12f2c <__cyg_profile_func_exit>
   12db2:	4623      	mov	r3, r4
}
   12db4:	4618      	mov	r0, r3
   12db6:	b003      	add	sp, #12
   12db8:	bd30      	pop	{r4, r5, pc}
   12dba:	bf00      	nop
   12dbc:	00012d89 	.word	0x00012d89
   12dc0:	10000074 	.word	0x10000074

00012dc4 <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
   12dc4:	b500      	push	{lr}
   12dc6:	b083      	sub	sp, #12
   12dc8:	4673      	mov	r3, lr
   12dca:	9001      	str	r0, [sp, #4]
   12dcc:	4619      	mov	r1, r3
   12dce:	4802      	ldr	r0, [pc, #8]	; (12dd8 <_exit+0x14>)
   12dd0:	f000 f898 	bl	12f04 <__cyg_profile_func_enter>
    while (1)
    {
      continue;
   12dd4:	bf00      	nop
    while (1)
   12dd6:	e7fd      	b.n	12dd4 <_exit+0x10>
   12dd8:	00012dc5 	.word	0x00012dc5

00012ddc <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
   12ddc:	b538      	push	{r3, r4, r5, lr}
   12dde:	4675      	mov	r5, lr
   12de0:	462b      	mov	r3, r5
   12de2:	4619      	mov	r1, r3
   12de4:	4805      	ldr	r0, [pc, #20]	; (12dfc <_getpid+0x20>)
   12de6:	f000 f88d 	bl	12f04 <__cyg_profile_func_enter>
    return 1;
   12dea:	2401      	movs	r4, #1
   12dec:	462b      	mov	r3, r5
   12dee:	4619      	mov	r1, r3
   12df0:	4802      	ldr	r0, [pc, #8]	; (12dfc <_getpid+0x20>)
   12df2:	f000 f89b 	bl	12f2c <__cyg_profile_func_exit>
   12df6:	4623      	mov	r3, r4
  }
   12df8:	4618      	mov	r0, r3
   12dfa:	bd38      	pop	{r3, r4, r5, pc}
   12dfc:	00012ddd 	.word	0x00012ddd

00012e00 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
   12e00:	b530      	push	{r4, r5, lr}
   12e02:	b083      	sub	sp, #12
   12e04:	4675      	mov	r5, lr
   12e06:	9001      	str	r0, [sp, #4]
   12e08:	9100      	str	r1, [sp, #0]
   12e0a:	462b      	mov	r3, r5
   12e0c:	4619      	mov	r1, r3
   12e0e:	4807      	ldr	r0, [pc, #28]	; (12e2c <_kill+0x2c>)
   12e10:	f000 f878 	bl	12f04 <__cyg_profile_func_enter>
    return -1;
   12e14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12e18:	462b      	mov	r3, r5
   12e1a:	4619      	mov	r1, r3
   12e1c:	4803      	ldr	r0, [pc, #12]	; (12e2c <_kill+0x2c>)
   12e1e:	f000 f885 	bl	12f2c <__cyg_profile_func_exit>
   12e22:	4623      	mov	r3, r4
  }
   12e24:	4618      	mov	r0, r3
   12e26:	b003      	add	sp, #12
   12e28:	bd30      	pop	{r4, r5, pc}
   12e2a:	bf00      	nop
   12e2c:	00012e01 	.word	0x00012e01

00012e30 <_putchar>:
    }
    return length;
  }
  // Needed by third party printf library
  void _putchar(char character)  // NOLINT
  {
   12e30:	b510      	push	{r4, lr}
   12e32:	b082      	sub	sp, #8
   12e34:	4674      	mov	r4, lr
   12e36:	4603      	mov	r3, r0
   12e38:	f88d 3007 	strb.w	r3, [sp, #7]
   12e3c:	4623      	mov	r3, r4
   12e3e:	4619      	mov	r1, r3
   12e40:	4808      	ldr	r0, [pc, #32]	; (12e64 <_putchar+0x34>)
   12e42:	f000 f85f 	bl	12f04 <__cyg_profile_func_enter>
    out(character);
   12e46:	4b08      	ldr	r3, [pc, #32]	; (12e68 <_putchar+0x38>)
   12e48:	681b      	ldr	r3, [r3, #0]
   12e4a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12e4e:	4610      	mov	r0, r2
   12e50:	4798      	blx	r3
   12e52:	4623      	mov	r3, r4
   12e54:	4619      	mov	r1, r3
   12e56:	4803      	ldr	r0, [pc, #12]	; (12e64 <_putchar+0x34>)
   12e58:	f000 f868 	bl	12f2c <__cyg_profile_func_exit>
  }
   12e5c:	bf00      	nop
   12e5e:	b002      	add	sp, #8
   12e60:	bd10      	pop	{r4, pc}
   12e62:	bf00      	nop
   12e64:	00012e31 	.word	0x00012e31
   12e68:	10000184 	.word	0x10000184

00012e6c <putchar>:

  // Overload default libnano putchar() with a more optimal version that does
  // not use dynamic memory
  int putchar(int character)  // NOLINT
  {
   12e6c:	b530      	push	{r4, r5, lr}
   12e6e:	b083      	sub	sp, #12
   12e70:	4674      	mov	r4, lr
   12e72:	9001      	str	r0, [sp, #4]
   12e74:	4623      	mov	r3, r4
   12e76:	4619      	mov	r1, r3
   12e78:	4808      	ldr	r0, [pc, #32]	; (12e9c <putchar+0x30>)
   12e7a:	f000 f843 	bl	12f04 <__cyg_profile_func_enter>
    return out(character);
   12e7e:	4b08      	ldr	r3, [pc, #32]	; (12ea0 <putchar+0x34>)
   12e80:	681b      	ldr	r3, [r3, #0]
   12e82:	9801      	ldr	r0, [sp, #4]
   12e84:	4798      	blx	r3
   12e86:	4605      	mov	r5, r0
   12e88:	4623      	mov	r3, r4
   12e8a:	4619      	mov	r1, r3
   12e8c:	4803      	ldr	r0, [pc, #12]	; (12e9c <putchar+0x30>)
   12e8e:	f000 f84d 	bl	12f2c <__cyg_profile_func_exit>
   12e92:	462b      	mov	r3, r5
  }
   12e94:	4618      	mov	r0, r3
   12e96:	b003      	add	sp, #12
   12e98:	bd30      	pop	{r4, r5, pc}
   12e9a:	bf00      	nop
   12e9c:	00012e6d 	.word	0x00012e6d
   12ea0:	10000184 	.word	0x10000184

00012ea4 <puts>:

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
   12ea4:	b530      	push	{r4, r5, lr}
   12ea6:	b085      	sub	sp, #20
   12ea8:	4675      	mov	r5, lr
   12eaa:	9001      	str	r0, [sp, #4]
   12eac:	462b      	mov	r3, r5
   12eae:	4619      	mov	r1, r3
   12eb0:	4812      	ldr	r0, [pc, #72]	; (12efc <puts+0x58>)
   12eb2:	f000 f827 	bl	12f04 <__cyg_profile_func_enter>
    int i;
    for (i = 0; str[i] != '\0'; i++)
   12eb6:	2300      	movs	r3, #0
   12eb8:	9303      	str	r3, [sp, #12]
   12eba:	9b03      	ldr	r3, [sp, #12]
   12ebc:	9a01      	ldr	r2, [sp, #4]
   12ebe:	4413      	add	r3, r2
   12ec0:	781b      	ldrb	r3, [r3, #0]
   12ec2:	2b00      	cmp	r3, #0
   12ec4:	d00b      	beq.n	12ede <puts+0x3a>
    {
      out(str[i]);
   12ec6:	4b0e      	ldr	r3, [pc, #56]	; (12f00 <puts+0x5c>)
   12ec8:	681b      	ldr	r3, [r3, #0]
   12eca:	9a03      	ldr	r2, [sp, #12]
   12ecc:	9901      	ldr	r1, [sp, #4]
   12ece:	440a      	add	r2, r1
   12ed0:	7812      	ldrb	r2, [r2, #0]
   12ed2:	4610      	mov	r0, r2
   12ed4:	4798      	blx	r3
    for (i = 0; str[i] != '\0'; i++)
   12ed6:	9b03      	ldr	r3, [sp, #12]
   12ed8:	3301      	adds	r3, #1
   12eda:	9303      	str	r3, [sp, #12]
   12edc:	e7ed      	b.n	12eba <puts+0x16>
    }
    out('\n');
   12ede:	4b08      	ldr	r3, [pc, #32]	; (12f00 <puts+0x5c>)
   12ee0:	681b      	ldr	r3, [r3, #0]
   12ee2:	200a      	movs	r0, #10
   12ee4:	4798      	blx	r3
    return i;
   12ee6:	9c03      	ldr	r4, [sp, #12]
   12ee8:	462b      	mov	r3, r5
   12eea:	4619      	mov	r1, r3
   12eec:	4803      	ldr	r0, [pc, #12]	; (12efc <puts+0x58>)
   12eee:	f000 f81d 	bl	12f2c <__cyg_profile_func_exit>
   12ef2:	4623      	mov	r3, r4
  }
   12ef4:	4618      	mov	r0, r3
   12ef6:	b005      	add	sp, #20
   12ef8:	bd30      	pop	{r4, r5, pc}
   12efa:	bf00      	nop
   12efc:	00012ea5 	.word	0x00012ea5
   12f00:	10000184 	.word	0x10000184

00012f04 <__cyg_profile_func_enter>:
  // =============================
  void * stack_trace[config::kBacktraceDepth] = { nullptr };
  size_t stack_depth = 0;

  void __cyg_profile_func_enter(void *, void * call_site)  // NOLINT
  {
   12f04:	b082      	sub	sp, #8
   12f06:	9001      	str	r0, [sp, #4]
   12f08:	9100      	str	r1, [sp, #0]
    stack_trace[stack_depth++] = call_site;
   12f0a:	9a00      	ldr	r2, [sp, #0]
   12f0c:	4b05      	ldr	r3, [pc, #20]	; (12f24 <__cyg_profile_func_enter+0x20>)
   12f0e:	681b      	ldr	r3, [r3, #0]
   12f10:	1c59      	adds	r1, r3, #1
   12f12:	4804      	ldr	r0, [pc, #16]	; (12f24 <__cyg_profile_func_enter+0x20>)
   12f14:	6001      	str	r1, [r0, #0]
   12f16:	4904      	ldr	r1, [pc, #16]	; (12f28 <__cyg_profile_func_enter+0x24>)
   12f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
   12f1c:	bf00      	nop
   12f1e:	b002      	add	sp, #8
   12f20:	4770      	bx	lr
   12f22:	bf00      	nop
   12f24:	100003c0 	.word	0x100003c0
   12f28:	100002c0 	.word	0x100002c0

00012f2c <__cyg_profile_func_exit>:

  void __cyg_profile_func_exit(void *, void *)  // NOLINT
  {
   12f2c:	b082      	sub	sp, #8
   12f2e:	9001      	str	r0, [sp, #4]
   12f30:	9100      	str	r1, [sp, #0]
    stack_depth--;
   12f32:	4b04      	ldr	r3, [pc, #16]	; (12f44 <__cyg_profile_func_exit+0x18>)
   12f34:	681b      	ldr	r3, [r3, #0]
   12f36:	3b01      	subs	r3, #1
   12f38:	4a02      	ldr	r2, [pc, #8]	; (12f44 <__cyg_profile_func_exit+0x18>)
   12f3a:	6013      	str	r3, [r2, #0]
  }
   12f3c:	bf00      	nop
   12f3e:	b002      	add	sp, #8
   12f40:	4770      	bx	lr
   12f42:	bf00      	nop
   12f44:	100003c0 	.word	0x100003c0

00012f48 <GetStackTrace()>:
}

void ** GetStackTrace()
{
   12f48:	b538      	push	{r3, r4, r5, lr}
   12f4a:	4675      	mov	r5, lr
   12f4c:	462b      	mov	r3, r5
   12f4e:	4619      	mov	r1, r3
   12f50:	4805      	ldr	r0, [pc, #20]	; (12f68 <GetStackTrace()+0x20>)
   12f52:	f7ff ffd7 	bl	12f04 <__cyg_profile_func_enter>
  return stack_trace;
   12f56:	4c05      	ldr	r4, [pc, #20]	; (12f6c <GetStackTrace()+0x24>)
   12f58:	462b      	mov	r3, r5
   12f5a:	4619      	mov	r1, r3
   12f5c:	4802      	ldr	r0, [pc, #8]	; (12f68 <GetStackTrace()+0x20>)
   12f5e:	f7ff ffe5 	bl	12f2c <__cyg_profile_func_exit>
   12f62:	4623      	mov	r3, r4
}
   12f64:	4618      	mov	r0, r3
   12f66:	bd38      	pop	{r3, r4, r5, pc}
   12f68:	00012f49 	.word	0x00012f49
   12f6c:	100002c0 	.word	0x100002c0

00012f70 <GetStackDepth()>:

size_t GetStackDepth()
{
   12f70:	b538      	push	{r3, r4, r5, lr}
   12f72:	4675      	mov	r5, lr
   12f74:	462b      	mov	r3, r5
   12f76:	4619      	mov	r1, r3
   12f78:	4806      	ldr	r0, [pc, #24]	; (12f94 <GetStackDepth()+0x24>)
   12f7a:	f7ff ffc3 	bl	12f04 <__cyg_profile_func_enter>
  return stack_depth;
   12f7e:	4b06      	ldr	r3, [pc, #24]	; (12f98 <GetStackDepth()+0x28>)
   12f80:	681c      	ldr	r4, [r3, #0]
   12f82:	462b      	mov	r3, r5
   12f84:	4619      	mov	r1, r3
   12f86:	4803      	ldr	r0, [pc, #12]	; (12f94 <GetStackDepth()+0x24>)
   12f88:	f7ff ffd0 	bl	12f2c <__cyg_profile_func_exit>
   12f8c:	4623      	mov	r3, r4
}
   12f8e:	4618      	mov	r0, r3
   12f90:	bd38      	pop	{r3, r4, r5, pc}
   12f92:	bf00      	nop
   12f94:	00012f71 	.word	0x00012f71
   12f98:	100003c0 	.word	0x100003c0

00012f9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   12f9c:	b510      	push	{r4, lr}
   12f9e:	b084      	sub	sp, #16
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   12fa0:	4b29      	ldr	r3, [pc, #164]	; (13048 <vTaskSwitchContext+0xac>)
   12fa2:	681b      	ldr	r3, [r3, #0]
   12fa4:	2b00      	cmp	r3, #0
   12fa6:	d003      	beq.n	12fb0 <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   12fa8:	4b28      	ldr	r3, [pc, #160]	; (1304c <vTaskSwitchContext+0xb0>)
   12faa:	2201      	movs	r2, #1
   12fac:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   12fae:	e047      	b.n	13040 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
   12fb0:	4b26      	ldr	r3, [pc, #152]	; (1304c <vTaskSwitchContext+0xb0>)
   12fb2:	2200      	movs	r2, #0
   12fb4:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
   12fb6:	f7ff fa8d 	bl	124d4 <UptimeRTOS>
   12fba:	4603      	mov	r3, r0
   12fbc:	460c      	mov	r4, r1
   12fbe:	461a      	mov	r2, r3
   12fc0:	4b23      	ldr	r3, [pc, #140]	; (13050 <vTaskSwitchContext+0xb4>)
   12fc2:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
   12fc4:	4b22      	ldr	r3, [pc, #136]	; (13050 <vTaskSwitchContext+0xb4>)
   12fc6:	681a      	ldr	r2, [r3, #0]
   12fc8:	4b22      	ldr	r3, [pc, #136]	; (13054 <vTaskSwitchContext+0xb8>)
   12fca:	681b      	ldr	r3, [r3, #0]
   12fcc:	429a      	cmp	r2, r3
   12fce:	d909      	bls.n	12fe4 <vTaskSwitchContext+0x48>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
   12fd0:	4b21      	ldr	r3, [pc, #132]	; (13058 <vTaskSwitchContext+0xbc>)
   12fd2:	681b      	ldr	r3, [r3, #0]
   12fd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
   12fd6:	4a1e      	ldr	r2, [pc, #120]	; (13050 <vTaskSwitchContext+0xb4>)
   12fd8:	6810      	ldr	r0, [r2, #0]
   12fda:	4a1e      	ldr	r2, [pc, #120]	; (13054 <vTaskSwitchContext+0xb8>)
   12fdc:	6812      	ldr	r2, [r2, #0]
   12fde:	1a82      	subs	r2, r0, r2
   12fe0:	440a      	add	r2, r1
   12fe2:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
   12fe4:	4b1a      	ldr	r3, [pc, #104]	; (13050 <vTaskSwitchContext+0xb4>)
   12fe6:	681b      	ldr	r3, [r3, #0]
   12fe8:	4a1a      	ldr	r2, [pc, #104]	; (13054 <vTaskSwitchContext+0xb8>)
   12fea:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   12fec:	4b1b      	ldr	r3, [pc, #108]	; (1305c <vTaskSwitchContext+0xc0>)
   12fee:	681b      	ldr	r3, [r3, #0]
   12ff0:	9301      	str	r3, [sp, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   12ff2:	9b01      	ldr	r3, [sp, #4]
   12ff4:	fab3 f383 	clz	r3, r3
   12ff8:	f88d 3003 	strb.w	r3, [sp, #3]
		return ucReturn;
   12ffc:	f89d 3003 	ldrb.w	r3, [sp, #3]
   13000:	f1c3 031f 	rsb	r3, r3, #31
   13004:	9303      	str	r3, [sp, #12]
   13006:	9a03      	ldr	r2, [sp, #12]
   13008:	4613      	mov	r3, r2
   1300a:	009b      	lsls	r3, r3, #2
   1300c:	4413      	add	r3, r2
   1300e:	009b      	lsls	r3, r3, #2
   13010:	4a13      	ldr	r2, [pc, #76]	; (13060 <vTaskSwitchContext+0xc4>)
   13012:	4413      	add	r3, r2
   13014:	9302      	str	r3, [sp, #8]
   13016:	9b02      	ldr	r3, [sp, #8]
   13018:	685b      	ldr	r3, [r3, #4]
   1301a:	685a      	ldr	r2, [r3, #4]
   1301c:	9b02      	ldr	r3, [sp, #8]
   1301e:	605a      	str	r2, [r3, #4]
   13020:	9b02      	ldr	r3, [sp, #8]
   13022:	685a      	ldr	r2, [r3, #4]
   13024:	9b02      	ldr	r3, [sp, #8]
   13026:	3308      	adds	r3, #8
   13028:	429a      	cmp	r2, r3
   1302a:	d104      	bne.n	13036 <vTaskSwitchContext+0x9a>
   1302c:	9b02      	ldr	r3, [sp, #8]
   1302e:	685b      	ldr	r3, [r3, #4]
   13030:	685a      	ldr	r2, [r3, #4]
   13032:	9b02      	ldr	r3, [sp, #8]
   13034:	605a      	str	r2, [r3, #4]
   13036:	9b02      	ldr	r3, [sp, #8]
   13038:	685b      	ldr	r3, [r3, #4]
   1303a:	68db      	ldr	r3, [r3, #12]
   1303c:	4a06      	ldr	r2, [pc, #24]	; (13058 <vTaskSwitchContext+0xbc>)
   1303e:	6013      	str	r3, [r2, #0]
}
   13040:	bf00      	nop
   13042:	b004      	add	sp, #16
   13044:	bd10      	pop	{r4, pc}
   13046:	bf00      	nop
   13048:	10000434 	.word	0x10000434
   1304c:	10000430 	.word	0x10000430
   13050:	1000043c 	.word	0x1000043c
   13054:	10000438 	.word	0x10000438
   13058:	100003c4 	.word	0x100003c4
   1305c:	1000042c 	.word	0x1000042c
   13060:	100003c8 	.word	0x100003c8
   13064:	ffffffff 	.word	0xffffffff
   13068:	ffffffff 	.word	0xffffffff
   1306c:	ffffffff 	.word	0xffffffff

00013070 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   13070:	4b07      	ldr	r3, [pc, #28]	; (13090 <pxCurrentTCBConst2>)
   13072:	6819      	ldr	r1, [r3, #0]
   13074:	6808      	ldr	r0, [r1, #0]
   13076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1307a:	f380 8809 	msr	PSP, r0
   1307e:	f3bf 8f6f 	isb	sy
   13082:	f04f 0000 	mov.w	r0, #0
   13086:	f380 8811 	msr	BASEPRI, r0
   1308a:	4770      	bx	lr
   1308c:	f3af 8000 	nop.w

00013090 <pxCurrentTCBConst2>:
   13090:	100003c4 	.word	0x100003c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   13094:	bf00      	nop
   13096:	bf00      	nop
   13098:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1309c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000130a0 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   130a0:	f3ef 8009 	mrs	r0, PSP
   130a4:	f3bf 8f6f 	isb	sy
   130a8:	4b15      	ldr	r3, [pc, #84]	; (13100 <pxCurrentTCBConst>)
   130aa:	681a      	ldr	r2, [r3, #0]
   130ac:	f01e 0f10 	tst.w	lr, #16
   130b0:	bf08      	it	eq
   130b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   130b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130ba:	6010      	str	r0, [r2, #0]
   130bc:	e92d 0009 	stmdb	sp!, {r0, r3}
   130c0:	f04f 0028 	mov.w	r0, #40	; 0x28
   130c4:	f380 8811 	msr	BASEPRI, r0
   130c8:	f3bf 8f4f 	dsb	sy
   130cc:	f3bf 8f6f 	isb	sy
   130d0:	f7ff ff64 	bl	12f9c <vTaskSwitchContext>
   130d4:	f04f 0000 	mov.w	r0, #0
   130d8:	f380 8811 	msr	BASEPRI, r0
   130dc:	bc09      	pop	{r0, r3}
   130de:	6819      	ldr	r1, [r3, #0]
   130e0:	6808      	ldr	r0, [r1, #0]
   130e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130e6:	f01e 0f10 	tst.w	lr, #16
   130ea:	bf08      	it	eq
   130ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   130f0:	f380 8809 	msr	PSP, r0
   130f4:	f3bf 8f6f 	isb	sy
   130f8:	4770      	bx	lr
   130fa:	bf00      	nop
   130fc:	f3af 8000 	nop.w

00013100 <pxCurrentTCBConst>:
   13100:	100003c4 	.word	0x100003c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   13104:	bf00      	nop
   13106:	bf00      	nop

00013108 <_out_null(char, void*, unsigned int, unsigned int)>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
   13108:	b510      	push	{r4, lr}
   1310a:	b084      	sub	sp, #16
   1310c:	4674      	mov	r4, lr
   1310e:	9102      	str	r1, [sp, #8]
   13110:	9201      	str	r2, [sp, #4]
   13112:	9300      	str	r3, [sp, #0]
   13114:	4603      	mov	r3, r0
   13116:	f88d 300f 	strb.w	r3, [sp, #15]
   1311a:	4623      	mov	r3, r4
   1311c:	4619      	mov	r1, r3
   1311e:	4805      	ldr	r0, [pc, #20]	; (13134 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   13120:	f7ff fef0 	bl	12f04 <__cyg_profile_func_enter>
   13124:	4623      	mov	r3, r4
   13126:	4619      	mov	r1, r3
   13128:	4802      	ldr	r0, [pc, #8]	; (13134 <_out_null(char, void*, unsigned int, unsigned int)+0x2c>)
   1312a:	f7ff feff 	bl	12f2c <__cyg_profile_func_exit>
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
   1312e:	bf00      	nop
   13130:	b004      	add	sp, #16
   13132:	bd10      	pop	{r4, pc}
   13134:	00013109 	.word	0x00013109

00013138 <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
   13138:	b510      	push	{r4, lr}
   1313a:	b084      	sub	sp, #16
   1313c:	4674      	mov	r4, lr
   1313e:	9102      	str	r1, [sp, #8]
   13140:	9201      	str	r2, [sp, #4]
   13142:	9300      	str	r3, [sp, #0]
   13144:	4603      	mov	r3, r0
   13146:	f88d 300f 	strb.w	r3, [sp, #15]
   1314a:	4623      	mov	r3, r4
   1314c:	4619      	mov	r1, r3
   1314e:	480a      	ldr	r0, [pc, #40]	; (13178 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   13150:	f7ff fed8 	bl	12f04 <__cyg_profile_func_enter>
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
   13154:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13158:	2b00      	cmp	r3, #0
   1315a:	d004      	beq.n	13166 <_out_char(char, void*, unsigned int, unsigned int)+0x2e>
    _putchar(character);
   1315c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13160:	4618      	mov	r0, r3
   13162:	f7ff fe65 	bl	12e30 <_putchar>
   13166:	4623      	mov	r3, r4
   13168:	4619      	mov	r1, r3
   1316a:	4803      	ldr	r0, [pc, #12]	; (13178 <_out_char(char, void*, unsigned int, unsigned int)+0x40>)
   1316c:	f7ff fede 	bl	12f2c <__cyg_profile_func_exit>
  }
}
   13170:	bf00      	nop
   13172:	b004      	add	sp, #16
   13174:	bd10      	pop	{r4, pc}
   13176:	bf00      	nop
   13178:	00013139 	.word	0x00013139

0001317c <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
   1317c:	b530      	push	{r4, r5, lr}
   1317e:	b085      	sub	sp, #20
   13180:	4674      	mov	r4, lr
   13182:	9001      	str	r0, [sp, #4]
   13184:	4623      	mov	r3, r4
   13186:	4619      	mov	r1, r3
   13188:	480c      	ldr	r0, [pc, #48]	; (131bc <_strlen(char const*)+0x40>)
   1318a:	f7ff febb 	bl	12f04 <__cyg_profile_func_enter>
  const char* s;
  for (s = str; *s; ++s);
   1318e:	9b01      	ldr	r3, [sp, #4]
   13190:	9303      	str	r3, [sp, #12]
   13192:	9b03      	ldr	r3, [sp, #12]
   13194:	781b      	ldrb	r3, [r3, #0]
   13196:	2b00      	cmp	r3, #0
   13198:	d003      	beq.n	131a2 <_strlen(char const*)+0x26>
   1319a:	9b03      	ldr	r3, [sp, #12]
   1319c:	3301      	adds	r3, #1
   1319e:	9303      	str	r3, [sp, #12]
   131a0:	e7f7      	b.n	13192 <_strlen(char const*)+0x16>
  return (unsigned int)(s - str);
   131a2:	9a03      	ldr	r2, [sp, #12]
   131a4:	9b01      	ldr	r3, [sp, #4]
   131a6:	1ad3      	subs	r3, r2, r3
   131a8:	461d      	mov	r5, r3
   131aa:	4623      	mov	r3, r4
   131ac:	4619      	mov	r1, r3
   131ae:	4803      	ldr	r0, [pc, #12]	; (131bc <_strlen(char const*)+0x40>)
   131b0:	f7ff febc 	bl	12f2c <__cyg_profile_func_exit>
   131b4:	462b      	mov	r3, r5
}
   131b6:	4618      	mov	r0, r3
   131b8:	b005      	add	sp, #20
   131ba:	bd30      	pop	{r4, r5, pc}
   131bc:	0001317d 	.word	0x0001317d

000131c0 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
   131c0:	b530      	push	{r4, r5, lr}
   131c2:	b083      	sub	sp, #12
   131c4:	4675      	mov	r5, lr
   131c6:	4603      	mov	r3, r0
   131c8:	f88d 3007 	strb.w	r3, [sp, #7]
   131cc:	462b      	mov	r3, r5
   131ce:	4619      	mov	r1, r3
   131d0:	480b      	ldr	r0, [pc, #44]	; (13200 <_is_digit(char)+0x40>)
   131d2:	f7ff fe97 	bl	12f04 <__cyg_profile_func_enter>
  return (ch >= '0') && (ch <= '9');
   131d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   131da:	2b2f      	cmp	r3, #47	; 0x2f
   131dc:	d905      	bls.n	131ea <_is_digit(char)+0x2a>
   131de:	f89d 3007 	ldrb.w	r3, [sp, #7]
   131e2:	2b39      	cmp	r3, #57	; 0x39
   131e4:	d801      	bhi.n	131ea <_is_digit(char)+0x2a>
   131e6:	2401      	movs	r4, #1
   131e8:	e000      	b.n	131ec <_is_digit(char)+0x2c>
   131ea:	2400      	movs	r4, #0
   131ec:	462b      	mov	r3, r5
   131ee:	4619      	mov	r1, r3
   131f0:	4803      	ldr	r0, [pc, #12]	; (13200 <_is_digit(char)+0x40>)
   131f2:	f7ff fe9b 	bl	12f2c <__cyg_profile_func_exit>
   131f6:	4623      	mov	r3, r4
}
   131f8:	4618      	mov	r0, r3
   131fa:	b003      	add	sp, #12
   131fc:	bd30      	pop	{r4, r5, pc}
   131fe:	bf00      	nop
   13200:	000131c1 	.word	0x000131c1

00013204 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
   13204:	b530      	push	{r4, r5, lr}
   13206:	b085      	sub	sp, #20
   13208:	4675      	mov	r5, lr
   1320a:	9001      	str	r0, [sp, #4]
   1320c:	462b      	mov	r3, r5
   1320e:	4619      	mov	r1, r3
   13210:	4813      	ldr	r0, [pc, #76]	; (13260 <_atoi(char const**)+0x5c>)
   13212:	f7ff fe77 	bl	12f04 <__cyg_profile_func_enter>
  unsigned int i = 0U;
   13216:	2300      	movs	r3, #0
   13218:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   1321a:	9b01      	ldr	r3, [sp, #4]
   1321c:	681b      	ldr	r3, [r3, #0]
   1321e:	781b      	ldrb	r3, [r3, #0]
   13220:	4618      	mov	r0, r3
   13222:	f7ff ffcd 	bl	131c0 <_is_digit(char)>
   13226:	4603      	mov	r3, r0
   13228:	2b00      	cmp	r3, #0
   1322a:	d00f      	beq.n	1324c <_atoi(char const**)+0x48>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
   1322c:	9a03      	ldr	r2, [sp, #12]
   1322e:	4613      	mov	r3, r2
   13230:	009b      	lsls	r3, r3, #2
   13232:	4413      	add	r3, r2
   13234:	005b      	lsls	r3, r3, #1
   13236:	4618      	mov	r0, r3
   13238:	9b01      	ldr	r3, [sp, #4]
   1323a:	681b      	ldr	r3, [r3, #0]
   1323c:	1c59      	adds	r1, r3, #1
   1323e:	9a01      	ldr	r2, [sp, #4]
   13240:	6011      	str	r1, [r2, #0]
   13242:	781b      	ldrb	r3, [r3, #0]
   13244:	4403      	add	r3, r0
   13246:	3b30      	subs	r3, #48	; 0x30
   13248:	9303      	str	r3, [sp, #12]
  while (_is_digit(**str)) {
   1324a:	e7e6      	b.n	1321a <_atoi(char const**)+0x16>
  }
  return i;
   1324c:	9c03      	ldr	r4, [sp, #12]
   1324e:	462b      	mov	r3, r5
   13250:	4619      	mov	r1, r3
   13252:	4803      	ldr	r0, [pc, #12]	; (13260 <_atoi(char const**)+0x5c>)
   13254:	f7ff fe6a 	bl	12f2c <__cyg_profile_func_exit>
   13258:	4623      	mov	r3, r4
}
   1325a:	4618      	mov	r0, r3
   1325c:	b005      	add	sp, #20
   1325e:	bd30      	pop	{r4, r5, pc}
   13260:	00013205 	.word	0x00013205

00013264 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
   13264:	b530      	push	{r4, r5, lr}
   13266:	b089      	sub	sp, #36	; 0x24
   13268:	4675      	mov	r5, lr
   1326a:	9003      	str	r0, [sp, #12]
   1326c:	9102      	str	r1, [sp, #8]
   1326e:	9201      	str	r2, [sp, #4]
   13270:	9300      	str	r3, [sp, #0]
   13272:	462b      	mov	r3, r5
   13274:	4619      	mov	r1, r3
   13276:	4891      	ldr	r0, [pc, #580]	; (134bc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   13278:	f7ff fe44 	bl	12f04 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   1327c:	9b01      	ldr	r3, [sp, #4]
   1327e:	9305      	str	r3, [sp, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13280:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13282:	f003 0302 	and.w	r3, r3, #2
   13286:	2b00      	cmp	r3, #0
   13288:	d10e      	bne.n	132a8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   1328a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1328c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1328e:	429a      	cmp	r2, r3
   13290:	d20a      	bcs.n	132a8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   13292:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13294:	2b1f      	cmp	r3, #31
   13296:	d807      	bhi.n	132a8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
    buf[len++] = '0';
   13298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1329a:	1c5a      	adds	r2, r3, #1
   1329c:	920d      	str	r2, [sp, #52]	; 0x34
   1329e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   132a0:	4413      	add	r3, r2
   132a2:	2230      	movs	r2, #48	; 0x30
   132a4:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   132a6:	e7eb      	b.n	13280 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   132a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   132aa:	f003 0302 	and.w	r3, r3, #2
   132ae:	2b00      	cmp	r3, #0
   132b0:	d113      	bne.n	132da <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   132b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   132b4:	f003 0301 	and.w	r3, r3, #1
   132b8:	2b00      	cmp	r3, #0
   132ba:	d00e      	beq.n	132da <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   132bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   132be:	9b11      	ldr	r3, [sp, #68]	; 0x44
   132c0:	429a      	cmp	r2, r3
   132c2:	d20a      	bcs.n	132da <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
   132c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   132c6:	2b1f      	cmp	r3, #31
   132c8:	d807      	bhi.n	132da <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x76>
    buf[len++] = '0';
   132ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   132cc:	1c5a      	adds	r2, r3, #1
   132ce:	920d      	str	r2, [sp, #52]	; 0x34
   132d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   132d2:	4413      	add	r3, r2
   132d4:	2230      	movs	r2, #48	; 0x30
   132d6:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   132d8:	e7e6      	b.n	132a8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
   132da:	9b12      	ldr	r3, [sp, #72]	; 0x48
   132dc:	f003 0310 	and.w	r3, r3, #16
   132e0:	2b00      	cmp	r3, #0
   132e2:	d058      	beq.n	13396 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
   132e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   132e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   132ea:	2b00      	cmp	r3, #0
   132ec:	d116      	bne.n	1331c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   132ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   132f0:	2b00      	cmp	r3, #0
   132f2:	d013      	beq.n	1331c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   132f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   132f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   132f8:	429a      	cmp	r2, r3
   132fa:	d003      	beq.n	13304 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   132fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   132fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13300:	429a      	cmp	r2, r3
   13302:	d10b      	bne.n	1331c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
      len--;
   13304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13306:	3b01      	subs	r3, #1
   13308:	930d      	str	r3, [sp, #52]	; 0x34
      if (len && (base == 16U)) {
   1330a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1330c:	2b00      	cmp	r3, #0
   1330e:	d005      	beq.n	1331c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   13310:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13312:	2b10      	cmp	r3, #16
   13314:	d102      	bne.n	1331c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
        len--;
   13316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13318:	3b01      	subs	r3, #1
   1331a:	930d      	str	r3, [sp, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1331c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1331e:	2b10      	cmp	r3, #16
   13320:	d10f      	bne.n	13342 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   13322:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13324:	f003 0320 	and.w	r3, r3, #32
   13328:	2b00      	cmp	r3, #0
   1332a:	d10a      	bne.n	13342 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
   1332c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1332e:	2b1f      	cmp	r3, #31
   13330:	d807      	bhi.n	13342 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xde>
      buf[len++] = 'x';
   13332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13334:	1c5a      	adds	r2, r3, #1
   13336:	920d      	str	r2, [sp, #52]	; 0x34
   13338:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1333a:	4413      	add	r3, r2
   1333c:	2278      	movs	r2, #120	; 0x78
   1333e:	701a      	strb	r2, [r3, #0]
   13340:	e01f      	b.n	13382 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13344:	2b10      	cmp	r3, #16
   13346:	d10f      	bne.n	13368 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   13348:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1334a:	f003 0320 	and.w	r3, r3, #32
   1334e:	2b00      	cmp	r3, #0
   13350:	d00a      	beq.n	13368 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   13352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13354:	2b1f      	cmp	r3, #31
   13356:	d807      	bhi.n	13368 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
      buf[len++] = 'X';
   13358:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1335a:	1c5a      	adds	r2, r3, #1
   1335c:	920d      	str	r2, [sp, #52]	; 0x34
   1335e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13360:	4413      	add	r3, r2
   13362:	2258      	movs	r2, #88	; 0x58
   13364:	701a      	strb	r2, [r3, #0]
   13366:	e00c      	b.n	13382 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13368:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1336a:	2b02      	cmp	r3, #2
   1336c:	d109      	bne.n	13382 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
   1336e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13370:	2b1f      	cmp	r3, #31
   13372:	d806      	bhi.n	13382 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x11e>
      buf[len++] = 'b';
   13374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13376:	1c5a      	adds	r2, r3, #1
   13378:	920d      	str	r2, [sp, #52]	; 0x34
   1337a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1337c:	4413      	add	r3, r2
   1337e:	2262      	movs	r2, #98	; 0x62
   13380:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
   13382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13384:	2b1f      	cmp	r3, #31
   13386:	d806      	bhi.n	13396 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x132>
      buf[len++] = '0';
   13388:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1338a:	1c5a      	adds	r2, r3, #1
   1338c:	920d      	str	r2, [sp, #52]	; 0x34
   1338e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13390:	4413      	add	r3, r2
   13392:	2230      	movs	r2, #48	; 0x30
   13394:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   13396:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13398:	2b00      	cmp	r3, #0
   1339a:	d014      	beq.n	133c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   1339c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1339e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   133a0:	429a      	cmp	r2, r3
   133a2:	d110      	bne.n	133c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
   133a4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   133a8:	2b00      	cmp	r3, #0
   133aa:	d109      	bne.n	133c0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   133ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
   133ae:	f003 0304 	and.w	r3, r3, #4
   133b2:	2b00      	cmp	r3, #0
   133b4:	d104      	bne.n	133c0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   133b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   133b8:	f003 0308 	and.w	r3, r3, #8
   133bc:	2b00      	cmp	r3, #0
   133be:	d002      	beq.n	133c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x162>
    len--;
   133c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   133c2:	3b01      	subs	r3, #1
   133c4:	930d      	str	r3, [sp, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
   133c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   133c8:	2b1f      	cmp	r3, #31
   133ca:	d824      	bhi.n	13416 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    if (negative) {
   133cc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   133d0:	2b00      	cmp	r3, #0
   133d2:	d007      	beq.n	133e4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x180>
      buf[len++] = '-';
   133d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   133d6:	1c5a      	adds	r2, r3, #1
   133d8:	920d      	str	r2, [sp, #52]	; 0x34
   133da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   133dc:	4413      	add	r3, r2
   133de:	222d      	movs	r2, #45	; 0x2d
   133e0:	701a      	strb	r2, [r3, #0]
   133e2:	e018      	b.n	13416 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_PLUS) {
   133e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   133e6:	f003 0304 	and.w	r3, r3, #4
   133ea:	2b00      	cmp	r3, #0
   133ec:	d007      	beq.n	133fe <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x19a>
      buf[len++] = '+';  // ignore the space if the '+' exists
   133ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   133f0:	1c5a      	adds	r2, r3, #1
   133f2:	920d      	str	r2, [sp, #52]	; 0x34
   133f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   133f6:	4413      	add	r3, r2
   133f8:	222b      	movs	r2, #43	; 0x2b
   133fa:	701a      	strb	r2, [r3, #0]
   133fc:	e00b      	b.n	13416 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
    }
    else if (flags & FLAGS_SPACE) {
   133fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13400:	f003 0308 	and.w	r3, r3, #8
   13404:	2b00      	cmp	r3, #0
   13406:	d006      	beq.n	13416 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b2>
      buf[len++] = ' ';
   13408:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1340a:	1c5a      	adds	r2, r3, #1
   1340c:	920d      	str	r2, [sp, #52]	; 0x34
   1340e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13410:	4413      	add	r3, r2
   13412:	2220      	movs	r2, #32
   13414:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   13416:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13418:	f003 0302 	and.w	r3, r3, #2
   1341c:	2b00      	cmp	r3, #0
   1341e:	d116      	bne.n	1344e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
   13420:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13422:	f003 0301 	and.w	r3, r3, #1
   13426:	2b00      	cmp	r3, #0
   13428:	d111      	bne.n	1344e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
    for (size_t i = len; i < width; i++) {
   1342a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1342c:	9307      	str	r3, [sp, #28]
   1342e:	9a07      	ldr	r2, [sp, #28]
   13430:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13432:	429a      	cmp	r2, r3
   13434:	d20b      	bcs.n	1344e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ea>
      out(' ', buffer, idx++, maxlen);
   13436:	9a01      	ldr	r2, [sp, #4]
   13438:	1c53      	adds	r3, r2, #1
   1343a:	9301      	str	r3, [sp, #4]
   1343c:	9c03      	ldr	r4, [sp, #12]
   1343e:	9b00      	ldr	r3, [sp, #0]
   13440:	9902      	ldr	r1, [sp, #8]
   13442:	2020      	movs	r0, #32
   13444:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   13446:	9b07      	ldr	r3, [sp, #28]
   13448:	3301      	adds	r3, #1
   1344a:	9307      	str	r3, [sp, #28]
   1344c:	e7ef      	b.n	1342e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ca>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   1344e:	2300      	movs	r3, #0
   13450:	9306      	str	r3, [sp, #24]
   13452:	9a06      	ldr	r2, [sp, #24]
   13454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13456:	429a      	cmp	r2, r3
   13458:	d211      	bcs.n	1347e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   1345a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1345c:	9b06      	ldr	r3, [sp, #24]
   1345e:	1ad3      	subs	r3, r2, r3
   13460:	3b01      	subs	r3, #1
   13462:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13464:	4413      	add	r3, r2
   13466:	7818      	ldrb	r0, [r3, #0]
   13468:	9a01      	ldr	r2, [sp, #4]
   1346a:	1c53      	adds	r3, r2, #1
   1346c:	9301      	str	r3, [sp, #4]
   1346e:	9c03      	ldr	r4, [sp, #12]
   13470:	9b00      	ldr	r3, [sp, #0]
   13472:	9902      	ldr	r1, [sp, #8]
   13474:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   13476:	9b06      	ldr	r3, [sp, #24]
   13478:	3301      	adds	r3, #1
   1347a:	9306      	str	r3, [sp, #24]
   1347c:	e7e9      	b.n	13452 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ee>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   1347e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13480:	f003 0302 	and.w	r3, r3, #2
   13484:	2b00      	cmp	r3, #0
   13486:	d00e      	beq.n	134a6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
    while (idx - start_idx < width) {
   13488:	9a01      	ldr	r2, [sp, #4]
   1348a:	9b05      	ldr	r3, [sp, #20]
   1348c:	1ad3      	subs	r3, r2, r3
   1348e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   13490:	429a      	cmp	r2, r3
   13492:	d908      	bls.n	134a6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x242>
      out(' ', buffer, idx++, maxlen);
   13494:	9a01      	ldr	r2, [sp, #4]
   13496:	1c53      	adds	r3, r2, #1
   13498:	9301      	str	r3, [sp, #4]
   1349a:	9c03      	ldr	r4, [sp, #12]
   1349c:	9b00      	ldr	r3, [sp, #0]
   1349e:	9902      	ldr	r1, [sp, #8]
   134a0:	2020      	movs	r0, #32
   134a2:	47a0      	blx	r4
    while (idx - start_idx < width) {
   134a4:	e7f0      	b.n	13488 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x224>
    }
  }

  return idx;
   134a6:	9c01      	ldr	r4, [sp, #4]
   134a8:	462b      	mov	r3, r5
   134aa:	4619      	mov	r1, r3
   134ac:	4803      	ldr	r0, [pc, #12]	; (134bc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x258>)
   134ae:	f7ff fd3d 	bl	12f2c <__cyg_profile_func_exit>
   134b2:	4623      	mov	r3, r4
}
   134b4:	4618      	mov	r0, r3
   134b6:	b009      	add	sp, #36	; 0x24
   134b8:	bd30      	pop	{r4, r5, pc}
   134ba:	bf00      	nop
   134bc:	00013265 	.word	0x00013265

000134c0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   134c0:	b530      	push	{r4, r5, lr}
   134c2:	b097      	sub	sp, #92	; 0x5c
   134c4:	4674      	mov	r4, lr
   134c6:	900b      	str	r0, [sp, #44]	; 0x2c
   134c8:	910a      	str	r1, [sp, #40]	; 0x28
   134ca:	9209      	str	r2, [sp, #36]	; 0x24
   134cc:	9308      	str	r3, [sp, #32]
   134ce:	4623      	mov	r3, r4
   134d0:	4619      	mov	r1, r3
   134d2:	4833      	ldr	r0, [pc, #204]	; (135a0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   134d4:	f7ff fd16 	bl	12f04 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   134d8:	2300      	movs	r3, #0
   134da:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   134dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   134de:	2b00      	cmp	r3, #0
   134e0:	d103      	bne.n	134ea <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x2a>
    flags &= ~FLAGS_HASH;
   134e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   134e4:	f023 0310 	bic.w	r3, r3, #16
   134e8:	931f      	str	r3, [sp, #124]	; 0x7c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   134ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   134ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   134f0:	2b00      	cmp	r3, #0
   134f2:	d002      	beq.n	134fa <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
   134f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   134f6:	2b00      	cmp	r3, #0
   134f8:	d033      	beq.n	13562 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
      const char digit = (char)(value % base);
   134fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   134fc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   134fe:	fbb3 f2f2 	udiv	r2, r3, r2
   13502:	991c      	ldr	r1, [sp, #112]	; 0x70
   13504:	fb01 f202 	mul.w	r2, r1, r2
   13508:	1a9b      	subs	r3, r3, r2
   1350a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   1350e:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13512:	2b09      	cmp	r3, #9
   13514:	d804      	bhi.n	13520 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x60>
   13516:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   1351a:	3330      	adds	r3, #48	; 0x30
   1351c:	b2da      	uxtb	r2, r3
   1351e:	e00d      	b.n	1353c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x7c>
   13520:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13522:	f003 0320 	and.w	r3, r3, #32
   13526:	2b00      	cmp	r3, #0
   13528:	d001      	beq.n	1352e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x6e>
   1352a:	2241      	movs	r2, #65	; 0x41
   1352c:	e000      	b.n	13530 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x70>
   1352e:	2261      	movs	r2, #97	; 0x61
   13530:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13534:	4413      	add	r3, r2
   13536:	b2db      	uxtb	r3, r3
   13538:	3b0a      	subs	r3, #10
   1353a:	b2da      	uxtb	r2, r3
   1353c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1353e:	1c59      	adds	r1, r3, #1
   13540:	9115      	str	r1, [sp, #84]	; 0x54
   13542:	a916      	add	r1, sp, #88	; 0x58
   13544:	440b      	add	r3, r1
   13546:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   1354a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1354c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1354e:	fbb2 f3f3 	udiv	r3, r2, r3
   13552:	931a      	str	r3, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   13554:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13556:	2b00      	cmp	r3, #0
   13558:	d003      	beq.n	13562 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
   1355a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1355c:	2b1f      	cmp	r3, #31
   1355e:	d800      	bhi.n	13562 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xa2>
    do {
   13560:	e7cb      	b.n	134fa <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   13562:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13564:	9306      	str	r3, [sp, #24]
   13566:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13568:	9305      	str	r3, [sp, #20]
   1356a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1356c:	9304      	str	r3, [sp, #16]
   1356e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   13570:	9303      	str	r3, [sp, #12]
   13572:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   13576:	9302      	str	r3, [sp, #8]
   13578:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1357a:	9301      	str	r3, [sp, #4]
   1357c:	ab0c      	add	r3, sp, #48	; 0x30
   1357e:	9300      	str	r3, [sp, #0]
   13580:	9b08      	ldr	r3, [sp, #32]
   13582:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13584:	990a      	ldr	r1, [sp, #40]	; 0x28
   13586:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13588:	f7ff fe6c 	bl	13264 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   1358c:	4605      	mov	r5, r0
   1358e:	4623      	mov	r3, r4
   13590:	4619      	mov	r1, r3
   13592:	4803      	ldr	r0, [pc, #12]	; (135a0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0xe0>)
   13594:	f7ff fcca 	bl	12f2c <__cyg_profile_func_exit>
   13598:	462b      	mov	r3, r5
}
   1359a:	4618      	mov	r0, r3
   1359c:	b017      	add	sp, #92	; 0x5c
   1359e:	bd30      	pop	{r4, r5, pc}
   135a0:	000134c1 	.word	0x000134c1

000135a4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   135a4:	b530      	push	{r4, r5, lr}
   135a6:	b097      	sub	sp, #92	; 0x5c
   135a8:	4675      	mov	r5, lr
   135aa:	900b      	str	r0, [sp, #44]	; 0x2c
   135ac:	910a      	str	r1, [sp, #40]	; 0x28
   135ae:	9209      	str	r2, [sp, #36]	; 0x24
   135b0:	9308      	str	r3, [sp, #32]
   135b2:	462b      	mov	r3, r5
   135b4:	4619      	mov	r1, r3
   135b6:	4837      	ldr	r0, [pc, #220]	; (13694 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   135b8:	f7ff fca4 	bl	12f04 <__cyg_profile_func_enter>
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
   135bc:	2300      	movs	r3, #0
   135be:	9315      	str	r3, [sp, #84]	; 0x54

  // no hash for 0 values
  if (!value) {
   135c0:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   135c4:	4323      	orrs	r3, r4
   135c6:	d103      	bne.n	135d0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x2c>
    flags &= ~FLAGS_HASH;
   135c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   135ca:	f023 0310 	bic.w	r3, r3, #16
   135ce:	9322      	str	r3, [sp, #136]	; 0x88
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   135d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   135d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   135d6:	2b00      	cmp	r3, #0
   135d8:	d003      	beq.n	135e2 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
   135da:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   135de:	4323      	orrs	r3, r4
   135e0:	d039      	beq.n	13656 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
      const char digit = (char)(value % base);
   135e2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   135e6:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   135ea:	f003 fceb 	bl	16fc4 <__aeabi_uldivmod>
   135ee:	461c      	mov	r4, r3
   135f0:	4613      	mov	r3, r2
   135f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   135f6:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   135fa:	2b09      	cmp	r3, #9
   135fc:	d804      	bhi.n	13608 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x64>
   135fe:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13602:	3330      	adds	r3, #48	; 0x30
   13604:	b2da      	uxtb	r2, r3
   13606:	e00d      	b.n	13624 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x80>
   13608:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1360a:	f003 0320 	and.w	r3, r3, #32
   1360e:	2b00      	cmp	r3, #0
   13610:	d001      	beq.n	13616 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x72>
   13612:	2241      	movs	r2, #65	; 0x41
   13614:	e000      	b.n	13618 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x74>
   13616:	2261      	movs	r2, #97	; 0x61
   13618:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   1361c:	4413      	add	r3, r2
   1361e:	b2db      	uxtb	r3, r3
   13620:	3b0a      	subs	r3, #10
   13622:	b2da      	uxtb	r2, r3
   13624:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13626:	1c59      	adds	r1, r3, #1
   13628:	9115      	str	r1, [sp, #84]	; 0x54
   1362a:	a916      	add	r1, sp, #88	; 0x58
   1362c:	440b      	add	r3, r1
   1362e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
   13632:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   13636:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   1363a:	f003 fcc3 	bl	16fc4 <__aeabi_uldivmod>
   1363e:	4603      	mov	r3, r0
   13640:	460c      	mov	r4, r1
   13642:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   13646:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
   1364a:	4323      	orrs	r3, r4
   1364c:	d003      	beq.n	13656 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
   1364e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13650:	2b1f      	cmp	r3, #31
   13652:	d800      	bhi.n	13656 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xb2>
    do {
   13654:	e7c5      	b.n	135e2 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x3e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   13656:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13658:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1365a:	9206      	str	r2, [sp, #24]
   1365c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1365e:	9205      	str	r2, [sp, #20]
   13660:	9a20      	ldr	r2, [sp, #128]	; 0x80
   13662:	9204      	str	r2, [sp, #16]
   13664:	9303      	str	r3, [sp, #12]
   13666:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   1366a:	9302      	str	r3, [sp, #8]
   1366c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1366e:	9301      	str	r3, [sp, #4]
   13670:	ab0c      	add	r3, sp, #48	; 0x30
   13672:	9300      	str	r3, [sp, #0]
   13674:	9b08      	ldr	r3, [sp, #32]
   13676:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13678:	990a      	ldr	r1, [sp, #40]	; 0x28
   1367a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1367c:	f7ff fdf2 	bl	13264 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
   13680:	4604      	mov	r4, r0
   13682:	462b      	mov	r3, r5
   13684:	4619      	mov	r1, r3
   13686:	4803      	ldr	r0, [pc, #12]	; (13694 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xf0>)
   13688:	f7ff fc50 	bl	12f2c <__cyg_profile_func_exit>
   1368c:	4623      	mov	r3, r4
}
   1368e:	4618      	mov	r0, r3
   13690:	b017      	add	sp, #92	; 0x5c
   13692:	bd30      	pop	{r4, r5, pc}
   13694:	000135a5 	.word	0x000135a5

00013698 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
   13698:	b530      	push	{r4, r5, lr}
   1369a:	b09b      	sub	sp, #108	; 0x6c
   1369c:	4675      	mov	r5, lr
   1369e:	9005      	str	r0, [sp, #20]
   136a0:	9104      	str	r1, [sp, #16]
   136a2:	9203      	str	r2, [sp, #12]
   136a4:	9302      	str	r3, [sp, #8]
   136a6:	ed8d 0b00 	vstr	d0, [sp]
   136aa:	462b      	mov	r3, r5
   136ac:	4619      	mov	r1, r3
   136ae:	48b7      	ldr	r0, [pc, #732]	; (1398c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f4>)
   136b0:	f7ff fc28 	bl	12f04 <__cyg_profile_func_enter>
  const size_t start_idx = idx;
   136b4:	9b03      	ldr	r3, [sp, #12]
   136b6:	9311      	str	r3, [sp, #68]	; 0x44

  float value = static_cast<float>(value_param);
   136b8:	e9dd 0100 	ldrd	r0, r1, [sp]
   136bc:	f003 fc32 	bl	16f24 <__aeabi_d2f>
   136c0:	4603      	mov	r3, r0
   136c2:	9319      	str	r3, [sp, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
   136c4:	2300      	movs	r3, #0
   136c6:	9318      	str	r3, [sp, #96]	; 0x60
  float diff = 0.0;
   136c8:	f04f 0300 	mov.w	r3, #0
   136cc:	9310      	str	r3, [sp, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
   136ce:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
   136d2:	930f      	str	r3, [sp, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
   136d4:	2300      	movs	r3, #0
   136d6:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
  if (value < 0) {
   136da:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   136de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   136e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   136e6:	d50a      	bpl.n	136fe <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x66>
    negative = true;
   136e8:	2301      	movs	r3, #1
   136ea:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    value = 0 - value;
   136ee:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 13990 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2f8>
   136f2:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   136f6:	ee77 7a67 	vsub.f32	s15, s14, s15
   136fa:	edcd 7a19 	vstr	s15, [sp, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
   136fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   13704:	2b00      	cmp	r3, #0
   13706:	d101      	bne.n	1370c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
    prec = 6U;
   13708:	2306      	movs	r3, #6
   1370a:	931e      	str	r3, [sp, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   1370c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1370e:	2b1f      	cmp	r3, #31
   13710:	d80e      	bhi.n	13730 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
   13712:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13714:	2b09      	cmp	r3, #9
   13716:	d90b      	bls.n	13730 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x98>
    buf[len++] = '0';
   13718:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1371a:	1c5a      	adds	r2, r3, #1
   1371c:	9218      	str	r2, [sp, #96]	; 0x60
   1371e:	aa1a      	add	r2, sp, #104	; 0x68
   13720:	4413      	add	r3, r2
   13722:	2230      	movs	r2, #48	; 0x30
   13724:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
   13728:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1372a:	3b01      	subs	r3, #1
   1372c:	931e      	str	r3, [sp, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
   1372e:	e7ed      	b.n	1370c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x74>
  }

  int whole = (int)value;
   13730:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   13734:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   13738:	ee17 3a90 	vmov	r3, s15
   1373c:	9316      	str	r3, [sp, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
   1373e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13740:	ee07 3a90 	vmov	s15, r3
   13744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   13748:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   1374c:	ee37 7a67 	vsub.f32	s14, s14, s15
   13750:	4a90      	ldr	r2, [pc, #576]	; (13994 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   13752:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13754:	009b      	lsls	r3, r3, #2
   13756:	4413      	add	r3, r2
   13758:	edd3 7a00 	vldr	s15, [r3]
   1375c:	ee67 7a27 	vmul.f32	s15, s14, s15
   13760:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
   13764:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
   13768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1376c:	ee17 3a90 	vmov	r3, s15
   13770:	9315      	str	r3, [sp, #84]	; 0x54
  diff = tmp - frac;
   13772:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13774:	ee07 3a90 	vmov	s15, r3
   13778:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1377c:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
   13780:	ee77 7a67 	vsub.f32	s15, s14, s15
   13784:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40

  if (diff > 0.5) {
   13788:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   1378c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   13790:	eef4 7ac7 	vcmpe.f32	s15, s14
   13794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13798:	dd18      	ble.n	137cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x134>
    ++frac;
   1379a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1379c:	3301      	adds	r3, #1
   1379e:	9315      	str	r3, [sp, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
   137a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   137a2:	ee07 3a90 	vmov	s15, r3
   137a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   137aa:	4a7a      	ldr	r2, [pc, #488]	; (13994 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>)
   137ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   137ae:	009b      	lsls	r3, r3, #2
   137b0:	4413      	add	r3, r2
   137b2:	edd3 7a00 	vldr	s15, [r3]
   137b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   137ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   137be:	db19      	blt.n	137f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
      frac = 0;
   137c0:	2300      	movs	r3, #0
   137c2:	9315      	str	r3, [sp, #84]	; 0x54
      ++whole;
   137c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   137c6:	3301      	adds	r3, #1
   137c8:	9316      	str	r3, [sp, #88]	; 0x58
   137ca:	e013      	b.n	137f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
   137cc:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   137d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   137d4:	eef4 7a47 	vcmp.f32	s15, s14
   137d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   137dc:	d10a      	bne.n	137f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
   137de:	9b15      	ldr	r3, [sp, #84]	; 0x54
   137e0:	2b00      	cmp	r3, #0
   137e2:	d004      	beq.n	137ee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
   137e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   137e6:	f003 0301 	and.w	r3, r3, #1
   137ea:	2b00      	cmp	r3, #0
   137ec:	d002      	beq.n	137f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x15c>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
   137ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   137f0:	3301      	adds	r3, #1
   137f2:	9315      	str	r3, [sp, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
   137f4:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
   137f8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 13998 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>
   137fc:	eef4 7ac7 	vcmpe.f32	s15, s14
   13800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13804:	dd01      	ble.n	1380a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x172>
    return 0U;
   13806:	2400      	movs	r4, #0
   13808:	e156      	b.n	13ab8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x420>
  }

  if (prec == 0U) {
   1380a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1380c:	2b00      	cmp	r3, #0
   1380e:	d129      	bne.n	13864 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1cc>
    diff = value - (float)whole;
   13810:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13812:	ee07 3a90 	vmov	s15, r3
   13816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1381a:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
   1381e:	ee77 7a67 	vsub.f32	s15, s14, s15
   13822:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
    if (diff > 0.5) {
   13826:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   1382a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1382e:	eef4 7ac7 	vcmpe.f32	s15, s14
   13832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13836:	dd03      	ble.n	13840 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a8>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
   13838:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1383a:	3301      	adds	r3, #1
   1383c:	9316      	str	r3, [sp, #88]	; 0x58
   1383e:	e05f      	b.n	13900 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
   13840:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
   13844:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   13848:	eef4 7a47 	vcmp.f32	s15, s14
   1384c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13850:	d156      	bne.n	13900 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
   13852:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13854:	f003 0301 	and.w	r3, r3, #1
   13858:	2b00      	cmp	r3, #0
   1385a:	d051      	beq.n	13900 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
   1385c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1385e:	3301      	adds	r3, #1
   13860:	9316      	str	r3, [sp, #88]	; 0x58
   13862:	e04d      	b.n	13900 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
   13864:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   13866:	9314      	str	r3, [sp, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13868:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1386a:	2b1f      	cmp	r3, #31
   1386c:	d827      	bhi.n	138be <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
      --count;
   1386e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13870:	3b01      	subs	r3, #1
   13872:	9314      	str	r3, [sp, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
   13874:	9915      	ldr	r1, [sp, #84]	; 0x54
   13876:	4b49      	ldr	r3, [pc, #292]	; (1399c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   13878:	fba3 2301 	umull	r2, r3, r3, r1
   1387c:	08da      	lsrs	r2, r3, #3
   1387e:	4613      	mov	r3, r2
   13880:	009b      	lsls	r3, r3, #2
   13882:	4413      	add	r3, r2
   13884:	005b      	lsls	r3, r3, #1
   13886:	1aca      	subs	r2, r1, r3
   13888:	b2d3      	uxtb	r3, r2
   1388a:	3330      	adds	r3, #48	; 0x30
   1388c:	b2d9      	uxtb	r1, r3
   1388e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13890:	1c5a      	adds	r2, r3, #1
   13892:	9218      	str	r2, [sp, #96]	; 0x60
   13894:	aa1a      	add	r2, sp, #104	; 0x68
   13896:	4413      	add	r3, r2
   13898:	460a      	mov	r2, r1
   1389a:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
   1389e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   138a0:	4a3e      	ldr	r2, [pc, #248]	; (1399c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>)
   138a2:	fba2 2303 	umull	r2, r3, r2, r3
   138a6:	08db      	lsrs	r3, r3, #3
   138a8:	9315      	str	r3, [sp, #84]	; 0x54
   138aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   138ac:	2b00      	cmp	r3, #0
   138ae:	bf0c      	ite	eq
   138b0:	2301      	moveq	r3, #1
   138b2:	2300      	movne	r3, #0
   138b4:	b2db      	uxtb	r3, r3
   138b6:	2b00      	cmp	r3, #0
   138b8:	d100      	bne.n	138bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x224>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
   138ba:	e7d5      	b.n	13868 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1d0>
        break;
   138bc:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   138be:	9b18      	ldr	r3, [sp, #96]	; 0x60
   138c0:	2b1f      	cmp	r3, #31
   138c2:	d806      	bhi.n	138d2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   138c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   138c6:	1e5a      	subs	r2, r3, #1
   138c8:	9214      	str	r2, [sp, #80]	; 0x50
   138ca:	2b00      	cmp	r3, #0
   138cc:	d001      	beq.n	138d2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23a>
   138ce:	2301      	movs	r3, #1
   138d0:	e000      	b.n	138d4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x23c>
   138d2:	2300      	movs	r3, #0
   138d4:	2b00      	cmp	r3, #0
   138d6:	d008      	beq.n	138ea <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x252>
      buf[len++] = '0';
   138d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   138da:	1c5a      	adds	r2, r3, #1
   138dc:	9218      	str	r2, [sp, #96]	; 0x60
   138de:	aa1a      	add	r2, sp, #104	; 0x68
   138e0:	4413      	add	r3, r2
   138e2:	2230      	movs	r2, #48	; 0x30
   138e4:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   138e8:	e7e9      	b.n	138be <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x226>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
   138ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
   138ec:	2b1f      	cmp	r3, #31
   138ee:	d807      	bhi.n	13900 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
   138f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   138f2:	1c5a      	adds	r2, r3, #1
   138f4:	9218      	str	r2, [sp, #96]	; 0x60
   138f6:	aa1a      	add	r2, sp, #104	; 0x68
   138f8:	4413      	add	r3, r2
   138fa:	222e      	movs	r2, #46	; 0x2e
   138fc:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13900:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13902:	2b1f      	cmp	r3, #31
   13904:	d828      	bhi.n	13958 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
    buf[len++] = (char)(48 + (whole % 10));
   13906:	9a16      	ldr	r2, [sp, #88]	; 0x58
   13908:	4b25      	ldr	r3, [pc, #148]	; (139a0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   1390a:	fb83 1302 	smull	r1, r3, r3, r2
   1390e:	1099      	asrs	r1, r3, #2
   13910:	17d3      	asrs	r3, r2, #31
   13912:	1ac9      	subs	r1, r1, r3
   13914:	460b      	mov	r3, r1
   13916:	009b      	lsls	r3, r3, #2
   13918:	440b      	add	r3, r1
   1391a:	005b      	lsls	r3, r3, #1
   1391c:	1ad1      	subs	r1, r2, r3
   1391e:	b2cb      	uxtb	r3, r1
   13920:	3330      	adds	r3, #48	; 0x30
   13922:	b2d9      	uxtb	r1, r3
   13924:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13926:	1c5a      	adds	r2, r3, #1
   13928:	9218      	str	r2, [sp, #96]	; 0x60
   1392a:	aa1a      	add	r2, sp, #104	; 0x68
   1392c:	4413      	add	r3, r2
   1392e:	460a      	mov	r2, r1
   13930:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
   13934:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13936:	4a1a      	ldr	r2, [pc, #104]	; (139a0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
   13938:	fb82 1203 	smull	r1, r2, r2, r3
   1393c:	1092      	asrs	r2, r2, #2
   1393e:	17db      	asrs	r3, r3, #31
   13940:	1ad3      	subs	r3, r2, r3
   13942:	9316      	str	r3, [sp, #88]	; 0x58
   13944:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13946:	2b00      	cmp	r3, #0
   13948:	bf0c      	ite	eq
   1394a:	2301      	moveq	r3, #1
   1394c:	2300      	movne	r3, #0
   1394e:	b2db      	uxtb	r3, r3
   13950:	2b00      	cmp	r3, #0
   13952:	d100      	bne.n	13956 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2be>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13954:	e7d4      	b.n	13900 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
   13956:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   13958:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1395a:	f003 0302 	and.w	r3, r3, #2
   1395e:	2b00      	cmp	r3, #0
   13960:	d120      	bne.n	139a4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   13962:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13964:	f003 0301 	and.w	r3, r3, #1
   13968:	2b00      	cmp	r3, #0
   1396a:	d01b      	beq.n	139a4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   1396c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1396e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13970:	429a      	cmp	r2, r3
   13972:	d217      	bcs.n	139a4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
   13974:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13976:	2b1f      	cmp	r3, #31
   13978:	d814      	bhi.n	139a4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>
    buf[len++] = '0';
   1397a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1397c:	1c5a      	adds	r2, r3, #1
   1397e:	9218      	str	r2, [sp, #96]	; 0x60
   13980:	aa1a      	add	r2, sp, #104	; 0x68
   13982:	4413      	add	r3, r2
   13984:	2230      	movs	r2, #48	; 0x30
   13986:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   1398a:	e7e5      	b.n	13958 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
   1398c:	00013699 	.word	0x00013699
   13990:	00000000 	.word	0x00000000
   13994:	0001808c 	.word	0x0001808c
   13998:	4f000000 	.word	0x4f000000
   1399c:	cccccccd 	.word	0xcccccccd
   139a0:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   139a4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   139a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   139a8:	429a      	cmp	r2, r3
   139aa:	d110      	bne.n	139ce <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
   139ac:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   139b0:	2b00      	cmp	r3, #0
   139b2:	d109      	bne.n	139c8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   139b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   139b6:	f003 0304 	and.w	r3, r3, #4
   139ba:	2b00      	cmp	r3, #0
   139bc:	d104      	bne.n	139c8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x330>
   139be:	9b20      	ldr	r3, [sp, #128]	; 0x80
   139c0:	f003 0308 	and.w	r3, r3, #8
   139c4:	2b00      	cmp	r3, #0
   139c6:	d002      	beq.n	139ce <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x336>
    len--;
   139c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   139ca:	3b01      	subs	r3, #1
   139cc:	9318      	str	r3, [sp, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
   139ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
   139d0:	2b1f      	cmp	r3, #31
   139d2:	d827      	bhi.n	13a24 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    if (negative) {
   139d4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   139d8:	2b00      	cmp	r3, #0
   139da:	d008      	beq.n	139ee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x356>
      buf[len++] = '-';
   139dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   139de:	1c5a      	adds	r2, r3, #1
   139e0:	9218      	str	r2, [sp, #96]	; 0x60
   139e2:	aa1a      	add	r2, sp, #104	; 0x68
   139e4:	4413      	add	r3, r2
   139e6:	222d      	movs	r2, #45	; 0x2d
   139e8:	f803 2c50 	strb.w	r2, [r3, #-80]
   139ec:	e01a      	b.n	13a24 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_PLUS) {
   139ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
   139f0:	f003 0304 	and.w	r3, r3, #4
   139f4:	2b00      	cmp	r3, #0
   139f6:	d008      	beq.n	13a0a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x372>
      buf[len++] = '+';  // ignore the space if the '+' exists
   139f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   139fa:	1c5a      	adds	r2, r3, #1
   139fc:	9218      	str	r2, [sp, #96]	; 0x60
   139fe:	aa1a      	add	r2, sp, #104	; 0x68
   13a00:	4413      	add	r3, r2
   13a02:	222b      	movs	r2, #43	; 0x2b
   13a04:	f803 2c50 	strb.w	r2, [r3, #-80]
   13a08:	e00c      	b.n	13a24 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
    }
    else if (flags & FLAGS_SPACE) {
   13a0a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13a0c:	f003 0308 	and.w	r3, r3, #8
   13a10:	2b00      	cmp	r3, #0
   13a12:	d007      	beq.n	13a24 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x38c>
      buf[len++] = ' ';
   13a14:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13a16:	1c5a      	adds	r2, r3, #1
   13a18:	9218      	str	r2, [sp, #96]	; 0x60
   13a1a:	aa1a      	add	r2, sp, #104	; 0x68
   13a1c:	4413      	add	r3, r2
   13a1e:	2220      	movs	r2, #32
   13a20:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   13a24:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13a26:	f003 0302 	and.w	r3, r3, #2
   13a2a:	2b00      	cmp	r3, #0
   13a2c:	d116      	bne.n	13a5c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
   13a2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13a30:	f003 0301 	and.w	r3, r3, #1
   13a34:	2b00      	cmp	r3, #0
   13a36:	d111      	bne.n	13a5c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
    for (size_t i = len; i < width; i++) {
   13a38:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13a3a:	9313      	str	r3, [sp, #76]	; 0x4c
   13a3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13a3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13a40:	429a      	cmp	r2, r3
   13a42:	d20b      	bcs.n	13a5c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c4>
      out(' ', buffer, idx++, maxlen);
   13a44:	9a03      	ldr	r2, [sp, #12]
   13a46:	1c53      	adds	r3, r2, #1
   13a48:	9303      	str	r3, [sp, #12]
   13a4a:	9c05      	ldr	r4, [sp, #20]
   13a4c:	9b02      	ldr	r3, [sp, #8]
   13a4e:	9904      	ldr	r1, [sp, #16]
   13a50:	2020      	movs	r0, #32
   13a52:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
   13a54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13a56:	3301      	adds	r3, #1
   13a58:	9313      	str	r3, [sp, #76]	; 0x4c
   13a5a:	e7ef      	b.n	13a3c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3a4>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   13a5c:	2300      	movs	r3, #0
   13a5e:	9312      	str	r3, [sp, #72]	; 0x48
   13a60:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13a62:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13a64:	429a      	cmp	r2, r3
   13a66:	d212      	bcs.n	13a8e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3f6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   13a68:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13a6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13a6c:	1ad3      	subs	r3, r2, r3
   13a6e:	3b01      	subs	r3, #1
   13a70:	aa1a      	add	r2, sp, #104	; 0x68
   13a72:	4413      	add	r3, r2
   13a74:	f813 0c50 	ldrb.w	r0, [r3, #-80]
   13a78:	9a03      	ldr	r2, [sp, #12]
   13a7a:	1c53      	adds	r3, r2, #1
   13a7c:	9303      	str	r3, [sp, #12]
   13a7e:	9c05      	ldr	r4, [sp, #20]
   13a80:	9b02      	ldr	r3, [sp, #8]
   13a82:	9904      	ldr	r1, [sp, #16]
   13a84:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
   13a86:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13a88:	3301      	adds	r3, #1
   13a8a:	9312      	str	r3, [sp, #72]	; 0x48
   13a8c:	e7e8      	b.n	13a60 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3c8>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   13a8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13a90:	f003 0302 	and.w	r3, r3, #2
   13a94:	2b00      	cmp	r3, #0
   13a96:	d00e      	beq.n	13ab6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
    while (idx - start_idx < width) {
   13a98:	9a03      	ldr	r2, [sp, #12]
   13a9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13a9c:	1ad3      	subs	r3, r2, r3
   13a9e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13aa0:	429a      	cmp	r2, r3
   13aa2:	d908      	bls.n	13ab6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41e>
      out(' ', buffer, idx++, maxlen);
   13aa4:	9a03      	ldr	r2, [sp, #12]
   13aa6:	1c53      	adds	r3, r2, #1
   13aa8:	9303      	str	r3, [sp, #12]
   13aaa:	9c05      	ldr	r4, [sp, #20]
   13aac:	9b02      	ldr	r3, [sp, #8]
   13aae:	9904      	ldr	r1, [sp, #16]
   13ab0:	2020      	movs	r0, #32
   13ab2:	47a0      	blx	r4
    while (idx - start_idx < width) {
   13ab4:	e7f0      	b.n	13a98 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x400>
    }
  }

  return idx;
   13ab6:	9c03      	ldr	r4, [sp, #12]
   13ab8:	462b      	mov	r3, r5
   13aba:	4619      	mov	r1, r3
   13abc:	4803      	ldr	r0, [pc, #12]	; (13acc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x434>)
   13abe:	f7ff fa35 	bl	12f2c <__cyg_profile_func_exit>
   13ac2:	4623      	mov	r3, r4
}
   13ac4:	4618      	mov	r0, r3
   13ac6:	b01b      	add	sp, #108	; 0x6c
   13ac8:	bd30      	pop	{r4, r5, pc}
   13aca:	bf00      	nop
   13acc:	00013699 	.word	0x00013699

00013ad0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
   13ad0:	b570      	push	{r4, r5, r6, lr}
   13ad2:	b0a0      	sub	sp, #128	; 0x80
   13ad4:	4676      	mov	r6, lr
   13ad6:	900d      	str	r0, [sp, #52]	; 0x34
   13ad8:	910c      	str	r1, [sp, #48]	; 0x30
   13ada:	920b      	str	r2, [sp, #44]	; 0x2c
   13adc:	930a      	str	r3, [sp, #40]	; 0x28
   13ade:	4633      	mov	r3, r6
   13ae0:	4619      	mov	r1, r3
   13ae2:	48a7      	ldr	r0, [pc, #668]	; (13d80 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b0>)
   13ae4:	f7ff fa0e 	bl	12f04 <__cyg_profile_func_enter>
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
   13ae8:	2300      	movs	r3, #0
   13aea:	931b      	str	r3, [sp, #108]	; 0x6c

  if (!buffer) {
   13aec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13aee:	2b00      	cmp	r3, #0
   13af0:	d101      	bne.n	13af6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    // use null output function
    out = _out_null;
   13af2:	4ba4      	ldr	r3, [pc, #656]	; (13d84 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b4>)
   13af4:	930d      	str	r3, [sp, #52]	; 0x34
  }

  while (*format)
   13af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13af8:	781b      	ldrb	r3, [r3, #0]
   13afa:	2b00      	cmp	r3, #0
   13afc:	f000 8448 	beq.w	14390 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
   13b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b02:	781b      	ldrb	r3, [r3, #0]
   13b04:	2b25      	cmp	r3, #37	; 0x25
   13b06:	d00d      	beq.n	13b24 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>
      // no
      out(*format, buffer, idx++, maxlen);
   13b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b0a:	7818      	ldrb	r0, [r3, #0]
   13b0c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13b0e:	1c53      	adds	r3, r2, #1
   13b10:	931b      	str	r3, [sp, #108]	; 0x6c
   13b12:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   13b14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13b16:	990c      	ldr	r1, [sp, #48]	; 0x30
   13b18:	47a0      	blx	r4
      format++;
   13b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b1c:	3301      	adds	r3, #1
   13b1e:	930a      	str	r3, [sp, #40]	; 0x28
      continue;
   13b20:	f000 bc34 	b.w	1438c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
    }
    else {
      // yes, evaluate it
      format++;
   13b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b26:	3301      	adds	r3, #1
   13b28:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate flags
    flags = 0U;
   13b2a:	2300      	movs	r3, #0
   13b2c:	931f      	str	r3, [sp, #124]	; 0x7c
    do {
      switch (*format) {
   13b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b30:	781b      	ldrb	r3, [r3, #0]
   13b32:	3b20      	subs	r3, #32
   13b34:	2b10      	cmp	r3, #16
   13b36:	d857      	bhi.n	13be8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x118>
   13b38:	a201      	add	r2, pc, #4	; (adr r2, 13b40 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70>)
   13b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13b3e:	bf00      	nop
   13b40:	00013bc1 	.word	0x00013bc1
   13b44:	00013be9 	.word	0x00013be9
   13b48:	00013be9 	.word	0x00013be9
   13b4c:	00013bd5 	.word	0x00013bd5
   13b50:	00013be9 	.word	0x00013be9
   13b54:	00013be9 	.word	0x00013be9
   13b58:	00013be9 	.word	0x00013be9
   13b5c:	00013be9 	.word	0x00013be9
   13b60:	00013be9 	.word	0x00013be9
   13b64:	00013be9 	.word	0x00013be9
   13b68:	00013be9 	.word	0x00013be9
   13b6c:	00013bad 	.word	0x00013bad
   13b70:	00013be9 	.word	0x00013be9
   13b74:	00013b99 	.word	0x00013b99
   13b78:	00013be9 	.word	0x00013be9
   13b7c:	00013be9 	.word	0x00013be9
   13b80:	00013b85 	.word	0x00013b85
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
   13b84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13b86:	f043 0301 	orr.w	r3, r3, #1
   13b8a:	931f      	str	r3, [sp, #124]	; 0x7c
   13b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b8e:	3301      	adds	r3, #1
   13b90:	930a      	str	r3, [sp, #40]	; 0x28
   13b92:	2301      	movs	r3, #1
   13b94:	931c      	str	r3, [sp, #112]	; 0x70
   13b96:	e02a      	b.n	13bee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
   13b98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13b9a:	f043 0302 	orr.w	r3, r3, #2
   13b9e:	931f      	str	r3, [sp, #124]	; 0x7c
   13ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ba2:	3301      	adds	r3, #1
   13ba4:	930a      	str	r3, [sp, #40]	; 0x28
   13ba6:	2301      	movs	r3, #1
   13ba8:	931c      	str	r3, [sp, #112]	; 0x70
   13baa:	e020      	b.n	13bee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
   13bac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13bae:	f043 0304 	orr.w	r3, r3, #4
   13bb2:	931f      	str	r3, [sp, #124]	; 0x7c
   13bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13bb6:	3301      	adds	r3, #1
   13bb8:	930a      	str	r3, [sp, #40]	; 0x28
   13bba:	2301      	movs	r3, #1
   13bbc:	931c      	str	r3, [sp, #112]	; 0x70
   13bbe:	e016      	b.n	13bee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
   13bc0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13bc2:	f043 0308 	orr.w	r3, r3, #8
   13bc6:	931f      	str	r3, [sp, #124]	; 0x7c
   13bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13bca:	3301      	adds	r3, #1
   13bcc:	930a      	str	r3, [sp, #40]	; 0x28
   13bce:	2301      	movs	r3, #1
   13bd0:	931c      	str	r3, [sp, #112]	; 0x70
   13bd2:	e00c      	b.n	13bee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
   13bd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13bd6:	f043 0310 	orr.w	r3, r3, #16
   13bda:	931f      	str	r3, [sp, #124]	; 0x7c
   13bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13bde:	3301      	adds	r3, #1
   13be0:	930a      	str	r3, [sp, #40]	; 0x28
   13be2:	2301      	movs	r3, #1
   13be4:	931c      	str	r3, [sp, #112]	; 0x70
   13be6:	e002      	b.n	13bee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11e>
        default :                                   n = 0U; break;
   13be8:	2300      	movs	r3, #0
   13bea:	931c      	str	r3, [sp, #112]	; 0x70
   13bec:	bf00      	nop
      }
    } while (n);
   13bee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   13bf0:	2b00      	cmp	r3, #0
   13bf2:	d000      	beq.n	13bf6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x126>
    do {
   13bf4:	e79b      	b.n	13b2e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5e>

    // evaluate width field
    width = 0U;
   13bf6:	2300      	movs	r3, #0
   13bf8:	931e      	str	r3, [sp, #120]	; 0x78
    if (_is_digit(*format)) {
   13bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13bfc:	781b      	ldrb	r3, [r3, #0]
   13bfe:	4618      	mov	r0, r3
   13c00:	f7ff fade 	bl	131c0 <_is_digit(char)>
   13c04:	4603      	mov	r3, r0
   13c06:	2b00      	cmp	r3, #0
   13c08:	d005      	beq.n	13c16 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x146>
      width = _atoi(&format);
   13c0a:	ab0a      	add	r3, sp, #40	; 0x28
   13c0c:	4618      	mov	r0, r3
   13c0e:	f7ff faf9 	bl	13204 <_atoi(char const**)>
   13c12:	901e      	str	r0, [sp, #120]	; 0x78
   13c14:	e018      	b.n	13c48 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
    }
    else if (*format == '*') {
   13c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c18:	781b      	ldrb	r3, [r3, #0]
   13c1a:	2b2a      	cmp	r3, #42	; 0x2a
   13c1c:	d114      	bne.n	13c48 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x178>
      const int w = va_arg(va, int);
   13c1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13c20:	1d1a      	adds	r2, r3, #4
   13c22:	9224      	str	r2, [sp, #144]	; 0x90
   13c24:	681b      	ldr	r3, [r3, #0]
   13c26:	9316      	str	r3, [sp, #88]	; 0x58
      if (w < 0) {
   13c28:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13c2a:	2b00      	cmp	r3, #0
   13c2c:	da07      	bge.n	13c3e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16e>
        flags |= FLAGS_LEFT;    // reverse padding
   13c2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13c30:	f043 0302 	orr.w	r3, r3, #2
   13c34:	931f      	str	r3, [sp, #124]	; 0x7c
        width = (unsigned int)-w;
   13c36:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13c38:	425b      	negs	r3, r3
   13c3a:	931e      	str	r3, [sp, #120]	; 0x78
   13c3c:	e001      	b.n	13c42 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x172>
      }
      else {
        width = (unsigned int)w;
   13c3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13c40:	931e      	str	r3, [sp, #120]	; 0x78
      }
      format++;
   13c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c44:	3301      	adds	r3, #1
   13c46:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // evaluate precision field
    precision = 0U;
   13c48:	2300      	movs	r3, #0
   13c4a:	931d      	str	r3, [sp, #116]	; 0x74
    if (*format == '.') {
   13c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c4e:	781b      	ldrb	r3, [r3, #0]
   13c50:	2b2e      	cmp	r3, #46	; 0x2e
   13c52:	d124      	bne.n	13c9e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      flags |= FLAGS_PRECISION;
   13c54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   13c5a:	931f      	str	r3, [sp, #124]	; 0x7c
      format++;
   13c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c5e:	3301      	adds	r3, #1
   13c60:	930a      	str	r3, [sp, #40]	; 0x28
      if (_is_digit(*format)) {
   13c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c64:	781b      	ldrb	r3, [r3, #0]
   13c66:	4618      	mov	r0, r3
   13c68:	f7ff faaa 	bl	131c0 <_is_digit(char)>
   13c6c:	4603      	mov	r3, r0
   13c6e:	2b00      	cmp	r3, #0
   13c70:	d005      	beq.n	13c7e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ae>
        precision = _atoi(&format);
   13c72:	ab0a      	add	r3, sp, #40	; 0x28
   13c74:	4618      	mov	r0, r3
   13c76:	f7ff fac5 	bl	13204 <_atoi(char const**)>
   13c7a:	901d      	str	r0, [sp, #116]	; 0x74
   13c7c:	e00f      	b.n	13c9e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
      }
      else if (*format == '*') {
   13c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c80:	781b      	ldrb	r3, [r3, #0]
   13c82:	2b2a      	cmp	r3, #42	; 0x2a
   13c84:	d10b      	bne.n	13c9e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1ce>
        const int prec = (int)va_arg(va, int);
   13c86:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13c88:	1d1a      	adds	r2, r3, #4
   13c8a:	9224      	str	r2, [sp, #144]	; 0x90
   13c8c:	681b      	ldr	r3, [r3, #0]
   13c8e:	9315      	str	r3, [sp, #84]	; 0x54
        precision = prec > 0 ? (unsigned int)prec : 0U;
   13c90:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13c92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13c96:	931d      	str	r3, [sp, #116]	; 0x74
        format++;
   13c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c9a:	3301      	adds	r3, #1
   13c9c:	930a      	str	r3, [sp, #40]	; 0x28
      }
    }

    // evaluate length field
    switch (*format) {
   13c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ca0:	781b      	ldrb	r3, [r3, #0]
   13ca2:	3b68      	subs	r3, #104	; 0x68
   13ca4:	2b12      	cmp	r3, #18
   13ca6:	d867      	bhi.n	13d78 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
   13ca8:	a201      	add	r2, pc, #4	; (adr r2, 13cb0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1e0>)
   13caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13cae:	bf00      	nop
   13cb0:	00013d23 	.word	0x00013d23
   13cb4:	00013d79 	.word	0x00013d79
   13cb8:	00013d59 	.word	0x00013d59
   13cbc:	00013d79 	.word	0x00013d79
   13cc0:	00013cfd 	.word	0x00013cfd
   13cc4:	00013d79 	.word	0x00013d79
   13cc8:	00013d79 	.word	0x00013d79
   13ccc:	00013d79 	.word	0x00013d79
   13cd0:	00013d79 	.word	0x00013d79
   13cd4:	00013d79 	.word	0x00013d79
   13cd8:	00013d79 	.word	0x00013d79
   13cdc:	00013d79 	.word	0x00013d79
   13ce0:	00013d49 	.word	0x00013d49
   13ce4:	00013d79 	.word	0x00013d79
   13ce8:	00013d79 	.word	0x00013d79
   13cec:	00013d79 	.word	0x00013d79
   13cf0:	00013d79 	.word	0x00013d79
   13cf4:	00013d79 	.word	0x00013d79
   13cf8:	00013d69 	.word	0x00013d69
      case 'l' :
        flags |= FLAGS_LONG;
   13cfc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13d02:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d06:	3301      	adds	r3, #1
   13d08:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'l') {
   13d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d0c:	781b      	ldrb	r3, [r3, #0]
   13d0e:	2b6c      	cmp	r3, #108	; 0x6c
   13d10:	d134      	bne.n	13d7c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
          flags |= FLAGS_LONG_LONG;
   13d12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13d14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   13d18:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   13d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d1c:	3301      	adds	r3, #1
   13d1e:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   13d20:	e02c      	b.n	13d7c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
   13d22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13d28:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d2c:	3301      	adds	r3, #1
   13d2e:	930a      	str	r3, [sp, #40]	; 0x28
        if (*format == 'h') {
   13d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d32:	781b      	ldrb	r3, [r3, #0]
   13d34:	2b68      	cmp	r3, #104	; 0x68
   13d36:	d127      	bne.n	13d88 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
          flags |= FLAGS_CHAR;
   13d38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13d3e:	931f      	str	r3, [sp, #124]	; 0x7c
          format++;
   13d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d42:	3301      	adds	r3, #1
   13d44:	930a      	str	r3, [sp, #40]	; 0x28
        }
        break;
   13d46:	e01f      	b.n	13d88 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2b8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13d48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13d4e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d52:	3301      	adds	r3, #1
   13d54:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13d56:	e018      	b.n	13d8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13d58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   13d5e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d62:	3301      	adds	r3, #1
   13d64:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13d66:	e010      	b.n	13d8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13d68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13d6e:	931f      	str	r3, [sp, #124]	; 0x7c
        format++;
   13d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d72:	3301      	adds	r3, #1
   13d74:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   13d76:	e008      	b.n	13d8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
      default :
        break;
   13d78:	bf00      	nop
   13d7a:	e006      	b.n	13d8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
        break;
   13d7c:	bf00      	nop
   13d7e:	e004      	b.n	13d8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2ba>
   13d80:	00013ad1 	.word	0x00013ad1
   13d84:	00013109 	.word	0x00013109
        break;
   13d88:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
   13d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d8c:	781b      	ldrb	r3, [r3, #0]
   13d8e:	3b25      	subs	r3, #37	; 0x25
   13d90:	2b53      	cmp	r3, #83	; 0x53
   13d92:	f200 82ee 	bhi.w	14372 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a2>
   13d96:	a201      	add	r2, pc, #4	; (adr r2, 13d9c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2cc>)
   13d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13d9c:	0001435b 	.word	0x0001435b
   13da0:	00014373 	.word	0x00014373
   13da4:	00014373 	.word	0x00014373
   13da8:	00014373 	.word	0x00014373
   13dac:	00014373 	.word	0x00014373
   13db0:	00014373 	.word	0x00014373
   13db4:	00014373 	.word	0x00014373
   13db8:	00014373 	.word	0x00014373
   13dbc:	00014373 	.word	0x00014373
   13dc0:	00014373 	.word	0x00014373
   13dc4:	00014373 	.word	0x00014373
   13dc8:	00014373 	.word	0x00014373
   13dcc:	00014373 	.word	0x00014373
   13dd0:	00014373 	.word	0x00014373
   13dd4:	00014373 	.word	0x00014373
   13dd8:	00014373 	.word	0x00014373
   13ddc:	00014373 	.word	0x00014373
   13de0:	00014373 	.word	0x00014373
   13de4:	00014373 	.word	0x00014373
   13de8:	00014373 	.word	0x00014373
   13dec:	00014373 	.word	0x00014373
   13df0:	00014373 	.word	0x00014373
   13df4:	00014373 	.word	0x00014373
   13df8:	00014373 	.word	0x00014373
   13dfc:	00014373 	.word	0x00014373
   13e00:	00014373 	.word	0x00014373
   13e04:	00014373 	.word	0x00014373
   13e08:	00014373 	.word	0x00014373
   13e0c:	00014373 	.word	0x00014373
   13e10:	00014373 	.word	0x00014373
   13e14:	00014373 	.word	0x00014373
   13e18:	00014373 	.word	0x00014373
   13e1c:	00014373 	.word	0x00014373
   13e20:	00014179 	.word	0x00014179
   13e24:	00014373 	.word	0x00014373
   13e28:	00014373 	.word	0x00014373
   13e2c:	00014373 	.word	0x00014373
   13e30:	00014373 	.word	0x00014373
   13e34:	00014373 	.word	0x00014373
   13e38:	00014373 	.word	0x00014373
   13e3c:	00014373 	.word	0x00014373
   13e40:	00014373 	.word	0x00014373
   13e44:	00014373 	.word	0x00014373
   13e48:	00014373 	.word	0x00014373
   13e4c:	00014373 	.word	0x00014373
   13e50:	00014373 	.word	0x00014373
   13e54:	00014373 	.word	0x00014373
   13e58:	00014373 	.word	0x00014373
   13e5c:	00014373 	.word	0x00014373
   13e60:	00014373 	.word	0x00014373
   13e64:	00014373 	.word	0x00014373
   13e68:	00013eed 	.word	0x00013eed
   13e6c:	00014373 	.word	0x00014373
   13e70:	00014373 	.word	0x00014373
   13e74:	00014373 	.word	0x00014373
   13e78:	00014373 	.word	0x00014373
   13e7c:	00014373 	.word	0x00014373
   13e80:	00014373 	.word	0x00014373
   13e84:	00014373 	.word	0x00014373
   13e88:	00014373 	.word	0x00014373
   13e8c:	00014373 	.word	0x00014373
   13e90:	00013eed 	.word	0x00013eed
   13e94:	000141b5 	.word	0x000141b5
   13e98:	00013eed 	.word	0x00013eed
   13e9c:	00014373 	.word	0x00014373
   13ea0:	00014179 	.word	0x00014179
   13ea4:	00014373 	.word	0x00014373
   13ea8:	00014373 	.word	0x00014373
   13eac:	00013eed 	.word	0x00013eed
   13eb0:	00014373 	.word	0x00014373
   13eb4:	00014373 	.word	0x00014373
   13eb8:	00014373 	.word	0x00014373
   13ebc:	00014373 	.word	0x00014373
   13ec0:	00014373 	.word	0x00014373
   13ec4:	00013eed 	.word	0x00013eed
   13ec8:	00014313 	.word	0x00014313
   13ecc:	00014373 	.word	0x00014373
   13ed0:	00014373 	.word	0x00014373
   13ed4:	0001423d 	.word	0x0001423d
   13ed8:	00014373 	.word	0x00014373
   13edc:	00013eed 	.word	0x00013eed
   13ee0:	00014373 	.word	0x00014373
   13ee4:	00014373 	.word	0x00014373
   13ee8:	00013eed 	.word	0x00013eed
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
   13eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13eee:	781b      	ldrb	r3, [r3, #0]
   13ef0:	2b78      	cmp	r3, #120	; 0x78
   13ef2:	d003      	beq.n	13efc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x42c>
   13ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ef6:	781b      	ldrb	r3, [r3, #0]
   13ef8:	2b58      	cmp	r3, #88	; 0x58
   13efa:	d102      	bne.n	13f02 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x432>
          base = 16U;
   13efc:	2310      	movs	r3, #16
   13efe:	931a      	str	r3, [sp, #104]	; 0x68
   13f00:	e013      	b.n	13f2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'o') {
   13f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f04:	781b      	ldrb	r3, [r3, #0]
   13f06:	2b6f      	cmp	r3, #111	; 0x6f
   13f08:	d102      	bne.n	13f10 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x440>
          base =  8U;
   13f0a:	2308      	movs	r3, #8
   13f0c:	931a      	str	r3, [sp, #104]	; 0x68
   13f0e:	e00c      	b.n	13f2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else if (*format == 'b') {
   13f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f12:	781b      	ldrb	r3, [r3, #0]
   13f14:	2b62      	cmp	r3, #98	; 0x62
   13f16:	d102      	bne.n	13f1e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44e>
          base =  2U;
   13f18:	2302      	movs	r3, #2
   13f1a:	931a      	str	r3, [sp, #104]	; 0x68
   13f1c:	e005      	b.n	13f2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
        }
        else {
          base = 10U;
   13f1e:	230a      	movs	r3, #10
   13f20:	931a      	str	r3, [sp, #104]	; 0x68
          flags &= ~FLAGS_HASH;   // no hash for dec format
   13f22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f24:	f023 0310 	bic.w	r3, r3, #16
   13f28:	931f      	str	r3, [sp, #124]	; 0x7c
        }
        // uppercase
        if (*format == 'X') {
   13f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f2c:	781b      	ldrb	r3, [r3, #0]
   13f2e:	2b58      	cmp	r3, #88	; 0x58
   13f30:	d103      	bne.n	13f3a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x46a>
          flags |= FLAGS_UPPERCASE;
   13f32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f34:	f043 0320 	orr.w	r3, r3, #32
   13f38:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
   13f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f3c:	781b      	ldrb	r3, [r3, #0]
   13f3e:	2b69      	cmp	r3, #105	; 0x69
   13f40:	d007      	beq.n	13f52 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
   13f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f44:	781b      	ldrb	r3, [r3, #0]
   13f46:	2b64      	cmp	r3, #100	; 0x64
   13f48:	d003      	beq.n	13f52 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x482>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
   13f4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f4c:	f023 030c 	bic.w	r3, r3, #12
   13f50:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
   13f52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   13f58:	2b00      	cmp	r3, #0
   13f5a:	d003      	beq.n	13f64 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x494>
          flags &= ~FLAGS_ZEROPAD;
   13f5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f5e:	f023 0301 	bic.w	r3, r3, #1
   13f62:	931f      	str	r3, [sp, #124]	; 0x7c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
   13f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f66:	781b      	ldrb	r3, [r3, #0]
   13f68:	2b69      	cmp	r3, #105	; 0x69
   13f6a:	d004      	beq.n	13f76 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a6>
   13f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f6e:	781b      	ldrb	r3, [r3, #0]
   13f70:	2b64      	cmp	r3, #100	; 0x64
   13f72:	f040 808d 	bne.w	14090 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5c0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
   13f76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
   13f7c:	2b00      	cmp	r3, #0
   13f7e:	d02e      	beq.n	13fde <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
   13f80:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13f82:	3307      	adds	r3, #7
   13f84:	f023 0307 	bic.w	r3, r3, #7
   13f88:	f103 0208 	add.w	r2, r3, #8
   13f8c:	9224      	str	r2, [sp, #144]	; 0x90
   13f8e:	e9d3 3400 	ldrd	r3, r4, [r3]
   13f92:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   13f96:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   13f9a:	2b00      	cmp	r3, #0
   13f9c:	f174 0200 	sbcs.w	r2, r4, #0
   13fa0:	da02      	bge.n	13fa8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4d8>
   13fa2:	425b      	negs	r3, r3
   13fa4:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   13fa8:	4619      	mov	r1, r3
   13faa:	4622      	mov	r2, r4
   13fac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13fae:	0fdb      	lsrs	r3, r3, #31
   13fb0:	b2d8      	uxtb	r0, r3
   13fb2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13fb4:	f04f 0400 	mov.w	r4, #0
   13fb8:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   13fba:	9508      	str	r5, [sp, #32]
   13fbc:	9d1e      	ldr	r5, [sp, #120]	; 0x78
   13fbe:	9507      	str	r5, [sp, #28]
   13fc0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   13fc2:	9506      	str	r5, [sp, #24]
   13fc4:	e9cd 3404 	strd	r3, r4, [sp, #16]
   13fc8:	9002      	str	r0, [sp, #8]
   13fca:	e9cd 1200 	strd	r1, r2, [sp]
   13fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13fd0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13fd2:	990c      	ldr	r1, [sp, #48]	; 0x30
   13fd4:	980d      	ldr	r0, [sp, #52]	; 0x34
   13fd6:	f7ff fae5 	bl	135a4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   13fda:	901b      	str	r0, [sp, #108]	; 0x6c
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
   13fdc:	e0c8      	b.n	14170 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          else if (flags & FLAGS_LONG) {
   13fde:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
   13fe4:	2b00      	cmp	r3, #0
   13fe6:	d01e      	beq.n	14026 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x556>
            const long value = va_arg(va, long);
   13fe8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13fea:	1d1a      	adds	r2, r3, #4
   13fec:	9224      	str	r2, [sp, #144]	; 0x90
   13fee:	681b      	ldr	r3, [r3, #0]
   13ff0:	9311      	str	r3, [sp, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   13ff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13ff4:	2b00      	cmp	r3, #0
   13ff6:	bfb8      	it	lt
   13ff8:	425b      	neglt	r3, r3
   13ffa:	4619      	mov	r1, r3
   13ffc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13ffe:	0fdb      	lsrs	r3, r3, #31
   14000:	b2db      	uxtb	r3, r3
   14002:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   14004:	9205      	str	r2, [sp, #20]
   14006:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14008:	9204      	str	r2, [sp, #16]
   1400a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1400c:	9203      	str	r2, [sp, #12]
   1400e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   14010:	9202      	str	r2, [sp, #8]
   14012:	9301      	str	r3, [sp, #4]
   14014:	9100      	str	r1, [sp, #0]
   14016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14018:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1401a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1401c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1401e:	f7ff fa4f 	bl	134c0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   14022:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   14024:	e0a4      	b.n	14170 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
   14026:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14028:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1402c:	2b00      	cmp	r3, #0
   1402e:	d005      	beq.n	1403c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x56c>
   14030:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14032:	1d1a      	adds	r2, r3, #4
   14034:	9224      	str	r2, [sp, #144]	; 0x90
   14036:	681b      	ldr	r3, [r3, #0]
   14038:	b2db      	uxtb	r3, r3
   1403a:	e00e      	b.n	1405a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   1403c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1403e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   14042:	2b00      	cmp	r3, #0
   14044:	d005      	beq.n	14052 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x582>
   14046:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14048:	1d1a      	adds	r2, r3, #4
   1404a:	9224      	str	r2, [sp, #144]	; 0x90
   1404c:	681b      	ldr	r3, [r3, #0]
   1404e:	b21b      	sxth	r3, r3
   14050:	e003      	b.n	1405a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x58a>
   14052:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14054:	1d1a      	adds	r2, r3, #4
   14056:	9224      	str	r2, [sp, #144]	; 0x90
   14058:	681b      	ldr	r3, [r3, #0]
   1405a:	9312      	str	r3, [sp, #72]	; 0x48
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   1405c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1405e:	2b00      	cmp	r3, #0
   14060:	bfb8      	it	lt
   14062:	425b      	neglt	r3, r3
   14064:	4619      	mov	r1, r3
   14066:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14068:	0fdb      	lsrs	r3, r3, #31
   1406a:	b2db      	uxtb	r3, r3
   1406c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1406e:	9205      	str	r2, [sp, #20]
   14070:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14072:	9204      	str	r2, [sp, #16]
   14074:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   14076:	9203      	str	r2, [sp, #12]
   14078:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1407a:	9202      	str	r2, [sp, #8]
   1407c:	9301      	str	r3, [sp, #4]
   1407e:	9100      	str	r1, [sp, #0]
   14080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14082:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14084:	990c      	ldr	r1, [sp, #48]	; 0x30
   14086:	980d      	ldr	r0, [sp, #52]	; 0x34
   14088:	f7ff fa1a 	bl	134c0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   1408c:	901b      	str	r0, [sp, #108]	; 0x6c
          }
   1408e:	e06f      	b.n	14170 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
   14090:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14092:	f403 7300 	and.w	r3, r3, #512	; 0x200
   14096:	2b00      	cmp	r3, #0
   14098:	d020      	beq.n	140dc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x60c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
   1409a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1409c:	3307      	adds	r3, #7
   1409e:	f023 0307 	bic.w	r3, r3, #7
   140a2:	f103 0208 	add.w	r2, r3, #8
   140a6:	9224      	str	r2, [sp, #144]	; 0x90
   140a8:	e9d3 3400 	ldrd	r3, r4, [r3]
   140ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   140ae:	4611      	mov	r1, r2
   140b0:	f04f 0200 	mov.w	r2, #0
   140b4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   140b6:	9008      	str	r0, [sp, #32]
   140b8:	981e      	ldr	r0, [sp, #120]	; 0x78
   140ba:	9007      	str	r0, [sp, #28]
   140bc:	981d      	ldr	r0, [sp, #116]	; 0x74
   140be:	9006      	str	r0, [sp, #24]
   140c0:	e9cd 1204 	strd	r1, r2, [sp, #16]
   140c4:	2200      	movs	r2, #0
   140c6:	9202      	str	r2, [sp, #8]
   140c8:	e9cd 3400 	strd	r3, r4, [sp]
   140cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   140ce:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   140d0:	990c      	ldr	r1, [sp, #48]	; 0x30
   140d2:	980d      	ldr	r0, [sp, #52]	; 0x34
   140d4:	f7ff fa66 	bl	135a4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
   140d8:	901b      	str	r0, [sp, #108]	; 0x6c
   140da:	e049      	b.n	14170 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
#endif
          }
          else if (flags & FLAGS_LONG) {
   140dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   140de:	f403 7380 	and.w	r3, r3, #256	; 0x100
   140e2:	2b00      	cmp	r3, #0
   140e4:	d016      	beq.n	14114 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x644>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
   140e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   140e8:	1d1a      	adds	r2, r3, #4
   140ea:	9224      	str	r2, [sp, #144]	; 0x90
   140ec:	681b      	ldr	r3, [r3, #0]
   140ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   140f0:	9205      	str	r2, [sp, #20]
   140f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   140f4:	9204      	str	r2, [sp, #16]
   140f6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   140f8:	9203      	str	r2, [sp, #12]
   140fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   140fc:	9202      	str	r2, [sp, #8]
   140fe:	2200      	movs	r2, #0
   14100:	9201      	str	r2, [sp, #4]
   14102:	9300      	str	r3, [sp, #0]
   14104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14106:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14108:	990c      	ldr	r1, [sp, #48]	; 0x30
   1410a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1410c:	f7ff f9d8 	bl	134c0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   14110:	901b      	str	r0, [sp, #108]	; 0x6c
   14112:	e02d      	b.n	14170 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6a0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
   14114:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14116:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1411a:	2b00      	cmp	r3, #0
   1411c:	d005      	beq.n	1412a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x65a>
   1411e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14120:	1d1a      	adds	r2, r3, #4
   14122:	9224      	str	r2, [sp, #144]	; 0x90
   14124:	681b      	ldr	r3, [r3, #0]
   14126:	b2db      	uxtb	r3, r3
   14128:	e00e      	b.n	14148 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   1412a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1412c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   14130:	2b00      	cmp	r3, #0
   14132:	d005      	beq.n	14140 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x670>
   14134:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14136:	1d1a      	adds	r2, r3, #4
   14138:	9224      	str	r2, [sp, #144]	; 0x90
   1413a:	681b      	ldr	r3, [r3, #0]
   1413c:	b29b      	uxth	r3, r3
   1413e:	e003      	b.n	14148 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x678>
   14140:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14142:	1d1a      	adds	r2, r3, #4
   14144:	9224      	str	r2, [sp, #144]	; 0x90
   14146:	681b      	ldr	r3, [r3, #0]
   14148:	9313      	str	r3, [sp, #76]	; 0x4c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
   1414a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1414c:	9305      	str	r3, [sp, #20]
   1414e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14150:	9304      	str	r3, [sp, #16]
   14152:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14154:	9303      	str	r3, [sp, #12]
   14156:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   14158:	9302      	str	r3, [sp, #8]
   1415a:	2300      	movs	r3, #0
   1415c:	9301      	str	r3, [sp, #4]
   1415e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   14160:	9300      	str	r3, [sp, #0]
   14162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14164:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14166:	990c      	ldr	r1, [sp, #48]	; 0x30
   14168:	980d      	ldr	r0, [sp, #52]	; 0x34
   1416a:	f7ff f9a9 	bl	134c0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   1416e:	901b      	str	r0, [sp, #108]	; 0x6c
          }
        }
        format++;
   14170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14172:	3301      	adds	r3, #1
   14174:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14176:	e109      	b.n	1438c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
   14178:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1417a:	3307      	adds	r3, #7
   1417c:	f023 0307 	bic.w	r3, r3, #7
   14180:	f103 0208 	add.w	r2, r3, #8
   14184:	9224      	str	r2, [sp, #144]	; 0x90
   14186:	ed93 7b00 	vldr	d7, [r3]
   1418a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1418c:	9302      	str	r3, [sp, #8]
   1418e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14190:	9301      	str	r3, [sp, #4]
   14192:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14194:	9300      	str	r3, [sp, #0]
   14196:	eeb0 0a47 	vmov.f32	s0, s14
   1419a:	eef0 0a67 	vmov.f32	s1, s15
   1419e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   141a0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   141a2:	990c      	ldr	r1, [sp, #48]	; 0x30
   141a4:	980d      	ldr	r0, [sp, #52]	; 0x34
   141a6:	f7ff fa77 	bl	13698 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
   141aa:	901b      	str	r0, [sp, #108]	; 0x6c
        format++;
   141ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   141ae:	3301      	adds	r3, #1
   141b0:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   141b2:	e0eb      	b.n	1438c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
   141b4:	2301      	movs	r3, #1
   141b6:	9319      	str	r3, [sp, #100]	; 0x64
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
   141b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   141ba:	f003 0302 	and.w	r3, r3, #2
   141be:	2b00      	cmp	r3, #0
   141c0:	d113      	bne.n	141ea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
          while (l++ < width) {
   141c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   141c4:	1c5a      	adds	r2, r3, #1
   141c6:	9219      	str	r2, [sp, #100]	; 0x64
   141c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   141ca:	429a      	cmp	r2, r3
   141cc:	bf8c      	ite	hi
   141ce:	2301      	movhi	r3, #1
   141d0:	2300      	movls	r3, #0
   141d2:	b2db      	uxtb	r3, r3
   141d4:	2b00      	cmp	r3, #0
   141d6:	d008      	beq.n	141ea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x71a>
            out(' ', buffer, idx++, maxlen);
   141d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   141da:	1c53      	adds	r3, r2, #1
   141dc:	931b      	str	r3, [sp, #108]	; 0x6c
   141de:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   141e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   141e2:	990c      	ldr	r1, [sp, #48]	; 0x30
   141e4:	2020      	movs	r0, #32
   141e6:	47a0      	blx	r4
          while (l++ < width) {
   141e8:	e7eb      	b.n	141c2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6f2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
   141ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
   141ec:	1d1a      	adds	r2, r3, #4
   141ee:	9224      	str	r2, [sp, #144]	; 0x90
   141f0:	681b      	ldr	r3, [r3, #0]
   141f2:	b2d8      	uxtb	r0, r3
   141f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   141f6:	1c53      	adds	r3, r2, #1
   141f8:	931b      	str	r3, [sp, #108]	; 0x6c
   141fa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   141fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   141fe:	990c      	ldr	r1, [sp, #48]	; 0x30
   14200:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
   14202:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14204:	f003 0302 	and.w	r3, r3, #2
   14208:	2b00      	cmp	r3, #0
   1420a:	d013      	beq.n	14234 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
          while (l++ < width) {
   1420c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1420e:	1c5a      	adds	r2, r3, #1
   14210:	9219      	str	r2, [sp, #100]	; 0x64
   14212:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14214:	429a      	cmp	r2, r3
   14216:	bf8c      	ite	hi
   14218:	2301      	movhi	r3, #1
   1421a:	2300      	movls	r3, #0
   1421c:	b2db      	uxtb	r3, r3
   1421e:	2b00      	cmp	r3, #0
   14220:	d008      	beq.n	14234 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x764>
            out(' ', buffer, idx++, maxlen);
   14222:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14224:	1c53      	adds	r3, r2, #1
   14226:	931b      	str	r3, [sp, #108]	; 0x6c
   14228:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1422a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1422c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1422e:	2020      	movs	r0, #32
   14230:	47a0      	blx	r4
          while (l++ < width) {
   14232:	e7eb      	b.n	1420c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x73c>
          }
        }
        format++;
   14234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14236:	3301      	adds	r3, #1
   14238:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1423a:	e0a7      	b.n	1438c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 's' : {
        char* p = va_arg(va, char*);
   1423c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1423e:	1d1a      	adds	r2, r3, #4
   14240:	9224      	str	r2, [sp, #144]	; 0x90
   14242:	681b      	ldr	r3, [r3, #0]
   14244:	9318      	str	r3, [sp, #96]	; 0x60
        unsigned int l = _strlen(p);
   14246:	9818      	ldr	r0, [sp, #96]	; 0x60
   14248:	f7fe ff98 	bl	1317c <_strlen(char const*)>
   1424c:	9017      	str	r0, [sp, #92]	; 0x5c
        // pre padding
        if (flags & FLAGS_PRECISION) {
   1424e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   14254:	2b00      	cmp	r3, #0
   14256:	d007      	beq.n	14268 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x798>
          l = (l < precision ? l : precision);
   14258:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1425a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1425c:	429a      	cmp	r2, r3
   1425e:	d201      	bcs.n	14264 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x794>
   14260:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14262:	e000      	b.n	14266 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x796>
   14264:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14266:	9317      	str	r3, [sp, #92]	; 0x5c
        }
        if (!(flags & FLAGS_LEFT)) {
   14268:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1426a:	f003 0302 	and.w	r3, r3, #2
   1426e:	2b00      	cmp	r3, #0
   14270:	d113      	bne.n	1429a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
          while (l++ < width) {
   14272:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14274:	1c5a      	adds	r2, r3, #1
   14276:	9217      	str	r2, [sp, #92]	; 0x5c
   14278:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1427a:	429a      	cmp	r2, r3
   1427c:	bf8c      	ite	hi
   1427e:	2301      	movhi	r3, #1
   14280:	2300      	movls	r3, #0
   14282:	b2db      	uxtb	r3, r3
   14284:	2b00      	cmp	r3, #0
   14286:	d008      	beq.n	1429a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
            out(' ', buffer, idx++, maxlen);
   14288:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1428a:	1c53      	adds	r3, r2, #1
   1428c:	931b      	str	r3, [sp, #108]	; 0x6c
   1428e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14292:	990c      	ldr	r1, [sp, #48]	; 0x30
   14294:	2020      	movs	r0, #32
   14296:	47a0      	blx	r4
          while (l++ < width) {
   14298:	e7eb      	b.n	14272 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7a2>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   1429a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1429c:	781b      	ldrb	r3, [r3, #0]
   1429e:	2b00      	cmp	r3, #0
   142a0:	d00b      	beq.n	142ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   142a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   142a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   142a8:	2b00      	cmp	r3, #0
   142aa:	d004      	beq.n	142b6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7e6>
   142ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   142ae:	1e5a      	subs	r2, r3, #1
   142b0:	921d      	str	r2, [sp, #116]	; 0x74
   142b2:	2b00      	cmp	r3, #0
   142b4:	d001      	beq.n	142ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
   142b6:	2301      	movs	r3, #1
   142b8:	e000      	b.n	142bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ec>
   142ba:	2300      	movs	r3, #0
   142bc:	2b00      	cmp	r3, #0
   142be:	d00b      	beq.n	142d8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x808>
          out(*(p++), buffer, idx++, maxlen);
   142c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   142c2:	1c5a      	adds	r2, r3, #1
   142c4:	9218      	str	r2, [sp, #96]	; 0x60
   142c6:	7818      	ldrb	r0, [r3, #0]
   142c8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   142ca:	1c53      	adds	r3, r2, #1
   142cc:	931b      	str	r3, [sp, #108]	; 0x6c
   142ce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   142d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   142d2:	990c      	ldr	r1, [sp, #48]	; 0x30
   142d4:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   142d6:	e7e0      	b.n	1429a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ca>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
   142d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   142da:	f003 0302 	and.w	r3, r3, #2
   142de:	2b00      	cmp	r3, #0
   142e0:	d013      	beq.n	1430a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
          while (l++ < width) {
   142e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   142e4:	1c5a      	adds	r2, r3, #1
   142e6:	9217      	str	r2, [sp, #92]	; 0x5c
   142e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   142ea:	429a      	cmp	r2, r3
   142ec:	bf8c      	ite	hi
   142ee:	2301      	movhi	r3, #1
   142f0:	2300      	movls	r3, #0
   142f2:	b2db      	uxtb	r3, r3
   142f4:	2b00      	cmp	r3, #0
   142f6:	d008      	beq.n	1430a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83a>
            out(' ', buffer, idx++, maxlen);
   142f8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   142fa:	1c53      	adds	r3, r2, #1
   142fc:	931b      	str	r3, [sp, #108]	; 0x6c
   142fe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14302:	990c      	ldr	r1, [sp, #48]	; 0x30
   14304:	2020      	movs	r0, #32
   14306:	47a0      	blx	r4
          while (l++ < width) {
   14308:	e7eb      	b.n	142e2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x812>
          }
        }
        format++;
   1430a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1430c:	3301      	adds	r3, #1
   1430e:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14310:	e03c      	b.n	1438c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
   14312:	2308      	movs	r3, #8
   14314:	931e      	str	r3, [sp, #120]	; 0x78
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
   14316:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14318:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   1431c:	931f      	str	r3, [sp, #124]	; 0x7c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
   1431e:	2300      	movs	r3, #0
   14320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
   14324:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14326:	1d1a      	adds	r2, r3, #4
   14328:	9224      	str	r2, [sp, #144]	; 0x90
   1432a:	681b      	ldr	r3, [r3, #0]
   1432c:	461a      	mov	r2, r3
   1432e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14330:	9305      	str	r3, [sp, #20]
   14332:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14334:	9304      	str	r3, [sp, #16]
   14336:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14338:	9303      	str	r3, [sp, #12]
   1433a:	2310      	movs	r3, #16
   1433c:	9302      	str	r3, [sp, #8]
   1433e:	2300      	movs	r3, #0
   14340:	9301      	str	r3, [sp, #4]
   14342:	9200      	str	r2, [sp, #0]
   14344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14346:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14348:	990c      	ldr	r1, [sp, #48]	; 0x30
   1434a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1434c:	f7ff f8b8 	bl	134c0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
   14350:	901b      	str	r0, [sp, #108]	; 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
   14352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14354:	3301      	adds	r3, #1
   14356:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14358:	e018      	b.n	1438c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
   1435a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1435c:	1c53      	adds	r3, r2, #1
   1435e:	931b      	str	r3, [sp, #108]	; 0x6c
   14360:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14364:	990c      	ldr	r1, [sp, #48]	; 0x30
   14366:	2025      	movs	r0, #37	; 0x25
   14368:	47a0      	blx	r4
        format++;
   1436a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1436c:	3301      	adds	r3, #1
   1436e:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   14370:	e00c      	b.n	1438c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8bc>

      default :
        out(*format, buffer, idx++, maxlen);
   14372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14374:	7818      	ldrb	r0, [r3, #0]
   14376:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14378:	1c53      	adds	r3, r2, #1
   1437a:	931b      	str	r3, [sp, #108]	; 0x6c
   1437c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1437e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14380:	990c      	ldr	r1, [sp, #48]	; 0x30
   14382:	47a0      	blx	r4
        format++;
   14384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14386:	3301      	adds	r3, #1
   14388:	930a      	str	r3, [sp, #40]	; 0x28
        break;
   1438a:	bf00      	nop
  while (*format)
   1438c:	f7ff bbb3 	b.w	13af6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x26>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
   14390:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14394:	429a      	cmp	r2, r3
   14396:	d302      	bcc.n	1439e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ce>
   14398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1439a:	1e5a      	subs	r2, r3, #1
   1439c:	e000      	b.n	143a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8d0>
   1439e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   143a0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   143a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   143a4:	990c      	ldr	r1, [sp, #48]	; 0x30
   143a6:	2000      	movs	r0, #0
   143a8:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
   143aa:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   143ac:	4633      	mov	r3, r6
   143ae:	4619      	mov	r1, r3
   143b0:	4803      	ldr	r0, [pc, #12]	; (143c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8f0>)
   143b2:	f7fe fdbb 	bl	12f2c <__cyg_profile_func_exit>
   143b6:	4623      	mov	r3, r4
}
   143b8:	4618      	mov	r0, r3
   143ba:	b020      	add	sp, #128	; 0x80
   143bc:	bd70      	pop	{r4, r5, r6, pc}
   143be:	bf00      	nop
   143c0:	00013ad1 	.word	0x00013ad1

000143c4 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
   143c4:	b40f      	push	{r0, r1, r2, r3}
   143c6:	b530      	push	{r4, r5, lr}
   143c8:	b087      	sub	sp, #28
   143ca:	4675      	mov	r5, lr
   143cc:	462b      	mov	r3, r5
   143ce:	4619      	mov	r1, r3
   143d0:	480d      	ldr	r0, [pc, #52]	; (14408 <printf+0x44>)
   143d2:	f7fe fd97 	bl	12f04 <__cyg_profile_func_enter>
  va_list va;
  va_start(va, format);
   143d6:	ab0b      	add	r3, sp, #44	; 0x2c
   143d8:	9304      	str	r3, [sp, #16]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
   143da:	a903      	add	r1, sp, #12
   143dc:	9b04      	ldr	r3, [sp, #16]
   143de:	9300      	str	r3, [sp, #0]
   143e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   143e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   143e6:	4809      	ldr	r0, [pc, #36]	; (1440c <printf+0x48>)
   143e8:	f7ff fb72 	bl	13ad0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
   143ec:	9005      	str	r0, [sp, #20]
  va_end(va);
  return ret;
   143ee:	9c05      	ldr	r4, [sp, #20]
   143f0:	462b      	mov	r3, r5
   143f2:	4619      	mov	r1, r3
   143f4:	4804      	ldr	r0, [pc, #16]	; (14408 <printf+0x44>)
   143f6:	f7fe fd99 	bl	12f2c <__cyg_profile_func_exit>
   143fa:	4623      	mov	r3, r4
}
   143fc:	4618      	mov	r0, r3
   143fe:	b007      	add	sp, #28
   14400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   14404:	b004      	add	sp, #16
   14406:	4770      	bx	lr
   14408:	000143c5 	.word	0x000143c5
   1440c:	00013139 	.word	0x00013139

00014410 <PinInterface::PinInterface()>:
class PinInterface
   14410:	b530      	push	{r4, r5, lr}
   14412:	b083      	sub	sp, #12
   14414:	4675      	mov	r5, lr
   14416:	9001      	str	r0, [sp, #4]
   14418:	462b      	mov	r3, r5
   1441a:	4619      	mov	r1, r3
   1441c:	4807      	ldr	r0, [pc, #28]	; (1443c <PinInterface::PinInterface()+0x2c>)
   1441e:	f7fe fd71 	bl	12f04 <__cyg_profile_func_enter>
   14422:	4a07      	ldr	r2, [pc, #28]	; (14440 <PinInterface::PinInterface()+0x30>)
   14424:	9b01      	ldr	r3, [sp, #4]
   14426:	601a      	str	r2, [r3, #0]
   14428:	9c01      	ldr	r4, [sp, #4]
   1442a:	462b      	mov	r3, r5
   1442c:	4619      	mov	r1, r3
   1442e:	4803      	ldr	r0, [pc, #12]	; (1443c <PinInterface::PinInterface()+0x2c>)
   14430:	f7fe fd7c 	bl	12f2c <__cyg_profile_func_exit>
   14434:	4623      	mov	r3, r4
   14436:	4618      	mov	r0, r3
   14438:	b003      	add	sp, #12
   1443a:	bd30      	pop	{r4, r5, pc}
   1443c:	00014411 	.word	0x00014411
   14440:	0001927c 	.word	0x0001927c

00014444 <Pin::Pin(unsigned char, unsigned char)>:
  constexpr Pin(uint8_t port_number, uint8_t pin_number)
   14444:	b530      	push	{r4, r5, lr}
   14446:	b083      	sub	sp, #12
   14448:	4675      	mov	r5, lr
   1444a:	9001      	str	r0, [sp, #4]
   1444c:	460b      	mov	r3, r1
   1444e:	f88d 3003 	strb.w	r3, [sp, #3]
   14452:	4613      	mov	r3, r2
   14454:	f88d 3002 	strb.w	r3, [sp, #2]
   14458:	462b      	mov	r3, r5
   1445a:	4619      	mov	r1, r3
   1445c:	480d      	ldr	r0, [pc, #52]	; (14494 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   1445e:	f7fe fd51 	bl	12f04 <__cyg_profile_func_enter>
      : port_(port_number), pin_(pin_number)
   14462:	9b01      	ldr	r3, [sp, #4]
   14464:	4618      	mov	r0, r3
   14466:	f7ff ffd3 	bl	14410 <PinInterface::PinInterface()>
   1446a:	4a0b      	ldr	r2, [pc, #44]	; (14498 <Pin::Pin(unsigned char, unsigned char)+0x54>)
   1446c:	9b01      	ldr	r3, [sp, #4]
   1446e:	601a      	str	r2, [r3, #0]
   14470:	9b01      	ldr	r3, [sp, #4]
   14472:	f89d 2003 	ldrb.w	r2, [sp, #3]
   14476:	711a      	strb	r2, [r3, #4]
   14478:	9b01      	ldr	r3, [sp, #4]
   1447a:	f89d 2002 	ldrb.w	r2, [sp, #2]
   1447e:	715a      	strb	r2, [r3, #5]
  }
   14480:	9c01      	ldr	r4, [sp, #4]
   14482:	462b      	mov	r3, r5
   14484:	4619      	mov	r1, r3
   14486:	4803      	ldr	r0, [pc, #12]	; (14494 <Pin::Pin(unsigned char, unsigned char)+0x50>)
   14488:	f7fe fd50 	bl	12f2c <__cyg_profile_func_exit>
   1448c:	4623      	mov	r3, r4
   1448e:	4618      	mov	r0, r3
   14490:	b003      	add	sp, #12
   14492:	bd30      	pop	{r4, r5, pc}
   14494:	00014445 	.word	0x00014445
   14498:	00017be0 	.word	0x00017be0

0001449c <GpioInterface::GpioInterface()>:
#include "L0_LowLevel/LPC40xx.h"
#include "L1_Drivers/pin.hpp"
#include "utility/enum.hpp"
#include "utility/log.hpp"

class GpioInterface
   1449c:	b530      	push	{r4, r5, lr}
   1449e:	b083      	sub	sp, #12
   144a0:	4675      	mov	r5, lr
   144a2:	9001      	str	r0, [sp, #4]
   144a4:	462b      	mov	r3, r5
   144a6:	4619      	mov	r1, r3
   144a8:	4807      	ldr	r0, [pc, #28]	; (144c8 <GpioInterface::GpioInterface()+0x2c>)
   144aa:	f7fe fd2b 	bl	12f04 <__cyg_profile_func_enter>
   144ae:	4a07      	ldr	r2, [pc, #28]	; (144cc <GpioInterface::GpioInterface()+0x30>)
   144b0:	9b01      	ldr	r3, [sp, #4]
   144b2:	601a      	str	r2, [r3, #0]
   144b4:	9c01      	ldr	r4, [sp, #4]
   144b6:	462b      	mov	r3, r5
   144b8:	4619      	mov	r1, r3
   144ba:	4803      	ldr	r0, [pc, #12]	; (144c8 <GpioInterface::GpioInterface()+0x2c>)
   144bc:	f7fe fd36 	bl	12f2c <__cyg_profile_func_exit>
   144c0:	4623      	mov	r3, r4
   144c2:	4618      	mov	r0, r3
   144c4:	b003      	add	sp, #12
   144c6:	bd30      	pop	{r4, r5, pc}
   144c8:	0001449d 	.word	0x0001449d
   144cc:	00019234 	.word	0x00019234

000144d0 <Gpio::Gpio(unsigned char, unsigned char)>:
  };

  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);

  // For port 0-4, pins 0-31 are available. Port 5 only has pins 0-4 available.
  constexpr Gpio(uint8_t port_number, uint8_t pin_number)
   144d0:	b530      	push	{r4, r5, lr}
   144d2:	b083      	sub	sp, #12
   144d4:	4675      	mov	r5, lr
   144d6:	9001      	str	r0, [sp, #4]
   144d8:	460b      	mov	r3, r1
   144da:	f88d 3003 	strb.w	r3, [sp, #3]
   144de:	4613      	mov	r3, r2
   144e0:	f88d 3002 	strb.w	r3, [sp, #2]
   144e4:	462b      	mov	r3, r5
   144e6:	4619      	mov	r1, r3
   144e8:	4816      	ldr	r0, [pc, #88]	; (14544 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   144ea:	f7fe fd0b 	bl	12f04 <__cyg_profile_func_enter>
      : interupt_port_(false),
        pin_(&lpc40xx_pin_),
        lpc40xx_pin_(port_number, pin_number)
   144ee:	9b01      	ldr	r3, [sp, #4]
   144f0:	4618      	mov	r0, r3
   144f2:	f7ff ffd3 	bl	1449c <GpioInterface::GpioInterface()>
   144f6:	4a14      	ldr	r2, [pc, #80]	; (14548 <Gpio::Gpio(unsigned char, unsigned char)+0x78>)
   144f8:	9b01      	ldr	r3, [sp, #4]
   144fa:	601a      	str	r2, [r3, #0]
   144fc:	9b01      	ldr	r3, [sp, #4]
   144fe:	2200      	movs	r2, #0
   14500:	711a      	strb	r2, [r3, #4]
   14502:	9b01      	ldr	r3, [sp, #4]
   14504:	f103 020c 	add.w	r2, r3, #12
   14508:	9b01      	ldr	r3, [sp, #4]
   1450a:	609a      	str	r2, [r3, #8]
   1450c:	9b01      	ldr	r3, [sp, #4]
   1450e:	330c      	adds	r3, #12
   14510:	f89d 2002 	ldrb.w	r2, [sp, #2]
   14514:	f89d 1003 	ldrb.w	r1, [sp, #3]
   14518:	4618      	mov	r0, r3
   1451a:	f7ff ff93 	bl	14444 <Pin::Pin(unsigned char, unsigned char)>
  {
    interupt_port_ = (port_number == 2) ? 1 : 0;
   1451e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14522:	2b02      	cmp	r3, #2
   14524:	d101      	bne.n	1452a <Gpio::Gpio(unsigned char, unsigned char)+0x5a>
   14526:	2201      	movs	r2, #1
   14528:	e000      	b.n	1452c <Gpio::Gpio(unsigned char, unsigned char)+0x5c>
   1452a:	2200      	movs	r2, #0
   1452c:	9b01      	ldr	r3, [sp, #4]
   1452e:	711a      	strb	r2, [r3, #4]
  }
   14530:	9c01      	ldr	r4, [sp, #4]
   14532:	462b      	mov	r3, r5
   14534:	4619      	mov	r1, r3
   14536:	4803      	ldr	r0, [pc, #12]	; (14544 <Gpio::Gpio(unsigned char, unsigned char)+0x74>)
   14538:	f7fe fcf8 	bl	12f2c <__cyg_profile_func_exit>
   1453c:	4623      	mov	r3, r4
   1453e:	4618      	mov	r0, r3
   14540:	b003      	add	sp, #12
   14542:	bd30      	pop	{r4, r5, pc}
   14544:	000144d1 	.word	0x000144d1
   14548:	000191ec 	.word	0x000191ec

0001454c <Gpio::SetAsInput()>:
      : interupt_port_(false), pin_(pin), lpc40xx_pin_(Pin::CreateInactivePin())
  {
    interupt_port_ = pin_->GetPort();
  }
  // Sets the GPIO pin direction as input
  void SetAsInput(void) override
   1454c:	b530      	push	{r4, r5, lr}
   1454e:	b083      	sub	sp, #12
   14550:	4675      	mov	r5, lr
   14552:	9001      	str	r0, [sp, #4]
   14554:	462b      	mov	r3, r5
   14556:	4619      	mov	r1, r3
   14558:	4819      	ldr	r0, [pc, #100]	; (145c0 <Gpio::SetAsInput()+0x74>)
   1455a:	f7fe fcd3 	bl	12f04 <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   1455e:	9b01      	ldr	r3, [sp, #4]
   14560:	689a      	ldr	r2, [r3, #8]
   14562:	9b01      	ldr	r3, [sp, #4]
   14564:	689b      	ldr	r3, [r3, #8]
   14566:	681b      	ldr	r3, [r3, #0]
   14568:	681b      	ldr	r3, [r3, #0]
   1456a:	2100      	movs	r1, #0
   1456c:	4610      	mov	r0, r2
   1456e:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR &= ~(1 << pin_->GetPin());
   14570:	9b01      	ldr	r3, [sp, #4]
   14572:	689a      	ldr	r2, [r3, #8]
   14574:	9b01      	ldr	r3, [sp, #4]
   14576:	689b      	ldr	r3, [r3, #8]
   14578:	681b      	ldr	r3, [r3, #0]
   1457a:	3330      	adds	r3, #48	; 0x30
   1457c:	681b      	ldr	r3, [r3, #0]
   1457e:	4610      	mov	r0, r2
   14580:	4798      	blx	r3
   14582:	4603      	mov	r3, r0
   14584:	461a      	mov	r2, r3
   14586:	2301      	movs	r3, #1
   14588:	4093      	lsls	r3, r2
   1458a:	43dc      	mvns	r4, r3
   1458c:	9b01      	ldr	r3, [sp, #4]
   1458e:	689a      	ldr	r2, [r3, #8]
   14590:	9b01      	ldr	r3, [sp, #4]
   14592:	689b      	ldr	r3, [r3, #8]
   14594:	681b      	ldr	r3, [r3, #0]
   14596:	332c      	adds	r3, #44	; 0x2c
   14598:	681b      	ldr	r3, [r3, #0]
   1459a:	4610      	mov	r0, r2
   1459c:	4798      	blx	r3
   1459e:	4603      	mov	r3, r0
   145a0:	461a      	mov	r2, r3
   145a2:	4b08      	ldr	r3, [pc, #32]	; (145c4 <Gpio::SetAsInput()+0x78>)
   145a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   145a8:	681a      	ldr	r2, [r3, #0]
   145aa:	4621      	mov	r1, r4
   145ac:	400a      	ands	r2, r1
   145ae:	601a      	str	r2, [r3, #0]
   145b0:	462b      	mov	r3, r5
   145b2:	4619      	mov	r1, r3
   145b4:	4802      	ldr	r0, [pc, #8]	; (145c0 <Gpio::SetAsInput()+0x74>)
   145b6:	f7fe fcb9 	bl	12f2c <__cyg_profile_func_exit>
  }
   145ba:	bf00      	nop
   145bc:	b003      	add	sp, #12
   145be:	bd30      	pop	{r4, r5, pc}
   145c0:	0001454d 	.word	0x0001454d
   145c4:	10000188 	.word	0x10000188

000145c8 <Gpio::SetAsOutput()>:
  // Sets the GPIO pin direction as output
  void SetAsOutput(void) override
   145c8:	b530      	push	{r4, r5, lr}
   145ca:	b083      	sub	sp, #12
   145cc:	4675      	mov	r5, lr
   145ce:	9001      	str	r0, [sp, #4]
   145d0:	462b      	mov	r3, r5
   145d2:	4619      	mov	r1, r3
   145d4:	4819      	ldr	r0, [pc, #100]	; (1463c <Gpio::SetAsOutput()+0x74>)
   145d6:	f7fe fc95 	bl	12f04 <__cyg_profile_func_enter>
  {
    pin_->SetPinFunction(kGpioFunction);
   145da:	9b01      	ldr	r3, [sp, #4]
   145dc:	689a      	ldr	r2, [r3, #8]
   145de:	9b01      	ldr	r3, [sp, #4]
   145e0:	689b      	ldr	r3, [r3, #8]
   145e2:	681b      	ldr	r3, [r3, #0]
   145e4:	681b      	ldr	r3, [r3, #0]
   145e6:	2100      	movs	r1, #0
   145e8:	4610      	mov	r0, r2
   145ea:	4798      	blx	r3
    gpio_port[pin_->GetPort()]->DIR |= (1 << pin_->GetPin());
   145ec:	9b01      	ldr	r3, [sp, #4]
   145ee:	689a      	ldr	r2, [r3, #8]
   145f0:	9b01      	ldr	r3, [sp, #4]
   145f2:	689b      	ldr	r3, [r3, #8]
   145f4:	681b      	ldr	r3, [r3, #0]
   145f6:	3330      	adds	r3, #48	; 0x30
   145f8:	681b      	ldr	r3, [r3, #0]
   145fa:	4610      	mov	r0, r2
   145fc:	4798      	blx	r3
   145fe:	4603      	mov	r3, r0
   14600:	461a      	mov	r2, r3
   14602:	2301      	movs	r3, #1
   14604:	fa03 f402 	lsl.w	r4, r3, r2
   14608:	9b01      	ldr	r3, [sp, #4]
   1460a:	689a      	ldr	r2, [r3, #8]
   1460c:	9b01      	ldr	r3, [sp, #4]
   1460e:	689b      	ldr	r3, [r3, #8]
   14610:	681b      	ldr	r3, [r3, #0]
   14612:	332c      	adds	r3, #44	; 0x2c
   14614:	681b      	ldr	r3, [r3, #0]
   14616:	4610      	mov	r0, r2
   14618:	4798      	blx	r3
   1461a:	4603      	mov	r3, r0
   1461c:	461a      	mov	r2, r3
   1461e:	4b08      	ldr	r3, [pc, #32]	; (14640 <Gpio::SetAsOutput()+0x78>)
   14620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14624:	681a      	ldr	r2, [r3, #0]
   14626:	4621      	mov	r1, r4
   14628:	430a      	orrs	r2, r1
   1462a:	601a      	str	r2, [r3, #0]
   1462c:	462b      	mov	r3, r5
   1462e:	4619      	mov	r1, r3
   14630:	4802      	ldr	r0, [pc, #8]	; (1463c <Gpio::SetAsOutput()+0x74>)
   14632:	f7fe fc7b 	bl	12f2c <__cyg_profile_func_exit>
  }
   14636:	bf00      	nop
   14638:	b003      	add	sp, #12
   1463a:	bd30      	pop	{r4, r5, pc}
   1463c:	000145c9 	.word	0x000145c9
   14640:	10000188 	.word	0x10000188

00014644 <Gpio::SetDirection(GpioInterface::Direction)>:
  // Sets the GPIO pin direction as output or input depending on the
  // Direction enum parameter
  inline void SetDirection(Direction direction) override
   14644:	b510      	push	{r4, lr}
   14646:	b082      	sub	sp, #8
   14648:	4674      	mov	r4, lr
   1464a:	9001      	str	r0, [sp, #4]
   1464c:	460b      	mov	r3, r1
   1464e:	f88d 3003 	strb.w	r3, [sp, #3]
   14652:	4623      	mov	r3, r4
   14654:	4619      	mov	r1, r3
   14656:	480b      	ldr	r0, [pc, #44]	; (14684 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   14658:	f7fe fc54 	bl	12f04 <__cyg_profile_func_enter>
  {
    (direction) ? SetAsOutput() : SetAsInput();
   1465c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14660:	2b00      	cmp	r3, #0
   14662:	d003      	beq.n	1466c <Gpio::SetDirection(GpioInterface::Direction)+0x28>
   14664:	9801      	ldr	r0, [sp, #4]
   14666:	f7ff ffaf 	bl	145c8 <Gpio::SetAsOutput()>
   1466a:	e002      	b.n	14672 <Gpio::SetDirection(GpioInterface::Direction)+0x2e>
   1466c:	9801      	ldr	r0, [sp, #4]
   1466e:	f7ff ff6d 	bl	1454c <Gpio::SetAsInput()>
   14672:	4623      	mov	r3, r4
   14674:	4619      	mov	r1, r3
   14676:	4803      	ldr	r0, [pc, #12]	; (14684 <Gpio::SetDirection(GpioInterface::Direction)+0x40>)
   14678:	f7fe fc58 	bl	12f2c <__cyg_profile_func_exit>
  }
   1467c:	bf00      	nop
   1467e:	b002      	add	sp, #8
   14680:	bd10      	pop	{r4, pc}
   14682:	bf00      	nop
   14684:	00014645 	.word	0x00014645

00014688 <Gpio::SetHigh()>:
  // Sets the GPIO output pin to high
  void SetHigh(void) override
   14688:	b530      	push	{r4, r5, lr}
   1468a:	b083      	sub	sp, #12
   1468c:	4675      	mov	r5, lr
   1468e:	9001      	str	r0, [sp, #4]
   14690:	462b      	mov	r3, r5
   14692:	4619      	mov	r1, r3
   14694:	4813      	ldr	r0, [pc, #76]	; (146e4 <Gpio::SetHigh()+0x5c>)
   14696:	f7fe fc35 	bl	12f04 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->SET = (1 << pin_->GetPin());
   1469a:	9b01      	ldr	r3, [sp, #4]
   1469c:	689a      	ldr	r2, [r3, #8]
   1469e:	9b01      	ldr	r3, [sp, #4]
   146a0:	689b      	ldr	r3, [r3, #8]
   146a2:	681b      	ldr	r3, [r3, #0]
   146a4:	3330      	adds	r3, #48	; 0x30
   146a6:	681b      	ldr	r3, [r3, #0]
   146a8:	4610      	mov	r0, r2
   146aa:	4798      	blx	r3
   146ac:	4603      	mov	r3, r0
   146ae:	461a      	mov	r2, r3
   146b0:	2301      	movs	r3, #1
   146b2:	4093      	lsls	r3, r2
   146b4:	461c      	mov	r4, r3
   146b6:	9b01      	ldr	r3, [sp, #4]
   146b8:	689a      	ldr	r2, [r3, #8]
   146ba:	9b01      	ldr	r3, [sp, #4]
   146bc:	689b      	ldr	r3, [r3, #8]
   146be:	681b      	ldr	r3, [r3, #0]
   146c0:	332c      	adds	r3, #44	; 0x2c
   146c2:	681b      	ldr	r3, [r3, #0]
   146c4:	4610      	mov	r0, r2
   146c6:	4798      	blx	r3
   146c8:	4603      	mov	r3, r0
   146ca:	461a      	mov	r2, r3
   146cc:	4b06      	ldr	r3, [pc, #24]	; (146e8 <Gpio::SetHigh()+0x60>)
   146ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   146d2:	619c      	str	r4, [r3, #24]
   146d4:	462b      	mov	r3, r5
   146d6:	4619      	mov	r1, r3
   146d8:	4802      	ldr	r0, [pc, #8]	; (146e4 <Gpio::SetHigh()+0x5c>)
   146da:	f7fe fc27 	bl	12f2c <__cyg_profile_func_exit>
  }
   146de:	bf00      	nop
   146e0:	b003      	add	sp, #12
   146e2:	bd30      	pop	{r4, r5, pc}
   146e4:	00014689 	.word	0x00014689
   146e8:	10000188 	.word	0x10000188

000146ec <Gpio::SetLow()>:
  // Sets the GPIO output pin to low
  void SetLow(void) override
   146ec:	b530      	push	{r4, r5, lr}
   146ee:	b083      	sub	sp, #12
   146f0:	4675      	mov	r5, lr
   146f2:	9001      	str	r0, [sp, #4]
   146f4:	462b      	mov	r3, r5
   146f6:	4619      	mov	r1, r3
   146f8:	4813      	ldr	r0, [pc, #76]	; (14748 <Gpio::SetLow()+0x5c>)
   146fa:	f7fe fc03 	bl	12f04 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->CLR = (1 << pin_->GetPin());
   146fe:	9b01      	ldr	r3, [sp, #4]
   14700:	689a      	ldr	r2, [r3, #8]
   14702:	9b01      	ldr	r3, [sp, #4]
   14704:	689b      	ldr	r3, [r3, #8]
   14706:	681b      	ldr	r3, [r3, #0]
   14708:	3330      	adds	r3, #48	; 0x30
   1470a:	681b      	ldr	r3, [r3, #0]
   1470c:	4610      	mov	r0, r2
   1470e:	4798      	blx	r3
   14710:	4603      	mov	r3, r0
   14712:	461a      	mov	r2, r3
   14714:	2301      	movs	r3, #1
   14716:	4093      	lsls	r3, r2
   14718:	461c      	mov	r4, r3
   1471a:	9b01      	ldr	r3, [sp, #4]
   1471c:	689a      	ldr	r2, [r3, #8]
   1471e:	9b01      	ldr	r3, [sp, #4]
   14720:	689b      	ldr	r3, [r3, #8]
   14722:	681b      	ldr	r3, [r3, #0]
   14724:	332c      	adds	r3, #44	; 0x2c
   14726:	681b      	ldr	r3, [r3, #0]
   14728:	4610      	mov	r0, r2
   1472a:	4798      	blx	r3
   1472c:	4603      	mov	r3, r0
   1472e:	461a      	mov	r2, r3
   14730:	4b06      	ldr	r3, [pc, #24]	; (1474c <Gpio::SetLow()+0x60>)
   14732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14736:	61dc      	str	r4, [r3, #28]
   14738:	462b      	mov	r3, r5
   1473a:	4619      	mov	r1, r3
   1473c:	4802      	ldr	r0, [pc, #8]	; (14748 <Gpio::SetLow()+0x5c>)
   1473e:	f7fe fbf5 	bl	12f2c <__cyg_profile_func_exit>
  }
   14742:	bf00      	nop
   14744:	b003      	add	sp, #12
   14746:	bd30      	pop	{r4, r5, pc}
   14748:	000146ed 	.word	0x000146ed
   1474c:	10000188 	.word	0x10000188

00014750 <Gpio::Set(GpioInterface::State)>:
  // Sets the GPIO output pin to high or low depending on the State enum
  // parameter
  void Set(State output = kHigh) override
   14750:	b510      	push	{r4, lr}
   14752:	b082      	sub	sp, #8
   14754:	4674      	mov	r4, lr
   14756:	9001      	str	r0, [sp, #4]
   14758:	460b      	mov	r3, r1
   1475a:	f88d 3003 	strb.w	r3, [sp, #3]
   1475e:	4623      	mov	r3, r4
   14760:	4619      	mov	r1, r3
   14762:	480b      	ldr	r0, [pc, #44]	; (14790 <Gpio::Set(GpioInterface::State)+0x40>)
   14764:	f7fe fbce 	bl	12f04 <__cyg_profile_func_enter>
  {
    (output) ? SetHigh() : SetLow();
   14768:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1476c:	2b00      	cmp	r3, #0
   1476e:	d003      	beq.n	14778 <Gpio::Set(GpioInterface::State)+0x28>
   14770:	9801      	ldr	r0, [sp, #4]
   14772:	f7ff ff89 	bl	14688 <Gpio::SetHigh()>
   14776:	e002      	b.n	1477e <Gpio::Set(GpioInterface::State)+0x2e>
   14778:	9801      	ldr	r0, [sp, #4]
   1477a:	f7ff ffb7 	bl	146ec <Gpio::SetLow()>
   1477e:	4623      	mov	r3, r4
   14780:	4619      	mov	r1, r3
   14782:	4803      	ldr	r0, [pc, #12]	; (14790 <Gpio::Set(GpioInterface::State)+0x40>)
   14784:	f7fe fbd2 	bl	12f2c <__cyg_profile_func_exit>
  }
   14788:	bf00      	nop
   1478a:	b002      	add	sp, #8
   1478c:	bd10      	pop	{r4, pc}
   1478e:	bf00      	nop
   14790:	00014751 	.word	0x00014751

00014794 <Gpio::Toggle()>:
  // Toggle the output of a GPIO output pin
  void Toggle() override
   14794:	b530      	push	{r4, r5, lr}
   14796:	b083      	sub	sp, #12
   14798:	4675      	mov	r5, lr
   1479a:	9001      	str	r0, [sp, #4]
   1479c:	462b      	mov	r3, r5
   1479e:	4619      	mov	r1, r3
   147a0:	4815      	ldr	r0, [pc, #84]	; (147f8 <Gpio::Toggle()+0x64>)
   147a2:	f7fe fbaf 	bl	12f04 <__cyg_profile_func_enter>
  {
    gpio_port[pin_->GetPort()]->PIN ^= (1 << pin_->GetPin());
   147a6:	9b01      	ldr	r3, [sp, #4]
   147a8:	689a      	ldr	r2, [r3, #8]
   147aa:	9b01      	ldr	r3, [sp, #4]
   147ac:	689b      	ldr	r3, [r3, #8]
   147ae:	681b      	ldr	r3, [r3, #0]
   147b0:	3330      	adds	r3, #48	; 0x30
   147b2:	681b      	ldr	r3, [r3, #0]
   147b4:	4610      	mov	r0, r2
   147b6:	4798      	blx	r3
   147b8:	4603      	mov	r3, r0
   147ba:	461a      	mov	r2, r3
   147bc:	2301      	movs	r3, #1
   147be:	fa03 f402 	lsl.w	r4, r3, r2
   147c2:	9b01      	ldr	r3, [sp, #4]
   147c4:	689a      	ldr	r2, [r3, #8]
   147c6:	9b01      	ldr	r3, [sp, #4]
   147c8:	689b      	ldr	r3, [r3, #8]
   147ca:	681b      	ldr	r3, [r3, #0]
   147cc:	332c      	adds	r3, #44	; 0x2c
   147ce:	681b      	ldr	r3, [r3, #0]
   147d0:	4610      	mov	r0, r2
   147d2:	4798      	blx	r3
   147d4:	4603      	mov	r3, r0
   147d6:	461a      	mov	r2, r3
   147d8:	4b08      	ldr	r3, [pc, #32]	; (147fc <Gpio::Toggle()+0x68>)
   147da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   147de:	695a      	ldr	r2, [r3, #20]
   147e0:	4621      	mov	r1, r4
   147e2:	404a      	eors	r2, r1
   147e4:	615a      	str	r2, [r3, #20]
   147e6:	462b      	mov	r3, r5
   147e8:	4619      	mov	r1, r3
   147ea:	4803      	ldr	r0, [pc, #12]	; (147f8 <Gpio::Toggle()+0x64>)
   147ec:	f7fe fb9e 	bl	12f2c <__cyg_profile_func_exit>
  }
   147f0:	bf00      	nop
   147f2:	b003      	add	sp, #12
   147f4:	bd30      	pop	{r4, r5, pc}
   147f6:	bf00      	nop
   147f8:	00014795 	.word	0x00014795
   147fc:	10000188 	.word	0x10000188

00014800 <Gpio::ReadState()>:
  // Returns the current State state of the pin
  State ReadState(void) override
   14800:	b530      	push	{r4, r5, lr}
   14802:	b085      	sub	sp, #20
   14804:	4675      	mov	r5, lr
   14806:	9001      	str	r0, [sp, #4]
   14808:	462b      	mov	r3, r5
   1480a:	4619      	mov	r1, r3
   1480c:	4818      	ldr	r0, [pc, #96]	; (14870 <Gpio::ReadState()+0x70>)
   1480e:	f7fe fb79 	bl	12f04 <__cyg_profile_func_enter>
  {
    bool state = (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   14812:	9b01      	ldr	r3, [sp, #4]
   14814:	689a      	ldr	r2, [r3, #8]
   14816:	9b01      	ldr	r3, [sp, #4]
   14818:	689b      	ldr	r3, [r3, #8]
   1481a:	681b      	ldr	r3, [r3, #0]
   1481c:	332c      	adds	r3, #44	; 0x2c
   1481e:	681b      	ldr	r3, [r3, #0]
   14820:	4610      	mov	r0, r2
   14822:	4798      	blx	r3
   14824:	4603      	mov	r3, r0
   14826:	461a      	mov	r2, r3
   14828:	4b12      	ldr	r3, [pc, #72]	; (14874 <Gpio::ReadState()+0x74>)
   1482a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1482e:	695c      	ldr	r4, [r3, #20]
   14830:	9b01      	ldr	r3, [sp, #4]
   14832:	689a      	ldr	r2, [r3, #8]
   14834:	9b01      	ldr	r3, [sp, #4]
   14836:	689b      	ldr	r3, [r3, #8]
   14838:	681b      	ldr	r3, [r3, #0]
   1483a:	3330      	adds	r3, #48	; 0x30
   1483c:	681b      	ldr	r3, [r3, #0]
   1483e:	4610      	mov	r0, r2
   14840:	4798      	blx	r3
   14842:	4603      	mov	r3, r0
   14844:	fa24 f303 	lsr.w	r3, r4, r3
   14848:	f003 0301 	and.w	r3, r3, #1
   1484c:	2b00      	cmp	r3, #0
   1484e:	bf14      	ite	ne
   14850:	2301      	movne	r3, #1
   14852:	2300      	moveq	r3, #0
   14854:	f88d 300f 	strb.w	r3, [sp, #15]
    return static_cast<State>(state);
   14858:	f89d 400f 	ldrb.w	r4, [sp, #15]
   1485c:	462b      	mov	r3, r5
   1485e:	4619      	mov	r1, r3
   14860:	4803      	ldr	r0, [pc, #12]	; (14870 <Gpio::ReadState()+0x70>)
   14862:	f7fe fb63 	bl	12f2c <__cyg_profile_func_exit>
   14866:	4623      	mov	r3, r4
  }
   14868:	4618      	mov	r0, r3
   1486a:	b005      	add	sp, #20
   1486c:	bd30      	pop	{r4, r5, pc}
   1486e:	bf00      	nop
   14870:	00014801 	.word	0x00014801
   14874:	10000188 	.word	0x10000188

00014878 <Gpio::Read()>:
  // Returns true if input or output pin is high
  bool Read(void) override
   14878:	b530      	push	{r4, r5, lr}
   1487a:	b083      	sub	sp, #12
   1487c:	4675      	mov	r5, lr
   1487e:	9001      	str	r0, [sp, #4]
   14880:	462b      	mov	r3, r5
   14882:	4619      	mov	r1, r3
   14884:	4816      	ldr	r0, [pc, #88]	; (148e0 <Gpio::Read()+0x68>)
   14886:	f7fe fb3d 	bl	12f04 <__cyg_profile_func_enter>
  {
    return (gpio_port[pin_->GetPort()]->PIN >> pin_->GetPin()) & 1;
   1488a:	9b01      	ldr	r3, [sp, #4]
   1488c:	689a      	ldr	r2, [r3, #8]
   1488e:	9b01      	ldr	r3, [sp, #4]
   14890:	689b      	ldr	r3, [r3, #8]
   14892:	681b      	ldr	r3, [r3, #0]
   14894:	332c      	adds	r3, #44	; 0x2c
   14896:	681b      	ldr	r3, [r3, #0]
   14898:	4610      	mov	r0, r2
   1489a:	4798      	blx	r3
   1489c:	4603      	mov	r3, r0
   1489e:	461a      	mov	r2, r3
   148a0:	4b10      	ldr	r3, [pc, #64]	; (148e4 <Gpio::Read()+0x6c>)
   148a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   148a6:	695c      	ldr	r4, [r3, #20]
   148a8:	9b01      	ldr	r3, [sp, #4]
   148aa:	689a      	ldr	r2, [r3, #8]
   148ac:	9b01      	ldr	r3, [sp, #4]
   148ae:	689b      	ldr	r3, [r3, #8]
   148b0:	681b      	ldr	r3, [r3, #0]
   148b2:	3330      	adds	r3, #48	; 0x30
   148b4:	681b      	ldr	r3, [r3, #0]
   148b6:	4610      	mov	r0, r2
   148b8:	4798      	blx	r3
   148ba:	4603      	mov	r3, r0
   148bc:	fa24 f303 	lsr.w	r3, r4, r3
   148c0:	f003 0301 	and.w	r3, r3, #1
   148c4:	2b00      	cmp	r3, #0
   148c6:	bf14      	ite	ne
   148c8:	2301      	movne	r3, #1
   148ca:	2300      	moveq	r3, #0
   148cc:	b2dc      	uxtb	r4, r3
   148ce:	462b      	mov	r3, r5
   148d0:	4619      	mov	r1, r3
   148d2:	4803      	ldr	r0, [pc, #12]	; (148e0 <Gpio::Read()+0x68>)
   148d4:	f7fe fb2a 	bl	12f2c <__cyg_profile_func_exit>
   148d8:	4623      	mov	r3, r4
  }
   148da:	4618      	mov	r0, r3
   148dc:	b003      	add	sp, #12
   148de:	bd30      	pop	{r4, r5, pc}
   148e0:	00014879 	.word	0x00014879
   148e4:	10000188 	.word	0x10000188

000148e8 <Gpio::GetPin()>:
  PinInterface & GetPin() override
   148e8:	b530      	push	{r4, r5, lr}
   148ea:	b083      	sub	sp, #12
   148ec:	4675      	mov	r5, lr
   148ee:	9001      	str	r0, [sp, #4]
   148f0:	462b      	mov	r3, r5
   148f2:	4619      	mov	r1, r3
   148f4:	4806      	ldr	r0, [pc, #24]	; (14910 <Gpio::GetPin()+0x28>)
   148f6:	f7fe fb05 	bl	12f04 <__cyg_profile_func_enter>
  {
    return *pin_;
   148fa:	9b01      	ldr	r3, [sp, #4]
   148fc:	689c      	ldr	r4, [r3, #8]
   148fe:	462b      	mov	r3, r5
   14900:	4619      	mov	r1, r3
   14902:	4803      	ldr	r0, [pc, #12]	; (14910 <Gpio::GetPin()+0x28>)
   14904:	f7fe fb12 	bl	12f2c <__cyg_profile_func_exit>
   14908:	4623      	mov	r3, r4
  }
   1490a:	4618      	mov	r0, r3
   1490c:	b003      	add	sp, #12
   1490e:	bd30      	pop	{r4, r5, pc}
   14910:	000148e9 	.word	0x000148e9

00014914 <Gpio::ValidPortCheck()>:

  // Checks if the selected gpio port is valid for external interrupts.
  bool ValidPortCheck()
   14914:	b530      	push	{r4, r5, lr}
   14916:	b087      	sub	sp, #28
   14918:	4675      	mov	r5, lr
   1491a:	9003      	str	r0, [sp, #12]
   1491c:	462b      	mov	r3, r5
   1491e:	4619      	mov	r1, r3
   14920:	4817      	ldr	r0, [pc, #92]	; (14980 <Gpio::ValidPortCheck()+0x6c>)
   14922:	f7fe faef 	bl	12f04 <__cyg_profile_func_enter>
  {
    bool is_valid = (interupt_port_ <= 1);
   14926:	9b03      	ldr	r3, [sp, #12]
   14928:	791b      	ldrb	r3, [r3, #4]
   1492a:	2b01      	cmp	r3, #1
   1492c:	bf94      	ite	ls
   1492e:	2301      	movls	r3, #1
   14930:	2300      	movhi	r3, #0
   14932:	b2db      	uxtb	r3, r3
   14934:	f88d 3017 	strb.w	r3, [sp, #23]
    SJ2_ASSERT_WARNING(is_valid,
   14938:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1493c:	f083 0301 	eor.w	r3, r3, #1
   14940:	b2db      	uxtb	r3, r3
   14942:	2b00      	cmp	r3, #0
   14944:	d010      	beq.n	14968 <Gpio::ValidPortCheck()+0x54>
   14946:	9b03      	ldr	r3, [sp, #12]
   14948:	689a      	ldr	r2, [r3, #8]
   1494a:	9b03      	ldr	r3, [sp, #12]
   1494c:	689b      	ldr	r3, [r3, #8]
   1494e:	681b      	ldr	r3, [r3, #0]
   14950:	332c      	adds	r3, #44	; 0x2c
   14952:	681b      	ldr	r3, [r3, #0]
   14954:	4610      	mov	r0, r2
   14956:	4798      	blx	r3
   14958:	4603      	mov	r3, r0
   1495a:	9300      	str	r3, [sp, #0]
   1495c:	23a6      	movs	r3, #166	; 0xa6
   1495e:	4a09      	ldr	r2, [pc, #36]	; (14984 <Gpio::ValidPortCheck()+0x70>)
   14960:	4909      	ldr	r1, [pc, #36]	; (14988 <Gpio::ValidPortCheck()+0x74>)
   14962:	480a      	ldr	r0, [pc, #40]	; (1498c <Gpio::ValidPortCheck()+0x78>)
   14964:	f7ff fd2e 	bl	143c4 <printf>
                       "Port %d cannot be used for External Interrupts. Need "
                       "to use GPIO on Port 0 or 2.",
                       pin_->GetPort());
    return is_valid;
   14968:	f89d 4017 	ldrb.w	r4, [sp, #23]
   1496c:	462b      	mov	r3, r5
   1496e:	4619      	mov	r1, r3
   14970:	4803      	ldr	r0, [pc, #12]	; (14980 <Gpio::ValidPortCheck()+0x6c>)
   14972:	f7fe fadb 	bl	12f2c <__cyg_profile_func_exit>
   14976:	4623      	mov	r3, r4
  }
   14978:	4618      	mov	r0, r3
   1497a:	b007      	add	sp, #28
   1497c:	bd30      	pop	{r4, r5, pc}
   1497e:	bf00      	nop
   14980:	00014915 	.word	0x00014915
   14984:	000192ec 	.word	0x000192ec
   14988:	00018ce0 	.word	0x00018ce0
   1498c:	000181b0 	.word	0x000181b0

00014990 <Gpio::SetInterruptRoutine(void (*)())>:

  // Assigns the developer's ISR function to the port/pin gpio instance.
  void SetInterruptRoutine(IsrPointer function) override
   14990:	b570      	push	{r4, r5, r6, lr}
   14992:	b082      	sub	sp, #8
   14994:	4676      	mov	r6, lr
   14996:	9001      	str	r0, [sp, #4]
   14998:	9100      	str	r1, [sp, #0]
   1499a:	4633      	mov	r3, r6
   1499c:	4619      	mov	r1, r3
   1499e:	4811      	ldr	r0, [pc, #68]	; (149e4 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   149a0:	f7fe fab0 	bl	12f04 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   149a4:	9801      	ldr	r0, [sp, #4]
   149a6:	f7ff ffb5 	bl	14914 <Gpio::ValidPortCheck()>
    interrupthandlers[interupt_port_][pin_->GetPin()] = function;
   149aa:	9c00      	ldr	r4, [sp, #0]
   149ac:	9b01      	ldr	r3, [sp, #4]
   149ae:	791b      	ldrb	r3, [r3, #4]
   149b0:	461d      	mov	r5, r3
   149b2:	9b01      	ldr	r3, [sp, #4]
   149b4:	689a      	ldr	r2, [r3, #8]
   149b6:	9b01      	ldr	r3, [sp, #4]
   149b8:	689b      	ldr	r3, [r3, #8]
   149ba:	681b      	ldr	r3, [r3, #0]
   149bc:	3330      	adds	r3, #48	; 0x30
   149be:	681b      	ldr	r3, [r3, #0]
   149c0:	4610      	mov	r0, r2
   149c2:	4798      	blx	r3
   149c4:	4603      	mov	r3, r0
   149c6:	4619      	mov	r1, r3
   149c8:	4a07      	ldr	r2, [pc, #28]	; (149e8 <Gpio::SetInterruptRoutine(void (*)())+0x58>)
   149ca:	016b      	lsls	r3, r5, #5
   149cc:	440b      	add	r3, r1
   149ce:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   149d2:	4633      	mov	r3, r6
   149d4:	4619      	mov	r1, r3
   149d6:	4803      	ldr	r0, [pc, #12]	; (149e4 <Gpio::SetInterruptRoutine(void (*)())+0x54>)
   149d8:	f7fe faa8 	bl	12f2c <__cyg_profile_func_exit>
  }
   149dc:	bf00      	nop
   149de:	b002      	add	sp, #8
   149e0:	bd70      	pop	{r4, r5, r6, pc}
   149e2:	bf00      	nop
   149e4:	00014991 	.word	0x00014991
   149e8:	10000440 	.word	0x10000440

000149ec <Gpio::ClearInterruptRoutine()>:

  // Clears the developers ISR function from the port/pin gio instance.
  void ClearInterruptRoutine() override
   149ec:	b530      	push	{r4, r5, lr}
   149ee:	b083      	sub	sp, #12
   149f0:	4675      	mov	r5, lr
   149f2:	9001      	str	r0, [sp, #4]
   149f4:	462b      	mov	r3, r5
   149f6:	4619      	mov	r1, r3
   149f8:	480f      	ldr	r0, [pc, #60]	; (14a38 <Gpio::ClearInterruptRoutine()+0x4c>)
   149fa:	f7fe fa83 	bl	12f04 <__cyg_profile_func_enter>
  {
    interrupthandlers[interupt_port_][pin_->GetPin()] = nullptr;
   149fe:	9b01      	ldr	r3, [sp, #4]
   14a00:	791b      	ldrb	r3, [r3, #4]
   14a02:	461c      	mov	r4, r3
   14a04:	9b01      	ldr	r3, [sp, #4]
   14a06:	689a      	ldr	r2, [r3, #8]
   14a08:	9b01      	ldr	r3, [sp, #4]
   14a0a:	689b      	ldr	r3, [r3, #8]
   14a0c:	681b      	ldr	r3, [r3, #0]
   14a0e:	3330      	adds	r3, #48	; 0x30
   14a10:	681b      	ldr	r3, [r3, #0]
   14a12:	4610      	mov	r0, r2
   14a14:	4798      	blx	r3
   14a16:	4603      	mov	r3, r0
   14a18:	4619      	mov	r1, r3
   14a1a:	4a08      	ldr	r2, [pc, #32]	; (14a3c <Gpio::ClearInterruptRoutine()+0x50>)
   14a1c:	0163      	lsls	r3, r4, #5
   14a1e:	440b      	add	r3, r1
   14a20:	2100      	movs	r1, #0
   14a22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   14a26:	462b      	mov	r3, r5
   14a28:	4619      	mov	r1, r3
   14a2a:	4803      	ldr	r0, [pc, #12]	; (14a38 <Gpio::ClearInterruptRoutine()+0x4c>)
   14a2c:	f7fe fa7e 	bl	12f2c <__cyg_profile_func_exit>
  }
   14a30:	bf00      	nop
   14a32:	b003      	add	sp, #12
   14a34:	bd30      	pop	{r4, r5, pc}
   14a36:	bf00      	nop
   14a38:	000149ed 	.word	0x000149ed
   14a3c:	10000440 	.word	0x10000440

00014a40 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>:
constexpr Type Value(Enum enum_type_value)
   14a40:	b530      	push	{r4, r5, lr}
   14a42:	b083      	sub	sp, #12
   14a44:	4675      	mov	r5, lr
   14a46:	4603      	mov	r3, r0
   14a48:	f88d 3007 	strb.w	r3, [sp, #7]
   14a4c:	462b      	mov	r3, r5
   14a4e:	4619      	mov	r1, r3
   14a50:	4806      	ldr	r0, [pc, #24]	; (14a6c <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   14a52:	f7fe fa57 	bl	12f04 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   14a56:	f89d 4007 	ldrb.w	r4, [sp, #7]
   14a5a:	462b      	mov	r3, r5
   14a5c:	4619      	mov	r1, r3
   14a5e:	4803      	ldr	r0, [pc, #12]	; (14a6c <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)+0x2c>)
   14a60:	f7fe fa64 	bl	12f2c <__cyg_profile_func_exit>
   14a64:	4623      	mov	r3, r4
}
   14a66:	4618      	mov	r0, r3
   14a68:	b003      	add	sp, #12
   14a6a:	bd30      	pop	{r4, r5, pc}
   14a6c:	00014a41 	.word	0x00014a41

00014a70 <Gpio::SetInterruptEdge(GpioInterface::Edge)>:

  // Sets the selected edge that the gpio interrupt will be triggered on.
  void SetInterruptEdge(Edge edge) override
   14a70:	b510      	push	{r4, lr}
   14a72:	b084      	sub	sp, #16
   14a74:	4674      	mov	r4, lr
   14a76:	9003      	str	r0, [sp, #12]
   14a78:	460b      	mov	r3, r1
   14a7a:	f88d 300b 	strb.w	r3, [sp, #11]
   14a7e:	4623      	mov	r3, r4
   14a80:	4619      	mov	r1, r3
   14a82:	4819      	ldr	r0, [pc, #100]	; (14ae8 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   14a84:	f7fe fa3e 	bl	12f04 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14a88:	9803      	ldr	r0, [sp, #12]
   14a8a:	f7ff ff43 	bl	14914 <Gpio::ValidPortCheck()>
    switch (edge)
   14a8e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14a92:	2b01      	cmp	r3, #1
   14a94:	d008      	beq.n	14aa8 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x38>
   14a96:	2b01      	cmp	r3, #1
   14a98:	d302      	bcc.n	14aa0 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x30>
   14a9a:	2b02      	cmp	r3, #2
   14a9c:	d008      	beq.n	14ab0 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x40>
   14a9e:	e00e      	b.n	14abe <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        SetEdgeRising();
   14aa0:	9803      	ldr	r0, [sp, #12]
   14aa2:	f000 f8b1 	bl	14c08 <Gpio::SetEdgeRising()>
        break;
   14aa6:	e017      	b.n	14ad8 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        SetEdgeFalling();
   14aa8:	9803      	ldr	r0, [sp, #12]
   14aaa:	f000 f8eb 	bl	14c84 <Gpio::SetEdgeFalling()>
        break;
   14aae:	e013      	b.n	14ad8 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        SetEdgeRising();
   14ab0:	9803      	ldr	r0, [sp, #12]
   14ab2:	f000 f8a9 	bl	14c08 <Gpio::SetEdgeRising()>
        SetEdgeFalling();
   14ab6:	9803      	ldr	r0, [sp, #12]
   14ab8:	f000 f8e4 	bl	14c84 <Gpio::SetEdgeFalling()>
        break;
   14abc:	e00c      	b.n	14ad8 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   14abe:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14ac2:	4618      	mov	r0, r3
   14ac4:	f7ff ffbc 	bl	14a40 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   14ac8:	4603      	mov	r3, r0
   14aca:	9300      	str	r3, [sp, #0]
   14acc:	23d2      	movs	r3, #210	; 0xd2
   14ace:	4a07      	ldr	r2, [pc, #28]	; (14aec <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x7c>)
   14ad0:	4907      	ldr	r1, [pc, #28]	; (14af0 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x80>)
   14ad2:	4808      	ldr	r0, [pc, #32]	; (14af4 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x84>)
   14ad4:	f7ff fc76 	bl	143c4 <printf>
   14ad8:	4623      	mov	r3, r4
   14ada:	4619      	mov	r1, r3
   14adc:	4802      	ldr	r0, [pc, #8]	; (14ae8 <Gpio::SetInterruptEdge(GpioInterface::Edge)+0x78>)
   14ade:	f7fe fa25 	bl	12f2c <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
            util::Value(edge));
      }
    }
  }
   14ae2:	bf00      	nop
   14ae4:	b004      	add	sp, #16
   14ae6:	bd10      	pop	{r4, pc}
   14ae8:	00014a71 	.word	0x00014a71
   14aec:	00019308 	.word	0x00019308
   14af0:	00018cec 	.word	0x00018cec
   14af4:	00018240 	.word	0x00018240

00014af8 <Gpio::ClearInterruptEdge(GpioInterface::Edge)>:

  // Clears the seleted edge of the gpio interrupt from being triggered.
  void ClearInterruptEdge(Edge edge) override
   14af8:	b510      	push	{r4, lr}
   14afa:	b084      	sub	sp, #16
   14afc:	4674      	mov	r4, lr
   14afe:	9003      	str	r0, [sp, #12]
   14b00:	460b      	mov	r3, r1
   14b02:	f88d 300b 	strb.w	r3, [sp, #11]
   14b06:	4623      	mov	r3, r4
   14b08:	4619      	mov	r1, r3
   14b0a:	4819      	ldr	r0, [pc, #100]	; (14b70 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   14b0c:	f7fe f9fa 	bl	12f04 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14b10:	9803      	ldr	r0, [sp, #12]
   14b12:	f7ff feff 	bl	14914 <Gpio::ValidPortCheck()>
    switch (edge)
   14b16:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14b1a:	2b01      	cmp	r3, #1
   14b1c:	d008      	beq.n	14b30 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x38>
   14b1e:	2b01      	cmp	r3, #1
   14b20:	d302      	bcc.n	14b28 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x30>
   14b22:	2b02      	cmp	r3, #2
   14b24:	d008      	beq.n	14b38 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x40>
   14b26:	e00e      	b.n	14b46 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x4e>
    {
      case Edge::kEdgeRising:
      {
        ClearEdgeRising();
   14b28:	9803      	ldr	r0, [sp, #12]
   14b2a:	f000 f8e9 	bl	14d00 <Gpio::ClearEdgeRising()>
        break;
   14b2e:	e017      	b.n	14b60 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeFalling:
      {
        ClearEdgeFalling();
   14b30:	9803      	ldr	r0, [sp, #12]
   14b32:	f000 f923 	bl	14d7c <Gpio::ClearEdgeFalling()>
        break;
   14b36:	e013      	b.n	14b60 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      case Edge::kEdgeBoth:
      {
        ClearEdgeRising();
   14b38:	9803      	ldr	r0, [sp, #12]
   14b3a:	f000 f8e1 	bl	14d00 <Gpio::ClearEdgeRising()>
        ClearEdgeFalling();
   14b3e:	9803      	ldr	r0, [sp, #12]
   14b40:	f000 f91c 	bl	14d7c <Gpio::ClearEdgeFalling()>
        break;
   14b44:	e00c      	b.n	14b60 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x68>
      }
      default:
      {
        LOG_WARNING(
   14b46:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14b4a:	4618      	mov	r0, r3
   14b4c:	f7ff ff78 	bl	14a40 <unsigned char util::Value<GpioInterface::Edge, unsigned char>(GpioInterface::Edge)>
   14b50:	4603      	mov	r3, r0
   14b52:	9300      	str	r3, [sp, #0]
   14b54:	23f2      	movs	r3, #242	; 0xf2
   14b56:	4a07      	ldr	r2, [pc, #28]	; (14b74 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x7c>)
   14b58:	4907      	ldr	r1, [pc, #28]	; (14b78 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x80>)
   14b5a:	4808      	ldr	r0, [pc, #32]	; (14b7c <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x84>)
   14b5c:	f7ff fc32 	bl	143c4 <printf>
   14b60:	4623      	mov	r3, r4
   14b62:	4619      	mov	r1, r3
   14b64:	4802      	ldr	r0, [pc, #8]	; (14b70 <Gpio::ClearInterruptEdge(GpioInterface::Edge)+0x78>)
   14b66:	f7fe f9e1 	bl	12f2c <__cyg_profile_func_exit>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
           util::Value(edge));
      }
    }
  }
   14b6a:	bf00      	nop
   14b6c:	b004      	add	sp, #16
   14b6e:	bd10      	pop	{r4, pc}
   14b70:	00014af9 	.word	0x00014af9
   14b74:	000192b0 	.word	0x000192b0
   14b78:	00018cf8 	.word	0x00018cf8
   14b7c:	00018240 	.word	0x00018240

00014b80 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)>:

  // Assign the developer's ISR and sets the selected edge that the gpio
  // interrupt will be triggered on.
  void AttachInterrupt(IsrPointer function, Edge edge) override
   14b80:	b510      	push	{r4, lr}
   14b82:	b084      	sub	sp, #16
   14b84:	4674      	mov	r4, lr
   14b86:	9003      	str	r0, [sp, #12]
   14b88:	9102      	str	r1, [sp, #8]
   14b8a:	4613      	mov	r3, r2
   14b8c:	f88d 3007 	strb.w	r3, [sp, #7]
   14b90:	4623      	mov	r3, r4
   14b92:	4619      	mov	r1, r3
   14b94:	480b      	ldr	r0, [pc, #44]	; (14bc4 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   14b96:	f7fe f9b5 	bl	12f04 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14b9a:	9803      	ldr	r0, [sp, #12]
   14b9c:	f7ff feba 	bl	14914 <Gpio::ValidPortCheck()>
    SetInterruptRoutine(function);
   14ba0:	9902      	ldr	r1, [sp, #8]
   14ba2:	9803      	ldr	r0, [sp, #12]
   14ba4:	f7ff fef4 	bl	14990 <Gpio::SetInterruptRoutine(void (*)())>
    SetInterruptEdge(edge);
   14ba8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14bac:	4619      	mov	r1, r3
   14bae:	9803      	ldr	r0, [sp, #12]
   14bb0:	f7ff ff5e 	bl	14a70 <Gpio::SetInterruptEdge(GpioInterface::Edge)>
   14bb4:	4623      	mov	r3, r4
   14bb6:	4619      	mov	r1, r3
   14bb8:	4802      	ldr	r0, [pc, #8]	; (14bc4 <Gpio::AttachInterrupt(void (*)(), GpioInterface::Edge)+0x44>)
   14bba:	f7fe f9b7 	bl	12f2c <__cyg_profile_func_exit>
  }
   14bbe:	bf00      	nop
   14bc0:	b004      	add	sp, #16
   14bc2:	bd10      	pop	{r4, pc}
   14bc4:	00014b81 	.word	0x00014b81

00014bc8 <Gpio::DetachInterrupt()>:

  // Removes the developer's ISR and clears the selected edge of the gpio
  // interrupt from being triggered.
  void DetachInterrupt() override
   14bc8:	b510      	push	{r4, lr}
   14bca:	b082      	sub	sp, #8
   14bcc:	4674      	mov	r4, lr
   14bce:	9001      	str	r0, [sp, #4]
   14bd0:	4623      	mov	r3, r4
   14bd2:	4619      	mov	r1, r3
   14bd4:	480b      	ldr	r0, [pc, #44]	; (14c04 <Gpio::DetachInterrupt()+0x3c>)
   14bd6:	f7fe f995 	bl	12f04 <__cyg_profile_func_enter>
  {
    ValidPortCheck();
   14bda:	9801      	ldr	r0, [sp, #4]
   14bdc:	f7ff fe9a 	bl	14914 <Gpio::ValidPortCheck()>
    ClearInterruptRoutine();
   14be0:	9801      	ldr	r0, [sp, #4]
   14be2:	f7ff ff03 	bl	149ec <Gpio::ClearInterruptRoutine()>
    ClearEdgeRising();
   14be6:	9801      	ldr	r0, [sp, #4]
   14be8:	f000 f88a 	bl	14d00 <Gpio::ClearEdgeRising()>
    ClearEdgeFalling();
   14bec:	9801      	ldr	r0, [sp, #4]
   14bee:	f000 f8c5 	bl	14d7c <Gpio::ClearEdgeFalling()>
   14bf2:	4623      	mov	r3, r4
   14bf4:	4619      	mov	r1, r3
   14bf6:	4803      	ldr	r0, [pc, #12]	; (14c04 <Gpio::DetachInterrupt()+0x3c>)
   14bf8:	f7fe f998 	bl	12f2c <__cyg_profile_func_exit>
  }
   14bfc:	bf00      	nop
   14bfe:	b002      	add	sp, #8
   14c00:	bd10      	pop	{r4, pc}
   14c02:	bf00      	nop
   14c04:	00014bc9 	.word	0x00014bc9

00014c08 <Gpio::SetEdgeRising()>:
    *interrupt[triggered_port].clear |= (1 << triggered_pin);
  }

 private:
  // Sets the gpio interrupt to trigger on a rising edge.
  void SetEdgeRising()
   14c08:	b530      	push	{r4, r5, lr}
   14c0a:	b083      	sub	sp, #12
   14c0c:	4675      	mov	r5, lr
   14c0e:	9001      	str	r0, [sp, #4]
   14c10:	462b      	mov	r3, r5
   14c12:	4619      	mov	r1, r3
   14c14:	4819      	ldr	r0, [pc, #100]	; (14c7c <Gpio::SetEdgeRising()+0x74>)
   14c16:	f7fe f975 	bl	12f04 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge |= (1 << pin_->GetPin());
   14c1a:	9b01      	ldr	r3, [sp, #4]
   14c1c:	689a      	ldr	r2, [r3, #8]
   14c1e:	9b01      	ldr	r3, [sp, #4]
   14c20:	689b      	ldr	r3, [r3, #8]
   14c22:	681b      	ldr	r3, [r3, #0]
   14c24:	3330      	adds	r3, #48	; 0x30
   14c26:	681b      	ldr	r3, [r3, #0]
   14c28:	4610      	mov	r0, r2
   14c2a:	4798      	blx	r3
   14c2c:	4603      	mov	r3, r0
   14c2e:	461a      	mov	r2, r3
   14c30:	2301      	movs	r3, #1
   14c32:	fa03 f002 	lsl.w	r0, r3, r2
   14c36:	9b01      	ldr	r3, [sp, #4]
   14c38:	791b      	ldrb	r3, [r3, #4]
   14c3a:	4619      	mov	r1, r3
   14c3c:	4a10      	ldr	r2, [pc, #64]	; (14c80 <Gpio::SetEdgeRising()+0x78>)
   14c3e:	460b      	mov	r3, r1
   14c40:	009b      	lsls	r3, r3, #2
   14c42:	440b      	add	r3, r1
   14c44:	009b      	lsls	r3, r3, #2
   14c46:	4413      	add	r3, r2
   14c48:	330c      	adds	r3, #12
   14c4a:	681b      	ldr	r3, [r3, #0]
   14c4c:	681a      	ldr	r2, [r3, #0]
   14c4e:	4604      	mov	r4, r0
   14c50:	9b01      	ldr	r3, [sp, #4]
   14c52:	791b      	ldrb	r3, [r3, #4]
   14c54:	4618      	mov	r0, r3
   14c56:	490a      	ldr	r1, [pc, #40]	; (14c80 <Gpio::SetEdgeRising()+0x78>)
   14c58:	4603      	mov	r3, r0
   14c5a:	009b      	lsls	r3, r3, #2
   14c5c:	4403      	add	r3, r0
   14c5e:	009b      	lsls	r3, r3, #2
   14c60:	440b      	add	r3, r1
   14c62:	330c      	adds	r3, #12
   14c64:	681b      	ldr	r3, [r3, #0]
   14c66:	4322      	orrs	r2, r4
   14c68:	601a      	str	r2, [r3, #0]
   14c6a:	462b      	mov	r3, r5
   14c6c:	4619      	mov	r1, r3
   14c6e:	4803      	ldr	r0, [pc, #12]	; (14c7c <Gpio::SetEdgeRising()+0x74>)
   14c70:	f7fe f95c 	bl	12f2c <__cyg_profile_func_exit>
  }
   14c74:	bf00      	nop
   14c76:	b003      	add	sp, #12
   14c78:	bd30      	pop	{r4, r5, pc}
   14c7a:	bf00      	nop
   14c7c:	00014c09 	.word	0x00014c09
   14c80:	100001a0 	.word	0x100001a0

00014c84 <Gpio::SetEdgeFalling()>:

  // Sets the gpio interrupt to trigger on a falling edge.
  void SetEdgeFalling()
   14c84:	b530      	push	{r4, r5, lr}
   14c86:	b083      	sub	sp, #12
   14c88:	4675      	mov	r5, lr
   14c8a:	9001      	str	r0, [sp, #4]
   14c8c:	462b      	mov	r3, r5
   14c8e:	4619      	mov	r1, r3
   14c90:	4819      	ldr	r0, [pc, #100]	; (14cf8 <Gpio::SetEdgeFalling()+0x74>)
   14c92:	f7fe f937 	bl	12f04 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge |= (1 << pin_->GetPin());
   14c96:	9b01      	ldr	r3, [sp, #4]
   14c98:	689a      	ldr	r2, [r3, #8]
   14c9a:	9b01      	ldr	r3, [sp, #4]
   14c9c:	689b      	ldr	r3, [r3, #8]
   14c9e:	681b      	ldr	r3, [r3, #0]
   14ca0:	3330      	adds	r3, #48	; 0x30
   14ca2:	681b      	ldr	r3, [r3, #0]
   14ca4:	4610      	mov	r0, r2
   14ca6:	4798      	blx	r3
   14ca8:	4603      	mov	r3, r0
   14caa:	461a      	mov	r2, r3
   14cac:	2301      	movs	r3, #1
   14cae:	fa03 f002 	lsl.w	r0, r3, r2
   14cb2:	9b01      	ldr	r3, [sp, #4]
   14cb4:	791b      	ldrb	r3, [r3, #4]
   14cb6:	4619      	mov	r1, r3
   14cb8:	4a10      	ldr	r2, [pc, #64]	; (14cfc <Gpio::SetEdgeFalling()+0x78>)
   14cba:	460b      	mov	r3, r1
   14cbc:	009b      	lsls	r3, r3, #2
   14cbe:	440b      	add	r3, r1
   14cc0:	009b      	lsls	r3, r3, #2
   14cc2:	4413      	add	r3, r2
   14cc4:	3310      	adds	r3, #16
   14cc6:	681b      	ldr	r3, [r3, #0]
   14cc8:	681a      	ldr	r2, [r3, #0]
   14cca:	4604      	mov	r4, r0
   14ccc:	9b01      	ldr	r3, [sp, #4]
   14cce:	791b      	ldrb	r3, [r3, #4]
   14cd0:	4618      	mov	r0, r3
   14cd2:	490a      	ldr	r1, [pc, #40]	; (14cfc <Gpio::SetEdgeFalling()+0x78>)
   14cd4:	4603      	mov	r3, r0
   14cd6:	009b      	lsls	r3, r3, #2
   14cd8:	4403      	add	r3, r0
   14cda:	009b      	lsls	r3, r3, #2
   14cdc:	440b      	add	r3, r1
   14cde:	3310      	adds	r3, #16
   14ce0:	681b      	ldr	r3, [r3, #0]
   14ce2:	4322      	orrs	r2, r4
   14ce4:	601a      	str	r2, [r3, #0]
   14ce6:	462b      	mov	r3, r5
   14ce8:	4619      	mov	r1, r3
   14cea:	4803      	ldr	r0, [pc, #12]	; (14cf8 <Gpio::SetEdgeFalling()+0x74>)
   14cec:	f7fe f91e 	bl	12f2c <__cyg_profile_func_exit>
  }
   14cf0:	bf00      	nop
   14cf2:	b003      	add	sp, #12
   14cf4:	bd30      	pop	{r4, r5, pc}
   14cf6:	bf00      	nop
   14cf8:	00014c85 	.word	0x00014c85
   14cfc:	100001a0 	.word	0x100001a0

00014d00 <Gpio::ClearEdgeRising()>:

  // Clears the gpio interrupt to no longer trigger on a rising edge.
  void ClearEdgeRising()
   14d00:	b530      	push	{r4, r5, lr}
   14d02:	b083      	sub	sp, #12
   14d04:	4675      	mov	r5, lr
   14d06:	9001      	str	r0, [sp, #4]
   14d08:	462b      	mov	r3, r5
   14d0a:	4619      	mov	r1, r3
   14d0c:	4819      	ldr	r0, [pc, #100]	; (14d74 <Gpio::ClearEdgeRising()+0x74>)
   14d0e:	f7fe f8f9 	bl	12f04 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_rising_edge &= ~(1 << pin_->GetPin());
   14d12:	9b01      	ldr	r3, [sp, #4]
   14d14:	689a      	ldr	r2, [r3, #8]
   14d16:	9b01      	ldr	r3, [sp, #4]
   14d18:	689b      	ldr	r3, [r3, #8]
   14d1a:	681b      	ldr	r3, [r3, #0]
   14d1c:	3330      	adds	r3, #48	; 0x30
   14d1e:	681b      	ldr	r3, [r3, #0]
   14d20:	4610      	mov	r0, r2
   14d22:	4798      	blx	r3
   14d24:	4603      	mov	r3, r0
   14d26:	461a      	mov	r2, r3
   14d28:	2301      	movs	r3, #1
   14d2a:	4093      	lsls	r3, r2
   14d2c:	43d8      	mvns	r0, r3
   14d2e:	9b01      	ldr	r3, [sp, #4]
   14d30:	791b      	ldrb	r3, [r3, #4]
   14d32:	4619      	mov	r1, r3
   14d34:	4a10      	ldr	r2, [pc, #64]	; (14d78 <Gpio::ClearEdgeRising()+0x78>)
   14d36:	460b      	mov	r3, r1
   14d38:	009b      	lsls	r3, r3, #2
   14d3a:	440b      	add	r3, r1
   14d3c:	009b      	lsls	r3, r3, #2
   14d3e:	4413      	add	r3, r2
   14d40:	330c      	adds	r3, #12
   14d42:	681b      	ldr	r3, [r3, #0]
   14d44:	681a      	ldr	r2, [r3, #0]
   14d46:	4604      	mov	r4, r0
   14d48:	9b01      	ldr	r3, [sp, #4]
   14d4a:	791b      	ldrb	r3, [r3, #4]
   14d4c:	4618      	mov	r0, r3
   14d4e:	490a      	ldr	r1, [pc, #40]	; (14d78 <Gpio::ClearEdgeRising()+0x78>)
   14d50:	4603      	mov	r3, r0
   14d52:	009b      	lsls	r3, r3, #2
   14d54:	4403      	add	r3, r0
   14d56:	009b      	lsls	r3, r3, #2
   14d58:	440b      	add	r3, r1
   14d5a:	330c      	adds	r3, #12
   14d5c:	681b      	ldr	r3, [r3, #0]
   14d5e:	4022      	ands	r2, r4
   14d60:	601a      	str	r2, [r3, #0]
   14d62:	462b      	mov	r3, r5
   14d64:	4619      	mov	r1, r3
   14d66:	4803      	ldr	r0, [pc, #12]	; (14d74 <Gpio::ClearEdgeRising()+0x74>)
   14d68:	f7fe f8e0 	bl	12f2c <__cyg_profile_func_exit>
  }
   14d6c:	bf00      	nop
   14d6e:	b003      	add	sp, #12
   14d70:	bd30      	pop	{r4, r5, pc}
   14d72:	bf00      	nop
   14d74:	00014d01 	.word	0x00014d01
   14d78:	100001a0 	.word	0x100001a0

00014d7c <Gpio::ClearEdgeFalling()>:

  // Clears the gpio interrupt to no longer trigger on a falling edge.
  void ClearEdgeFalling()
   14d7c:	b530      	push	{r4, r5, lr}
   14d7e:	b083      	sub	sp, #12
   14d80:	4675      	mov	r5, lr
   14d82:	9001      	str	r0, [sp, #4]
   14d84:	462b      	mov	r3, r5
   14d86:	4619      	mov	r1, r3
   14d88:	4819      	ldr	r0, [pc, #100]	; (14df0 <Gpio::ClearEdgeFalling()+0x74>)
   14d8a:	f7fe f8bb 	bl	12f04 <__cyg_profile_func_enter>
  {
    *interrupt[interupt_port_].enable_falling_edge &= ~(1 << pin_->GetPin());
   14d8e:	9b01      	ldr	r3, [sp, #4]
   14d90:	689a      	ldr	r2, [r3, #8]
   14d92:	9b01      	ldr	r3, [sp, #4]
   14d94:	689b      	ldr	r3, [r3, #8]
   14d96:	681b      	ldr	r3, [r3, #0]
   14d98:	3330      	adds	r3, #48	; 0x30
   14d9a:	681b      	ldr	r3, [r3, #0]
   14d9c:	4610      	mov	r0, r2
   14d9e:	4798      	blx	r3
   14da0:	4603      	mov	r3, r0
   14da2:	461a      	mov	r2, r3
   14da4:	2301      	movs	r3, #1
   14da6:	4093      	lsls	r3, r2
   14da8:	43d8      	mvns	r0, r3
   14daa:	9b01      	ldr	r3, [sp, #4]
   14dac:	791b      	ldrb	r3, [r3, #4]
   14dae:	4619      	mov	r1, r3
   14db0:	4a10      	ldr	r2, [pc, #64]	; (14df4 <Gpio::ClearEdgeFalling()+0x78>)
   14db2:	460b      	mov	r3, r1
   14db4:	009b      	lsls	r3, r3, #2
   14db6:	440b      	add	r3, r1
   14db8:	009b      	lsls	r3, r3, #2
   14dba:	4413      	add	r3, r2
   14dbc:	3310      	adds	r3, #16
   14dbe:	681b      	ldr	r3, [r3, #0]
   14dc0:	681a      	ldr	r2, [r3, #0]
   14dc2:	4604      	mov	r4, r0
   14dc4:	9b01      	ldr	r3, [sp, #4]
   14dc6:	791b      	ldrb	r3, [r3, #4]
   14dc8:	4618      	mov	r0, r3
   14dca:	490a      	ldr	r1, [pc, #40]	; (14df4 <Gpio::ClearEdgeFalling()+0x78>)
   14dcc:	4603      	mov	r3, r0
   14dce:	009b      	lsls	r3, r3, #2
   14dd0:	4403      	add	r3, r0
   14dd2:	009b      	lsls	r3, r3, #2
   14dd4:	440b      	add	r3, r1
   14dd6:	3310      	adds	r3, #16
   14dd8:	681b      	ldr	r3, [r3, #0]
   14dda:	4022      	ands	r2, r4
   14ddc:	601a      	str	r2, [r3, #0]
   14dde:	462b      	mov	r3, r5
   14de0:	4619      	mov	r1, r3
   14de2:	4803      	ldr	r0, [pc, #12]	; (14df0 <Gpio::ClearEdgeFalling()+0x74>)
   14de4:	f7fe f8a2 	bl	12f2c <__cyg_profile_func_exit>
  }
   14de8:	bf00      	nop
   14dea:	b003      	add	sp, #12
   14dec:	bd30      	pop	{r4, r5, pc}
   14dee:	bf00      	nop
   14df0:	00014d7d 	.word	0x00014d7d
   14df4:	100001a0 	.word	0x100001a0

00014df8 <SystemControllerInterface::SystemControllerInterface()>:
class SystemControllerInterface
   14df8:	b082      	sub	sp, #8
   14dfa:	9001      	str	r0, [sp, #4]
   14dfc:	4a03      	ldr	r2, [pc, #12]	; (14e0c <SystemControllerInterface::SystemControllerInterface()+0x14>)
   14dfe:	9b01      	ldr	r3, [sp, #4]
   14e00:	601a      	str	r2, [r3, #0]
   14e02:	9b01      	ldr	r3, [sp, #4]
   14e04:	4618      	mov	r0, r3
   14e06:	b002      	add	sp, #8
   14e08:	4770      	bx	lr
   14e0a:	bf00      	nop
   14e0c:	000191c8 	.word	0x000191c8

00014e10 <Lpc40xxSystemController::Lpc40xxSystemController()>:
  constexpr Lpc40xxSystemController() {}
   14e10:	b500      	push	{lr}
   14e12:	b083      	sub	sp, #12
   14e14:	9001      	str	r0, [sp, #4]
   14e16:	9b01      	ldr	r3, [sp, #4]
   14e18:	4618      	mov	r0, r3
   14e1a:	f7ff ffed 	bl	14df8 <SystemControllerInterface::SystemControllerInterface()>
   14e1e:	4a04      	ldr	r2, [pc, #16]	; (14e30 <Lpc40xxSystemController::Lpc40xxSystemController()+0x20>)
   14e20:	9b01      	ldr	r3, [sp, #4]
   14e22:	601a      	str	r2, [r3, #0]
   14e24:	9b01      	ldr	r3, [sp, #4]
   14e26:	4618      	mov	r0, r3
   14e28:	b003      	add	sp, #12
   14e2a:	f85d fb04 	ldr.w	pc, [sp], #4
   14e2e:	bf00      	nop
   14e30:	00017c54 	.word	0x00017c54

00014e34 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>:
constexpr Type Value(Enum enum_type_value)
   14e34:	b530      	push	{r4, r5, lr}
   14e36:	b083      	sub	sp, #12
   14e38:	4675      	mov	r5, lr
   14e3a:	9001      	str	r0, [sp, #4]
   14e3c:	462b      	mov	r3, r5
   14e3e:	4619      	mov	r1, r3
   14e40:	4806      	ldr	r0, [pc, #24]	; (14e5c <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   14e42:	f7fe f85f 	bl	12f04 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   14e46:	9c01      	ldr	r4, [sp, #4]
   14e48:	462b      	mov	r3, r5
   14e4a:	4619      	mov	r1, r3
   14e4c:	4803      	ldr	r0, [pc, #12]	; (14e5c <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)+0x28>)
   14e4e:	f7fe f86d 	bl	12f2c <__cyg_profile_func_exit>
   14e52:	4623      	mov	r3, r4
}
   14e54:	4618      	mov	r0, r3
   14e56:	b003      	add	sp, #12
   14e58:	bd30      	pop	{r4, r5, pc}
   14e5a:	bf00      	nop
   14e5c:	00014e35 	.word	0x00014e35

00014e60 <SspInterface::SspInterface()>:
#include "L0_LowLevel/system_controller.hpp"
#include "L1_Drivers/pin.hpp"
#include "utility/bit.hpp"
#include "utility/enum.hpp"

class SspInterface
   14e60:	b530      	push	{r4, r5, lr}
   14e62:	b083      	sub	sp, #12
   14e64:	4675      	mov	r5, lr
   14e66:	9001      	str	r0, [sp, #4]
   14e68:	462b      	mov	r3, r5
   14e6a:	4619      	mov	r1, r3
   14e6c:	4807      	ldr	r0, [pc, #28]	; (14e8c <SspInterface::SspInterface()+0x2c>)
   14e6e:	f7fe f849 	bl	12f04 <__cyg_profile_func_enter>
   14e72:	4a07      	ldr	r2, [pc, #28]	; (14e90 <SspInterface::SspInterface()+0x30>)
   14e74:	9b01      	ldr	r3, [sp, #4]
   14e76:	601a      	str	r2, [r3, #0]
   14e78:	9c01      	ldr	r4, [sp, #4]
   14e7a:	462b      	mov	r3, r5
   14e7c:	4619      	mov	r1, r3
   14e7e:	4803      	ldr	r0, [pc, #12]	; (14e8c <SspInterface::SspInterface()+0x2c>)
   14e80:	f7fe f854 	bl	12f2c <__cyg_profile_func_exit>
   14e84:	4623      	mov	r3, r4
   14e86:	4618      	mov	r0, r3
   14e88:	b003      	add	sp, #12
   14e8a:	bd30      	pop	{r4, r5, pc}
   14e8c:	00014e61 	.word	0x00014e61
   14e90:	000191a0 	.word	0x000191a0

00014e94 <PinInterface::PinInterface(PinInterface const&)>:
class PinInterface
   14e94:	b530      	push	{r4, r5, lr}
   14e96:	b083      	sub	sp, #12
   14e98:	4675      	mov	r5, lr
   14e9a:	9001      	str	r0, [sp, #4]
   14e9c:	9100      	str	r1, [sp, #0]
   14e9e:	462b      	mov	r3, r5
   14ea0:	4619      	mov	r1, r3
   14ea2:	4808      	ldr	r0, [pc, #32]	; (14ec4 <PinInterface::PinInterface(PinInterface const&)+0x30>)
   14ea4:	f7fe f82e 	bl	12f04 <__cyg_profile_func_enter>
   14ea8:	4a07      	ldr	r2, [pc, #28]	; (14ec8 <PinInterface::PinInterface(PinInterface const&)+0x34>)
   14eaa:	9b01      	ldr	r3, [sp, #4]
   14eac:	601a      	str	r2, [r3, #0]
   14eae:	9c01      	ldr	r4, [sp, #4]
   14eb0:	462b      	mov	r3, r5
   14eb2:	4619      	mov	r1, r3
   14eb4:	4803      	ldr	r0, [pc, #12]	; (14ec4 <PinInterface::PinInterface(PinInterface const&)+0x30>)
   14eb6:	f7fe f839 	bl	12f2c <__cyg_profile_func_exit>
   14eba:	4623      	mov	r3, r4
   14ebc:	4618      	mov	r0, r3
   14ebe:	b003      	add	sp, #12
   14ec0:	bd30      	pop	{r4, r5, pc}
   14ec2:	bf00      	nop
   14ec4:	00014e95 	.word	0x00014e95
   14ec8:	0001927c 	.word	0x0001927c

00014ecc <Pin::Pin(Pin const&)>:
class Pin : public PinInterface
   14ecc:	b530      	push	{r4, r5, lr}
   14ece:	b083      	sub	sp, #12
   14ed0:	4675      	mov	r5, lr
   14ed2:	9001      	str	r0, [sp, #4]
   14ed4:	9100      	str	r1, [sp, #0]
   14ed6:	462b      	mov	r3, r5
   14ed8:	4619      	mov	r1, r3
   14eda:	480f      	ldr	r0, [pc, #60]	; (14f18 <Pin::Pin(Pin const&)+0x4c>)
   14edc:	f7fe f812 	bl	12f04 <__cyg_profile_func_enter>
   14ee0:	9b01      	ldr	r3, [sp, #4]
   14ee2:	9a00      	ldr	r2, [sp, #0]
   14ee4:	4611      	mov	r1, r2
   14ee6:	4618      	mov	r0, r3
   14ee8:	f7ff ffd4 	bl	14e94 <PinInterface::PinInterface(PinInterface const&)>
   14eec:	4a0b      	ldr	r2, [pc, #44]	; (14f1c <Pin::Pin(Pin const&)+0x50>)
   14eee:	9b01      	ldr	r3, [sp, #4]
   14ef0:	601a      	str	r2, [r3, #0]
   14ef2:	9b00      	ldr	r3, [sp, #0]
   14ef4:	791a      	ldrb	r2, [r3, #4]
   14ef6:	9b01      	ldr	r3, [sp, #4]
   14ef8:	711a      	strb	r2, [r3, #4]
   14efa:	9b00      	ldr	r3, [sp, #0]
   14efc:	795a      	ldrb	r2, [r3, #5]
   14efe:	9b01      	ldr	r3, [sp, #4]
   14f00:	715a      	strb	r2, [r3, #5]
   14f02:	9c01      	ldr	r4, [sp, #4]
   14f04:	462b      	mov	r3, r5
   14f06:	4619      	mov	r1, r3
   14f08:	4803      	ldr	r0, [pc, #12]	; (14f18 <Pin::Pin(Pin const&)+0x4c>)
   14f0a:	f7fe f80f 	bl	12f2c <__cyg_profile_func_exit>
   14f0e:	4623      	mov	r3, r4
   14f10:	4618      	mov	r0, r3
   14f12:	b003      	add	sp, #12
   14f14:	bd30      	pop	{r4, r5, pc}
   14f16:	bf00      	nop
   14f18:	00014ecd 	.word	0x00014ecd
   14f1c:	00017be0 	.word	0x00017be0

00014f20 <Ssp::Ssp(Ssp::Peripheral)>:
        pssp_(Peripheral::kSsp0)
  {
  }

  /// User modified constructor. Must be followed by Set functions.
  explicit constexpr Ssp(Peripheral set_pssp)
   14f20:	b530      	push	{r4, r5, lr}
   14f22:	b083      	sub	sp, #12
   14f24:	4675      	mov	r5, lr
   14f26:	9001      	str	r0, [sp, #4]
   14f28:	9100      	str	r1, [sp, #0]
   14f2a:	462b      	mov	r3, r5
   14f2c:	4619      	mov	r1, r3
   14f2e:	4831      	ldr	r0, [pc, #196]	; (14ff4 <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   14f30:	f7fd ffe8 	bl	12f04 <__cyg_profile_func_enter>
        miso_(&miso_pin_),
        sck_(&sck_pin_),
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
        pssp_(set_pssp)
   14f34:	9b01      	ldr	r3, [sp, #4]
   14f36:	4618      	mov	r0, r3
   14f38:	f7ff ff92 	bl	14e60 <SspInterface::SspInterface()>
   14f3c:	9b01      	ldr	r3, [sp, #4]
   14f3e:	3304      	adds	r3, #4
   14f40:	4618      	mov	r0, r3
   14f42:	f7ff ff65 	bl	14e10 <Lpc40xxSystemController::Lpc40xxSystemController()>
   14f46:	4a2c      	ldr	r2, [pc, #176]	; (14ff8 <Ssp::Ssp(Ssp::Peripheral)+0xd8>)
   14f48:	9b01      	ldr	r3, [sp, #4]
   14f4a:	601a      	str	r2, [r3, #0]
   14f4c:	4a2b      	ldr	r2, [pc, #172]	; (14ffc <Ssp::Ssp(Ssp::Peripheral)+0xdc>)
   14f4e:	9b01      	ldr	r3, [sp, #4]
   14f50:	605a      	str	r2, [r3, #4]
   14f52:	9b01      	ldr	r3, [sp, #4]
   14f54:	f103 0214 	add.w	r2, r3, #20
   14f58:	9b01      	ldr	r3, [sp, #4]
   14f5a:	609a      	str	r2, [r3, #8]
   14f5c:	9b01      	ldr	r3, [sp, #4]
   14f5e:	f103 021c 	add.w	r2, r3, #28
   14f62:	9b01      	ldr	r3, [sp, #4]
   14f64:	60da      	str	r2, [r3, #12]
   14f66:	9b01      	ldr	r3, [sp, #4]
   14f68:	f103 0224 	add.w	r2, r3, #36	; 0x24
   14f6c:	9b01      	ldr	r3, [sp, #4]
   14f6e:	611a      	str	r2, [r3, #16]
   14f70:	9b01      	ldr	r3, [sp, #4]
   14f72:	f103 0414 	add.w	r4, r3, #20
        mosi_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMosi]),
   14f76:	9800      	ldr	r0, [sp, #0]
   14f78:	f7ff ff5c 	bl	14e34 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14f7c:	4602      	mov	r2, r0
        pssp_(set_pssp)
   14f7e:	4613      	mov	r3, r2
   14f80:	005b      	lsls	r3, r3, #1
   14f82:	4413      	add	r3, r2
   14f84:	00db      	lsls	r3, r3, #3
   14f86:	4a1e      	ldr	r2, [pc, #120]	; (15000 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   14f88:	4413      	add	r3, r2
   14f8a:	4619      	mov	r1, r3
   14f8c:	4620      	mov	r0, r4
   14f8e:	f7ff ff9d 	bl	14ecc <Pin::Pin(Pin const&)>
   14f92:	9b01      	ldr	r3, [sp, #4]
   14f94:	f103 041c 	add.w	r4, r3, #28
        miso_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kMiso]),
   14f98:	9800      	ldr	r0, [sp, #0]
   14f9a:	f7ff ff4b 	bl	14e34 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14f9e:	4602      	mov	r2, r0
        pssp_(set_pssp)
   14fa0:	4613      	mov	r3, r2
   14fa2:	005b      	lsls	r3, r3, #1
   14fa4:	4413      	add	r3, r2
   14fa6:	00db      	lsls	r3, r3, #3
   14fa8:	3308      	adds	r3, #8
   14faa:	4a15      	ldr	r2, [pc, #84]	; (15000 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   14fac:	4413      	add	r3, r2
   14fae:	4619      	mov	r1, r3
   14fb0:	4620      	mov	r0, r4
   14fb2:	f7ff ff8b 	bl	14ecc <Pin::Pin(Pin const&)>
   14fb6:	9b01      	ldr	r3, [sp, #4]
   14fb8:	f103 0424 	add.w	r4, r3, #36	; 0x24
        sck_pin_(kSspPinMatrix[util::Value(set_pssp)][MatrixLookup::kSck]),
   14fbc:	9800      	ldr	r0, [sp, #0]
   14fbe:	f7ff ff39 	bl	14e34 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   14fc2:	4602      	mov	r2, r0
        pssp_(set_pssp)
   14fc4:	4613      	mov	r3, r2
   14fc6:	005b      	lsls	r3, r3, #1
   14fc8:	4413      	add	r3, r2
   14fca:	00db      	lsls	r3, r3, #3
   14fcc:	3310      	adds	r3, #16
   14fce:	4a0c      	ldr	r2, [pc, #48]	; (15000 <Ssp::Ssp(Ssp::Peripheral)+0xe0>)
   14fd0:	4413      	add	r3, r2
   14fd2:	4619      	mov	r1, r3
   14fd4:	4620      	mov	r0, r4
   14fd6:	f7ff ff79 	bl	14ecc <Pin::Pin(Pin const&)>
   14fda:	9b01      	ldr	r3, [sp, #4]
   14fdc:	9a00      	ldr	r2, [sp, #0]
   14fde:	62da      	str	r2, [r3, #44]	; 0x2c
  {
  }
   14fe0:	9c01      	ldr	r4, [sp, #4]
   14fe2:	462b      	mov	r3, r5
   14fe4:	4619      	mov	r1, r3
   14fe6:	4803      	ldr	r0, [pc, #12]	; (14ff4 <Ssp::Ssp(Ssp::Peripheral)+0xd4>)
   14fe8:	f7fd ffa0 	bl	12f2c <__cyg_profile_func_exit>
   14fec:	4623      	mov	r3, r4
   14fee:	4618      	mov	r0, r3
   14ff0:	b003      	add	sp, #12
   14ff2:	bd30      	pop	{r4, r5, pc}
   14ff4:	00014f21 	.word	0x00014f21
   14ff8:	00019154 	.word	0x00019154
   14ffc:	0001917c 	.word	0x0001917c
   15000:	00018d08 	.word	0x00018d08

00015004 <Ssp::Initialize()>:
  }

  /// Powers on the peripheral, sets the peripheral clock, format, and data
  /// size, and enables the SSP pins for communication see and more.
  /// See page 601 of user manual UM10562 LPC408x/407x for more details.
  void Initialize() override
   15004:	b570      	push	{r4, r5, r6, lr}
   15006:	b086      	sub	sp, #24
   15008:	4676      	mov	r6, lr
   1500a:	9001      	str	r0, [sp, #4]
   1500c:	4633      	mov	r3, r6
   1500e:	4619      	mov	r1, r3
   15010:	4830      	ldr	r0, [pc, #192]	; (150d4 <Ssp::Initialize()+0xd0>)
   15012:	f7fd ff77 	bl	12f04 <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   15016:	9b01      	ldr	r3, [sp, #4]
   15018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1501a:	4618      	mov	r0, r3
   1501c:	f7ff ff0a 	bl	14e34 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15020:	4603      	mov	r3, r0
   15022:	9305      	str	r3, [sp, #20]
    // Power up peripheral
    PowerUpPeripheral(kPowerBit[pssp]);
   15024:	9b01      	ldr	r3, [sp, #4]
   15026:	1d18      	adds	r0, r3, #4
   15028:	9b01      	ldr	r3, [sp, #4]
   1502a:	685b      	ldr	r3, [r3, #4]
   1502c:	3314      	adds	r3, #20
   1502e:	681b      	ldr	r3, [r3, #0]
   15030:	9a05      	ldr	r2, [sp, #20]
   15032:	0092      	lsls	r2, r2, #2
   15034:	4928      	ldr	r1, [pc, #160]	; (150d8 <Ssp::Initialize()+0xd4>)
   15036:	440a      	add	r2, r1
   15038:	4611      	mov	r1, r2
   1503a:	4798      	blx	r3
    // Enable SSP pins
    mosi_->SetPinFunction(kPinSelect[pssp]);
   1503c:	9b01      	ldr	r3, [sp, #4]
   1503e:	6898      	ldr	r0, [r3, #8]
   15040:	9b01      	ldr	r3, [sp, #4]
   15042:	689b      	ldr	r3, [r3, #8]
   15044:	681b      	ldr	r3, [r3, #0]
   15046:	681b      	ldr	r3, [r3, #0]
   15048:	4924      	ldr	r1, [pc, #144]	; (150dc <Ssp::Initialize()+0xd8>)
   1504a:	9a05      	ldr	r2, [sp, #20]
   1504c:	440a      	add	r2, r1
   1504e:	7812      	ldrb	r2, [r2, #0]
   15050:	4611      	mov	r1, r2
   15052:	4798      	blx	r3
    miso_->SetPinFunction(kPinSelect[pssp]);
   15054:	9b01      	ldr	r3, [sp, #4]
   15056:	68d8      	ldr	r0, [r3, #12]
   15058:	9b01      	ldr	r3, [sp, #4]
   1505a:	68db      	ldr	r3, [r3, #12]
   1505c:	681b      	ldr	r3, [r3, #0]
   1505e:	681b      	ldr	r3, [r3, #0]
   15060:	491e      	ldr	r1, [pc, #120]	; (150dc <Ssp::Initialize()+0xd8>)
   15062:	9a05      	ldr	r2, [sp, #20]
   15064:	440a      	add	r2, r1
   15066:	7812      	ldrb	r2, [r2, #0]
   15068:	4611      	mov	r1, r2
   1506a:	4798      	blx	r3
    sck_->SetPinFunction(kPinSelect[pssp]);
   1506c:	9b01      	ldr	r3, [sp, #4]
   1506e:	6918      	ldr	r0, [r3, #16]
   15070:	9b01      	ldr	r3, [sp, #4]
   15072:	691b      	ldr	r3, [r3, #16]
   15074:	681b      	ldr	r3, [r3, #0]
   15076:	681b      	ldr	r3, [r3, #0]
   15078:	4918      	ldr	r1, [pc, #96]	; (150dc <Ssp::Initialize()+0xd8>)
   1507a:	9a05      	ldr	r2, [sp, #20]
   1507c:	440a      	add	r2, r1
   1507e:	7812      	ldrb	r2, [r2, #0]
   15080:	4611      	mov	r1, r2
   15082:	4798      	blx	r3
    // Enable SSP
    ssp_registers[pssp]->CR1 = bit::Set(ssp_registers[pssp]->CR1, kSspEnable);
   15084:	4a16      	ldr	r2, [pc, #88]	; (150e0 <Ssp::Initialize()+0xdc>)
   15086:	9b05      	ldr	r3, [sp, #20]
   15088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1508c:	685b      	ldr	r3, [r3, #4]
   1508e:	4914      	ldr	r1, [pc, #80]	; (150e0 <Ssp::Initialize()+0xdc>)
   15090:	9a05      	ldr	r2, [sp, #20]
   15092:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
   15096:	9304      	str	r3, [sp, #16]
   15098:	2301      	movs	r3, #1
   1509a:	9303      	str	r3, [sp, #12]
   1509c:	4633      	mov	r3, r6
   1509e:	4619      	mov	r1, r3
   150a0:	4810      	ldr	r0, [pc, #64]	; (150e4 <Ssp::Initialize()+0xe0>)
   150a2:	f7fd ff2f 	bl	12f04 <__cyg_profile_func_enter>
[[gnu::always_inline]] [[nodiscard]]
constexpr T Set(T target, uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Set only accepts intergers.");
  return target | (1 << position);
   150a6:	2201      	movs	r2, #1
   150a8:	9b03      	ldr	r3, [sp, #12]
   150aa:	fa02 f303 	lsl.w	r3, r2, r3
   150ae:	461a      	mov	r2, r3
   150b0:	9b04      	ldr	r3, [sp, #16]
   150b2:	ea42 0503 	orr.w	r5, r2, r3
   150b6:	4633      	mov	r3, r6
   150b8:	4619      	mov	r1, r3
   150ba:	480a      	ldr	r0, [pc, #40]	; (150e4 <Ssp::Initialize()+0xe0>)
   150bc:	f7fd ff36 	bl	12f2c <__cyg_profile_func_exit>
   150c0:	6065      	str	r5, [r4, #4]
   150c2:	4633      	mov	r3, r6
   150c4:	4619      	mov	r1, r3
   150c6:	4803      	ldr	r0, [pc, #12]	; (150d4 <Ssp::Initialize()+0xd0>)
   150c8:	f7fd ff30 	bl	12f2c <__cyg_profile_func_exit>
  }
   150cc:	bf00      	nop
   150ce:	b006      	add	sp, #24
   150d0:	bd70      	pop	{r4, r5, r6, pc}
   150d2:	bf00      	nop
   150d4:	00015005 	.word	0x00015005
   150d8:	00018d50 	.word	0x00018d50
   150dc:	00018d04 	.word	0x00018d04
   150e0:	100001c8 	.word	0x100001c8
   150e4:	00016c65 	.word	0x00016c65

000150e8 <Ssp::IsTransferRegBusy()>:

  /// Checks if the SSP controller is idle.
  /// @returns true if the controller is sending or receiving a data frame and
  /// false if it is idle.
  bool IsTransferRegBusy() override
   150e8:	b530      	push	{r4, r5, lr}
   150ea:	b085      	sub	sp, #20
   150ec:	4675      	mov	r5, lr
   150ee:	9001      	str	r0, [sp, #4]
   150f0:	462b      	mov	r3, r5
   150f2:	4619      	mov	r1, r3
   150f4:	4817      	ldr	r0, [pc, #92]	; (15154 <Ssp::IsTransferRegBusy()+0x6c>)
   150f6:	f7fd ff05 	bl	12f04 <__cyg_profile_func_enter>
  {
    return (bit::Read(ssp_registers[util::Value(pssp_)]->SR, kDataLineIdleBit));
   150fa:	9b01      	ldr	r3, [sp, #4]
   150fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   150fe:	4618      	mov	r0, r3
   15100:	f7ff fe98 	bl	14e34 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15104:	4602      	mov	r2, r0
   15106:	4b14      	ldr	r3, [pc, #80]	; (15158 <Ssp::IsTransferRegBusy()+0x70>)
   15108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1510c:	68db      	ldr	r3, [r3, #12]
   1510e:	9303      	str	r3, [sp, #12]
   15110:	2304      	movs	r3, #4
   15112:	9302      	str	r3, [sp, #8]
   15114:	462b      	mov	r3, r5
   15116:	4619      	mov	r1, r3
   15118:	4810      	ldr	r0, [pc, #64]	; (1515c <Ssp::IsTransferRegBusy()+0x74>)
   1511a:	f7fd fef3 	bl	12f04 <__cyg_profile_func_enter>
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
                                                        uint32_t position)
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
   1511e:	2201      	movs	r2, #1
   15120:	9b02      	ldr	r3, [sp, #8]
   15122:	fa02 f303 	lsl.w	r3, r2, r3
   15126:	461a      	mov	r2, r3
   15128:	9b03      	ldr	r3, [sp, #12]
   1512a:	4013      	ands	r3, r2
   1512c:	2b00      	cmp	r3, #0
   1512e:	bf14      	ite	ne
   15130:	2301      	movne	r3, #1
   15132:	2300      	moveq	r3, #0
   15134:	b2dc      	uxtb	r4, r3
   15136:	462b      	mov	r3, r5
   15138:	4619      	mov	r1, r3
   1513a:	4808      	ldr	r0, [pc, #32]	; (1515c <Ssp::IsTransferRegBusy()+0x74>)
   1513c:	f7fd fef6 	bl	12f2c <__cyg_profile_func_exit>
   15140:	462b      	mov	r3, r5
   15142:	4619      	mov	r1, r3
   15144:	4803      	ldr	r0, [pc, #12]	; (15154 <Ssp::IsTransferRegBusy()+0x6c>)
   15146:	f7fd fef1 	bl	12f2c <__cyg_profile_func_exit>
   1514a:	4623      	mov	r3, r4
  }
   1514c:	4618      	mov	r0, r3
   1514e:	b005      	add	sp, #20
   15150:	bd30      	pop	{r4, r5, pc}
   15152:	bf00      	nop
   15154:	000150e9 	.word	0x000150e9
   15158:	100001c8 	.word	0x100001c8
   1515c:	00016ca1 	.word	0x00016ca1

00015160 <Ssp::Transfer(unsigned short)>:
  /// data register. This functions for both transmitting and
  /// receiving data. It is recommended this region be protected
  /// by a mutex.
  /// @param data - information to be placed in data register
  /// @return - received data from external device
  uint16_t Transfer(uint16_t data) override
   15160:	b530      	push	{r4, r5, lr}
   15162:	b085      	sub	sp, #20
   15164:	4675      	mov	r5, lr
   15166:	9001      	str	r0, [sp, #4]
   15168:	460b      	mov	r3, r1
   1516a:	f8ad 3002 	strh.w	r3, [sp, #2]
   1516e:	462b      	mov	r3, r5
   15170:	4619      	mov	r1, r3
   15172:	4814      	ldr	r0, [pc, #80]	; (151c4 <Ssp::Transfer(unsigned short)+0x64>)
   15174:	f7fd fec6 	bl	12f04 <__cyg_profile_func_enter>
  {
    uint32_t pssp = util::Value(pssp_);
   15178:	9b01      	ldr	r3, [sp, #4]
   1517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1517c:	4618      	mov	r0, r3
   1517e:	f7ff fe59 	bl	14e34 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15182:	4603      	mov	r3, r0
   15184:	9303      	str	r3, [sp, #12]

    ssp_registers[pssp]->DR = data;
   15186:	4a10      	ldr	r2, [pc, #64]	; (151c8 <Ssp::Transfer(unsigned short)+0x68>)
   15188:	9b03      	ldr	r3, [sp, #12]
   1518a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1518e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   15192:	609a      	str	r2, [r3, #8]
    while (IsTransferRegBusy())
   15194:	9801      	ldr	r0, [sp, #4]
   15196:	f7ff ffa7 	bl	150e8 <Ssp::IsTransferRegBusy()>
   1519a:	4603      	mov	r3, r0
   1519c:	2b00      	cmp	r3, #0
   1519e:	d001      	beq.n	151a4 <Ssp::Transfer(unsigned short)+0x44>
    {
      continue;
   151a0:	bf00      	nop
    while (IsTransferRegBusy())
   151a2:	e7f7      	b.n	15194 <Ssp::Transfer(unsigned short)+0x34>
    }
    return static_cast<uint16_t>(ssp_registers[pssp]->DR);
   151a4:	4a08      	ldr	r2, [pc, #32]	; (151c8 <Ssp::Transfer(unsigned short)+0x68>)
   151a6:	9b03      	ldr	r3, [sp, #12]
   151a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151ac:	689b      	ldr	r3, [r3, #8]
   151ae:	b29c      	uxth	r4, r3
   151b0:	462b      	mov	r3, r5
   151b2:	4619      	mov	r1, r3
   151b4:	4803      	ldr	r0, [pc, #12]	; (151c4 <Ssp::Transfer(unsigned short)+0x64>)
   151b6:	f7fd feb9 	bl	12f2c <__cyg_profile_func_exit>
   151ba:	4623      	mov	r3, r4
  }
   151bc:	4618      	mov	r0, r3
   151be:	b005      	add	sp, #20
   151c0:	bd30      	pop	{r4, r5, pc}
   151c2:	bf00      	nop
   151c4:	00015161 	.word	0x00015161
   151c8:	100001c8 	.word	0x100001c8

000151cc <Ssp::SetSpiMasterDefault()>:

  /// Sets up SSP peripheral as SPI master
  void SetSpiMasterDefault() override
   151cc:	b510      	push	{r4, lr}
   151ce:	b086      	sub	sp, #24
   151d0:	4674      	mov	r4, lr
   151d2:	9003      	str	r0, [sp, #12]
   151d4:	4623      	mov	r3, r4
   151d6:	4619      	mov	r1, r3
   151d8:	4812      	ldr	r0, [pc, #72]	; (15224 <Ssp::SetSpiMasterDefault()+0x58>)
   151da:	f7fd fe93 	bl	12f04 <__cyg_profile_func_enter>
  {
    constexpr bool kHighPolarity  = 1;
   151de:	2301      	movs	r3, #1
   151e0:	f88d 3017 	strb.w	r3, [sp, #23]
    constexpr bool kPhase0        = 0;
   151e4:	2300      	movs	r3, #0
   151e6:	f88d 3016 	strb.w	r3, [sp, #22]
    constexpr uint8_t kScrDivider = 0;
   151ea:	2300      	movs	r3, #0
   151ec:	f88d 3015 	strb.w	r3, [sp, #21]
    constexpr uint8_t kPrescaler  = SJ2_SYSTEM_CLOCK_RATE_MHZ;
   151f0:	2330      	movs	r3, #48	; 0x30
   151f2:	f88d 3014 	strb.w	r3, [sp, #20]

    SetPeripheralMode(kMaster, kSpi, kEight);
   151f6:	2307      	movs	r3, #7
   151f8:	2200      	movs	r2, #0
   151fa:	2100      	movs	r1, #0
   151fc:	9803      	ldr	r0, [sp, #12]
   151fe:	f000 f85b 	bl	152b8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>
    SetClock(kHighPolarity, kPhase0, kScrDivider, kPrescaler);
   15202:	2330      	movs	r3, #48	; 0x30
   15204:	9300      	str	r3, [sp, #0]
   15206:	2300      	movs	r3, #0
   15208:	2200      	movs	r2, #0
   1520a:	2101      	movs	r1, #1
   1520c:	9803      	ldr	r0, [sp, #12]
   1520e:	f000 fa09 	bl	15624 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>
   15212:	4623      	mov	r3, r4
   15214:	4619      	mov	r1, r3
   15216:	4803      	ldr	r0, [pc, #12]	; (15224 <Ssp::SetSpiMasterDefault()+0x58>)
   15218:	f7fd fe88 	bl	12f2c <__cyg_profile_func_exit>
  }
   1521c:	bf00      	nop
   1521e:	b006      	add	sp, #24
   15220:	bd10      	pop	{r4, pc}
   15222:	bf00      	nop
   15224:	000151cd 	.word	0x000151cd

00015228 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>:
constexpr Type Value(Enum enum_type_value)
   15228:	b530      	push	{r4, r5, lr}
   1522a:	b083      	sub	sp, #12
   1522c:	4675      	mov	r5, lr
   1522e:	4603      	mov	r3, r0
   15230:	f88d 3007 	strb.w	r3, [sp, #7]
   15234:	462b      	mov	r3, r5
   15236:	4619      	mov	r1, r3
   15238:	4806      	ldr	r0, [pc, #24]	; (15254 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   1523a:	f7fd fe63 	bl	12f04 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   1523e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   15242:	462b      	mov	r3, r5
   15244:	4619      	mov	r1, r3
   15246:	4803      	ldr	r0, [pc, #12]	; (15254 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)+0x2c>)
   15248:	f7fd fe70 	bl	12f2c <__cyg_profile_func_exit>
   1524c:	4623      	mov	r3, r4
}
   1524e:	4618      	mov	r0, r3
   15250:	b003      	add	sp, #12
   15252:	bd30      	pop	{r4, r5, pc}
   15254:	00015229 	.word	0x00015229

00015258 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>:
constexpr Type Value(Enum enum_type_value)
   15258:	b530      	push	{r4, r5, lr}
   1525a:	b083      	sub	sp, #12
   1525c:	4675      	mov	r5, lr
   1525e:	4603      	mov	r3, r0
   15260:	f88d 3007 	strb.w	r3, [sp, #7]
   15264:	462b      	mov	r3, r5
   15266:	4619      	mov	r1, r3
   15268:	4806      	ldr	r0, [pc, #24]	; (15284 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   1526a:	f7fd fe4b 	bl	12f04 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   1526e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   15272:	462b      	mov	r3, r5
   15274:	4619      	mov	r1, r3
   15276:	4803      	ldr	r0, [pc, #12]	; (15284 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)+0x2c>)
   15278:	f7fd fe58 	bl	12f2c <__cyg_profile_func_exit>
   1527c:	4623      	mov	r3, r4
}
   1527e:	4618      	mov	r0, r3
   15280:	b003      	add	sp, #12
   15282:	bd30      	pop	{r4, r5, pc}
   15284:	00015259 	.word	0x00015259

00015288 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>:
constexpr Type Value(Enum enum_type_value)
   15288:	b530      	push	{r4, r5, lr}
   1528a:	b083      	sub	sp, #12
   1528c:	4675      	mov	r5, lr
   1528e:	4603      	mov	r3, r0
   15290:	f88d 3007 	strb.w	r3, [sp, #7]
   15294:	462b      	mov	r3, r5
   15296:	4619      	mov	r1, r3
   15298:	4806      	ldr	r0, [pc, #24]	; (152b4 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   1529a:	f7fd fe33 	bl	12f04 <__cyg_profile_func_enter>
  return static_cast<Type>(enum_type_value);
   1529e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   152a2:	462b      	mov	r3, r5
   152a4:	4619      	mov	r1, r3
   152a6:	4803      	ldr	r0, [pc, #12]	; (152b4 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)+0x2c>)
   152a8:	f7fd fe40 	bl	12f2c <__cyg_profile_func_exit>
   152ac:	4623      	mov	r3, r4
}
   152ae:	4618      	mov	r0, r3
   152b0:	b003      	add	sp, #12
   152b2:	bd30      	pop	{r4, r5, pc}
   152b4:	00015289 	.word	0x00015289

000152b8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)>:

  /// Sets the various modes for the Peripheral
  /// @param mode - master or slave mode
  /// @param frame - format for Peripheral data to use
  /// @param size - number of bits per frame
  void SetPeripheralMode(MasterSlaveMode mode, FrameMode frame,
   152b8:	b570      	push	{r4, r5, r6, lr}
   152ba:	b098      	sub	sp, #96	; 0x60
   152bc:	4674      	mov	r4, lr
   152be:	9001      	str	r0, [sp, #4]
   152c0:	4608      	mov	r0, r1
   152c2:	4611      	mov	r1, r2
   152c4:	461a      	mov	r2, r3
   152c6:	4603      	mov	r3, r0
   152c8:	f88d 3003 	strb.w	r3, [sp, #3]
   152cc:	460b      	mov	r3, r1
   152ce:	f88d 3002 	strb.w	r3, [sp, #2]
   152d2:	4613      	mov	r3, r2
   152d4:	f88d 3001 	strb.w	r3, [sp, #1]
   152d8:	4623      	mov	r3, r4
   152da:	4619      	mov	r1, r3
   152dc:	4875      	ldr	r0, [pc, #468]	; (154b4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   152de:	f7fd fe11 	bl	12f04 <__cyg_profile_func_enter>
                         DataSize size) override
  {
    uint32_t pssp = util::Value(pssp_);
   152e2:	9b01      	ldr	r3, [sp, #4]
   152e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   152e6:	4618      	mov	r0, r3
   152e8:	f7ff fda4 	bl	14e34 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   152ec:	4603      	mov	r3, r0
   152ee:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   152f0:	9b01      	ldr	r3, [sp, #4]
   152f2:	1d18      	adds	r0, r3, #4
   152f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   152f6:	009b      	lsls	r3, r3, #2
   152f8:	4a6f      	ldr	r2, [pc, #444]	; (154b8 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x200>)
   152fa:	4413      	add	r3, r2
   152fc:	4619      	mov	r1, r3
   152fe:	f7fb fd1d 	bl	10d3c <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    if (frame == kMicro)
   15302:	f89d 3002 	ldrb.w	r3, [sp, #2]
   15306:	2b02      	cmp	r3, #2
   15308:	d102      	bne.n	15310 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x58>
    {
      size = kEight;
   1530a:	2307      	movs	r3, #7
   1530c:	f88d 3001 	strb.w	r3, [sp, #1]
    }
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(size), kDataBit, 4);
   15310:	4a6a      	ldr	r2, [pc, #424]	; (154bc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   15312:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15318:	681e      	ldr	r6, [r3, #0]
   1531a:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1531e:	4618      	mov	r0, r3
   15320:	f7ff ff82 	bl	15228 <unsigned char util::Value<SspInterface::DataSize, unsigned char>(SspInterface::DataSize)>
   15324:	4603      	mov	r3, r0
   15326:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   15328:	4a64      	ldr	r2, [pc, #400]	; (154bc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1532a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1532c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   15330:	9608      	str	r6, [sp, #32]
   15332:	460b      	mov	r3, r1
   15334:	f88d 301f 	strb.w	r3, [sp, #31]
   15338:	2300      	movs	r3, #0
   1533a:	9306      	str	r3, [sp, #24]
   1533c:	2304      	movs	r3, #4
   1533e:	9305      	str	r3, [sp, #20]
   15340:	4623      	mov	r3, r4
   15342:	4619      	mov	r1, r3
   15344:	485e      	ldr	r0, [pc, #376]	; (154c0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15346:	f7fd fddd 	bl	12f04 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1534a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1534e:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15350:	2320      	movs	r3, #32
   15352:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15354:	9b05      	ldr	r3, [sp, #20]
   15356:	f1c3 0320 	rsb	r3, r3, #32
   1535a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1535e:	fa22 f303 	lsr.w	r3, r2, r3
   15362:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   15364:	9a02      	ldr	r2, [sp, #8]
   15366:	9b06      	ldr	r3, [sp, #24]
   15368:	fa02 f303 	lsl.w	r3, r2, r3
   1536c:	43db      	mvns	r3, r3
   1536e:	9a08      	ldr	r2, [sp, #32]
   15370:	4013      	ands	r3, r2
   15372:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   15374:	f89d 201f 	ldrb.w	r2, [sp, #31]
   15378:	9b02      	ldr	r3, [sp, #8]
   1537a:	401a      	ands	r2, r3
   1537c:	9b06      	ldr	r3, [sp, #24]
   1537e:	fa02 f303 	lsl.w	r3, r2, r3
   15382:	9a08      	ldr	r2, [sp, #32]
   15384:	4313      	orrs	r3, r2
   15386:	9308      	str	r3, [sp, #32]
  return target;
   15388:	9e08      	ldr	r6, [sp, #32]
   1538a:	4623      	mov	r3, r4
   1538c:	4619      	mov	r1, r3
   1538e:	484c      	ldr	r0, [pc, #304]	; (154c0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15390:	f7fd fdcc 	bl	12f2c <__cyg_profile_func_exit>
   15394:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, util::Value(frame), kFrameBit, 2);
   15396:	4a49      	ldr	r2, [pc, #292]	; (154bc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   15398:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1539a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1539e:	681e      	ldr	r6, [r3, #0]
   153a0:	f89d 3002 	ldrb.w	r3, [sp, #2]
   153a4:	4618      	mov	r0, r3
   153a6:	f7ff ff57 	bl	15258 <unsigned char util::Value<SspInterface::FrameMode, unsigned char>(SspInterface::FrameMode)>
   153aa:	4603      	mov	r3, r0
   153ac:	4619      	mov	r1, r3
    ssp_registers[pssp]->CR0 =
   153ae:	4a43      	ldr	r2, [pc, #268]	; (154bc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   153b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   153b2:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   153b6:	960f      	str	r6, [sp, #60]	; 0x3c
   153b8:	460b      	mov	r3, r1
   153ba:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   153be:	2304      	movs	r3, #4
   153c0:	930d      	str	r3, [sp, #52]	; 0x34
   153c2:	2302      	movs	r3, #2
   153c4:	930c      	str	r3, [sp, #48]	; 0x30
   153c6:	4623      	mov	r3, r4
   153c8:	4619      	mov	r1, r3
   153ca:	483d      	ldr	r0, [pc, #244]	; (154c0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   153cc:	f7fd fd9a 	bl	12f04 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   153d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   153d4:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   153d6:	2320      	movs	r3, #32
   153d8:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   153da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   153dc:	f1c3 0320 	rsb	r3, r3, #32
   153e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   153e4:	fa22 f303 	lsr.w	r3, r2, r3
   153e8:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   153ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
   153ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   153ee:	fa02 f303 	lsl.w	r3, r2, r3
   153f2:	43db      	mvns	r3, r3
   153f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   153f6:	4013      	ands	r3, r2
   153f8:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   153fa:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   153fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15400:	401a      	ands	r2, r3
   15402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15404:	fa02 f303 	lsl.w	r3, r2, r3
   15408:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1540a:	4313      	orrs	r3, r2
   1540c:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   1540e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   15410:	4623      	mov	r3, r4
   15412:	4619      	mov	r1, r3
   15414:	482a      	ldr	r0, [pc, #168]	; (154c0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15416:	f7fd fd89 	bl	12f2c <__cyg_profile_func_exit>
   1541a:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR1 = bit::Insert(
        ssp_registers[pssp]->CR1, util::Value(mode), kMasterModeBit, 1);
   1541c:	4a27      	ldr	r2, [pc, #156]	; (154bc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   1541e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15424:	685e      	ldr	r6, [r3, #4]
    ssp_registers[pssp]->CR1 = bit::Insert(
   15426:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1542a:	4618      	mov	r0, r3
   1542c:	f7ff ff2c 	bl	15288 <unsigned char util::Value<SspInterface::MasterSlaveMode, unsigned char>(SspInterface::MasterSlaveMode)>
   15430:	4603      	mov	r3, r0
   15432:	4619      	mov	r1, r3
   15434:	4a21      	ldr	r2, [pc, #132]	; (154bc <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x204>)
   15436:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15438:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1543c:	9616      	str	r6, [sp, #88]	; 0x58
   1543e:	460b      	mov	r3, r1
   15440:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   15444:	2302      	movs	r3, #2
   15446:	9314      	str	r3, [sp, #80]	; 0x50
   15448:	2301      	movs	r3, #1
   1544a:	9313      	str	r3, [sp, #76]	; 0x4c
   1544c:	4623      	mov	r3, r4
   1544e:	4619      	mov	r1, r3
   15450:	481b      	ldr	r0, [pc, #108]	; (154c0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   15452:	f7fd fd57 	bl	12f04 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1545a:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1545c:	2320      	movs	r3, #32
   1545e:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15460:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   15462:	f1c3 0320 	rsb	r3, r3, #32
   15466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1546a:	fa22 f303 	lsr.w	r3, r2, r3
   1546e:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   15470:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15472:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15474:	fa02 f303 	lsl.w	r3, r2, r3
   15478:	43db      	mvns	r3, r3
   1547a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1547c:	4013      	ands	r3, r2
   1547e:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   15480:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   15484:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15486:	401a      	ands	r2, r3
   15488:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1548a:	fa02 f303 	lsl.w	r3, r2, r3
   1548e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   15490:	4313      	orrs	r3, r2
   15492:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   15494:	9e16      	ldr	r6, [sp, #88]	; 0x58
   15496:	4623      	mov	r3, r4
   15498:	4619      	mov	r1, r3
   1549a:	4809      	ldr	r0, [pc, #36]	; (154c0 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x208>)
   1549c:	f7fd fd46 	bl	12f2c <__cyg_profile_func_exit>
   154a0:	606e      	str	r6, [r5, #4]
   154a2:	4623      	mov	r3, r4
   154a4:	4619      	mov	r1, r3
   154a6:	4803      	ldr	r0, [pc, #12]	; (154b4 <Ssp::SetPeripheralMode(SspInterface::MasterSlaveMode, SspInterface::FrameMode, SspInterface::DataSize)+0x1fc>)
   154a8:	f7fd fd40 	bl	12f2c <__cyg_profile_func_exit>
  }
   154ac:	bf00      	nop
   154ae:	b018      	add	sp, #96	; 0x60
   154b0:	bd70      	pop	{r4, r5, r6, pc}
   154b2:	bf00      	nop
   154b4:	000152b9 	.word	0x000152b9
   154b8:	00018d50 	.word	0x00018d50
   154bc:	100001c8 	.word	0x100001c8
   154c0:	00016ce5 	.word	0x00016ce5

000154c4 <Ssp::GetPeripheralMode()>:
  /// Gets the Peripheral modes from registers
  /// @return - returns a 16-bit value as follows: 0000_000x 0xx0_xxxx
  ///       MasterSlaveMode = 1-bit @ bit 8
  ///       FrameMode       = 2-bit @ bit 5
  ///       DataSize        = 4-bit @ bit 0
  uint16_t GetPeripheralMode() override
   154c4:	b570      	push	{r4, r5, r6, lr}
   154c6:	b096      	sub	sp, #88	; 0x58
   154c8:	4674      	mov	r4, lr
   154ca:	9001      	str	r0, [sp, #4]
   154cc:	4623      	mov	r3, r4
   154ce:	4619      	mov	r1, r3
   154d0:	4850      	ldr	r0, [pc, #320]	; (15614 <Ssp::GetPeripheralMode()+0x150>)
   154d2:	f7fd fd17 	bl	12f04 <__cyg_profile_func_enter>
  {
    uint16_t return_val = 0;
   154d6:	2300      	movs	r3, #0
   154d8:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    uint32_t pssp       = util::Value(pssp_);
   154dc:	9b01      	ldr	r3, [sp, #4]
   154de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   154e0:	4618      	mov	r0, r3
   154e2:	f7ff fca7 	bl	14e34 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   154e6:	4603      	mov	r3, r0
   154e8:	9314      	str	r3, [sp, #80]	; 0x50
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   154ea:	9b01      	ldr	r3, [sp, #4]
   154ec:	1d18      	adds	r0, r3, #4
   154ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
   154f0:	009b      	lsls	r3, r3, #2
   154f2:	4a49      	ldr	r2, [pc, #292]	; (15618 <Ssp::GetPeripheralMode()+0x154>)
   154f4:	4413      	add	r3, r2
   154f6:	4619      	mov	r1, r3
   154f8:	f7fb fc20 	bl	10d3c <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val = static_cast<uint16_t>(
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   154fc:	4a47      	ldr	r2, [pc, #284]	; (1561c <Ssp::GetPeripheralMode()+0x158>)
   154fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15504:	681b      	ldr	r3, [r3, #0]
   15506:	9307      	str	r3, [sp, #28]
   15508:	2300      	movs	r3, #0
   1550a:	9306      	str	r3, [sp, #24]
   1550c:	2304      	movs	r3, #4
   1550e:	9305      	str	r3, [sp, #20]
   15510:	4623      	mov	r3, r4
   15512:	4619      	mov	r1, r3
   15514:	4842      	ldr	r0, [pc, #264]	; (15620 <Ssp::GetPeripheralMode()+0x15c>)
   15516:	f7fd fcf5 	bl	12f04 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1551a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1551e:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15520:	2320      	movs	r3, #32
   15522:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15524:	9b05      	ldr	r3, [sp, #20]
   15526:	f1c3 0320 	rsb	r3, r3, #32
   1552a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1552e:	fa22 f303 	lsr.w	r3, r2, r3
   15532:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   15534:	9a07      	ldr	r2, [sp, #28]
   15536:	9b06      	ldr	r3, [sp, #24]
   15538:	40da      	lsrs	r2, r3
   1553a:	9b02      	ldr	r3, [sp, #8]
   1553c:	ea02 0503 	and.w	r5, r2, r3
   15540:	4623      	mov	r3, r4
   15542:	4619      	mov	r1, r3
   15544:	4836      	ldr	r0, [pc, #216]	; (15620 <Ssp::GetPeripheralMode()+0x15c>)
   15546:	f7fd fcf1 	bl	12f2c <__cyg_profile_func_exit>
   1554a:	b2ad      	uxth	r5, r5
        ((bit::Extract(ssp_registers[pssp]->CR0, kFrameBit, 2)) << 5) +
   1554c:	4a33      	ldr	r2, [pc, #204]	; (1561c <Ssp::GetPeripheralMode()+0x158>)
   1554e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15554:	681b      	ldr	r3, [r3, #0]
   15556:	930d      	str	r3, [sp, #52]	; 0x34
   15558:	2304      	movs	r3, #4
   1555a:	930c      	str	r3, [sp, #48]	; 0x30
   1555c:	2302      	movs	r3, #2
   1555e:	930b      	str	r3, [sp, #44]	; 0x2c
   15560:	4623      	mov	r3, r4
   15562:	4619      	mov	r1, r3
   15564:	482e      	ldr	r0, [pc, #184]	; (15620 <Ssp::GetPeripheralMode()+0x15c>)
   15566:	f7fd fccd 	bl	12f04 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1556a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1556e:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15570:	2320      	movs	r3, #32
   15572:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15576:	f1c3 0320 	rsb	r3, r3, #32
   1557a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1557e:	fa22 f303 	lsr.w	r3, r2, r3
   15582:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   15584:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15588:	40da      	lsrs	r2, r3
   1558a:	9b08      	ldr	r3, [sp, #32]
   1558c:	ea02 0603 	and.w	r6, r2, r3
   15590:	4623      	mov	r3, r4
   15592:	4619      	mov	r1, r3
   15594:	4822      	ldr	r0, [pc, #136]	; (15620 <Ssp::GetPeripheralMode()+0x15c>)
   15596:	f7fd fcc9 	bl	12f2c <__cyg_profile_func_exit>
   1559a:	b2b3      	uxth	r3, r6
   1559c:	015b      	lsls	r3, r3, #5
   1559e:	b29b      	uxth	r3, r3
        (bit::Extract(ssp_registers[pssp]->CR0, kDataBit, 4)) +
   155a0:	442b      	add	r3, r5
   155a2:	b29d      	uxth	r5, r3
        ((bit::Extract(ssp_registers[pssp]->CR1, kMasterModeBit)) << 8));
   155a4:	4a1d      	ldr	r2, [pc, #116]	; (1561c <Ssp::GetPeripheralMode()+0x158>)
   155a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   155a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155ac:	685b      	ldr	r3, [r3, #4]
   155ae:	9313      	str	r3, [sp, #76]	; 0x4c
   155b0:	2302      	movs	r3, #2
   155b2:	9312      	str	r3, [sp, #72]	; 0x48
   155b4:	2301      	movs	r3, #1
   155b6:	9311      	str	r3, [sp, #68]	; 0x44
   155b8:	4623      	mov	r3, r4
   155ba:	4619      	mov	r1, r3
   155bc:	4818      	ldr	r0, [pc, #96]	; (15620 <Ssp::GetPeripheralMode()+0x15c>)
   155be:	f7fd fca1 	bl	12f04 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   155c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   155c6:	9310      	str	r3, [sp, #64]	; 0x40
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   155c8:	2320      	movs	r3, #32
   155ca:	930f      	str	r3, [sp, #60]	; 0x3c
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   155cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   155ce:	f1c3 0320 	rsb	r3, r3, #32
   155d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   155d6:	fa22 f303 	lsr.w	r3, r2, r3
   155da:	930e      	str	r3, [sp, #56]	; 0x38
  return (target >> position) & mask;
   155dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   155de:	9b12      	ldr	r3, [sp, #72]	; 0x48
   155e0:	40da      	lsrs	r2, r3
   155e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   155e4:	ea02 0603 	and.w	r6, r2, r3
   155e8:	4623      	mov	r3, r4
   155ea:	4619      	mov	r1, r3
   155ec:	480c      	ldr	r0, [pc, #48]	; (15620 <Ssp::GetPeripheralMode()+0x15c>)
   155ee:	f7fd fc9d 	bl	12f2c <__cyg_profile_func_exit>
   155f2:	b2b3      	uxth	r3, r6
   155f4:	021b      	lsls	r3, r3, #8
   155f6:	b29b      	uxth	r3, r3
    return_val = static_cast<uint16_t>(
   155f8:	442b      	add	r3, r5
   155fa:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    return return_val;
   155fe:	f8bd 5056 	ldrh.w	r5, [sp, #86]	; 0x56
   15602:	4623      	mov	r3, r4
   15604:	4619      	mov	r1, r3
   15606:	4803      	ldr	r0, [pc, #12]	; (15614 <Ssp::GetPeripheralMode()+0x150>)
   15608:	f7fd fc90 	bl	12f2c <__cyg_profile_func_exit>
   1560c:	462b      	mov	r3, r5
  }
   1560e:	4618      	mov	r0, r3
   15610:	b016      	add	sp, #88	; 0x58
   15612:	bd70      	pop	{r4, r5, r6, pc}
   15614:	000154c5 	.word	0x000154c5
   15618:	00018d50 	.word	0x00018d50
   1561c:	100001c8 	.word	0x100001c8
   15620:	00016d59 	.word	0x00016d59

00015624 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)>:
  /// Sets the clock rate for the Peripheral
  /// @param polarity - maintain bus on clock 0=low or 1=high between frames
  /// @param phase - capture serial data on 0=first or 1=second clock cycle
  /// @param divider - see notes in SSP_Interface above
  /// @param prescaler - divides the PCLK, must be even value between 2-254
  void SetClock(bool polarity, bool phase, uint8_t divider,
   15624:	b570      	push	{r4, r5, r6, lr}
   15626:	b098      	sub	sp, #96	; 0x60
   15628:	4674      	mov	r4, lr
   1562a:	9001      	str	r0, [sp, #4]
   1562c:	4608      	mov	r0, r1
   1562e:	4611      	mov	r1, r2
   15630:	461a      	mov	r2, r3
   15632:	4603      	mov	r3, r0
   15634:	f88d 3003 	strb.w	r3, [sp, #3]
   15638:	460b      	mov	r3, r1
   1563a:	f88d 3002 	strb.w	r3, [sp, #2]
   1563e:	4613      	mov	r3, r2
   15640:	f88d 3001 	strb.w	r3, [sp, #1]
   15644:	4623      	mov	r3, r4
   15646:	4619      	mov	r1, r3
   15648:	486c      	ldr	r0, [pc, #432]	; (157fc <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   1564a:	f7fd fc5b 	bl	12f04 <__cyg_profile_func_enter>
                uint8_t prescaler) override
  {
    uint32_t pssp = util::Value(pssp_);
   1564e:	9b01      	ldr	r3, [sp, #4]
   15650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15652:	4618      	mov	r0, r3
   15654:	f7ff fbee 	bl	14e34 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15658:	4603      	mov	r3, r0
   1565a:	9317      	str	r3, [sp, #92]	; 0x5c
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   1565c:	9b01      	ldr	r3, [sp, #4]
   1565e:	1d18      	adds	r0, r3, #4
   15660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15662:	009b      	lsls	r3, r3, #2
   15664:	4a66      	ldr	r2, [pc, #408]	; (15800 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1dc>)
   15666:	4413      	add	r3, r2
   15668:	4619      	mov	r1, r3
   1566a:	f7fb fb67 	bl	10d3c <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>
    // first clear the appropriate registers
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, polarity, kPolarityBit, 1);
   1566e:	4a65      	ldr	r2, [pc, #404]	; (15804 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15670:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15676:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   15678:	4962      	ldr	r1, [pc, #392]	; (15804 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   1567a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1567c:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   15680:	9308      	str	r3, [sp, #32]
   15682:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15686:	f88d 301f 	strb.w	r3, [sp, #31]
   1568a:	2306      	movs	r3, #6
   1568c:	9306      	str	r3, [sp, #24]
   1568e:	2301      	movs	r3, #1
   15690:	9305      	str	r3, [sp, #20]
   15692:	4623      	mov	r3, r4
   15694:	4619      	mov	r1, r3
   15696:	485c      	ldr	r0, [pc, #368]	; (15808 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   15698:	f7fd fc34 	bl	12f04 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   1569c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   156a0:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   156a2:	2320      	movs	r3, #32
   156a4:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   156a6:	9b05      	ldr	r3, [sp, #20]
   156a8:	f1c3 0320 	rsb	r3, r3, #32
   156ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   156b0:	fa22 f303 	lsr.w	r3, r2, r3
   156b4:	9302      	str	r3, [sp, #8]
  target &= ~(mask << position);
   156b6:	9a02      	ldr	r2, [sp, #8]
   156b8:	9b06      	ldr	r3, [sp, #24]
   156ba:	fa02 f303 	lsl.w	r3, r2, r3
   156be:	43db      	mvns	r3, r3
   156c0:	9a08      	ldr	r2, [sp, #32]
   156c2:	4013      	ands	r3, r2
   156c4:	9308      	str	r3, [sp, #32]
  target |= (value & mask) << position;
   156c6:	f89d 201f 	ldrb.w	r2, [sp, #31]
   156ca:	9b02      	ldr	r3, [sp, #8]
   156cc:	401a      	ands	r2, r3
   156ce:	9b06      	ldr	r3, [sp, #24]
   156d0:	fa02 f303 	lsl.w	r3, r2, r3
   156d4:	9a08      	ldr	r2, [sp, #32]
   156d6:	4313      	orrs	r3, r2
   156d8:	9308      	str	r3, [sp, #32]
  return target;
   156da:	9e08      	ldr	r6, [sp, #32]
   156dc:	4623      	mov	r3, r4
   156de:	4619      	mov	r1, r3
   156e0:	4849      	ldr	r0, [pc, #292]	; (15808 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   156e2:	f7fd fc23 	bl	12f2c <__cyg_profile_func_exit>
   156e6:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, phase, kPhaseBit, 1);
   156e8:	4a46      	ldr	r2, [pc, #280]	; (15804 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   156ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   156ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156f0:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   156f2:	4944      	ldr	r1, [pc, #272]	; (15804 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   156f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   156f6:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   156fa:	930f      	str	r3, [sp, #60]	; 0x3c
   156fc:	f89d 3002 	ldrb.w	r3, [sp, #2]
   15700:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   15704:	2307      	movs	r3, #7
   15706:	930d      	str	r3, [sp, #52]	; 0x34
   15708:	2301      	movs	r3, #1
   1570a:	930c      	str	r3, [sp, #48]	; 0x30
   1570c:	4623      	mov	r3, r4
   1570e:	4619      	mov	r1, r3
   15710:	483d      	ldr	r0, [pc, #244]	; (15808 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   15712:	f7fd fbf7 	bl	12f04 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1571a:	930b      	str	r3, [sp, #44]	; 0x2c
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1571c:	2320      	movs	r3, #32
   1571e:	930a      	str	r3, [sp, #40]	; 0x28
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   15720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15722:	f1c3 0320 	rsb	r3, r3, #32
   15726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1572a:	fa22 f303 	lsr.w	r3, r2, r3
   1572e:	9309      	str	r3, [sp, #36]	; 0x24
  target &= ~(mask << position);
   15730:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15734:	fa02 f303 	lsl.w	r3, r2, r3
   15738:	43db      	mvns	r3, r3
   1573a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1573c:	4013      	ands	r3, r2
   1573e:	930f      	str	r3, [sp, #60]	; 0x3c
  target |= (value & mask) << position;
   15740:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   15744:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15746:	401a      	ands	r2, r3
   15748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1574a:	fa02 f303 	lsl.w	r3, r2, r3
   1574e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15750:	4313      	orrs	r3, r2
   15752:	930f      	str	r3, [sp, #60]	; 0x3c
  return target;
   15754:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   15756:	4623      	mov	r3, r4
   15758:	4619      	mov	r1, r3
   1575a:	482b      	ldr	r0, [pc, #172]	; (15808 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e4>)
   1575c:	f7fd fbe6 	bl	12f2c <__cyg_profile_func_exit>
   15760:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CR0 =
        bit::Insert(ssp_registers[pssp]->CR0, divider, kDividerBit, 8);
   15762:	4a28      	ldr	r2, [pc, #160]	; (15804 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   15764:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1576a:	681b      	ldr	r3, [r3, #0]
    ssp_registers[pssp]->CR0 =
   1576c:	4925      	ldr	r1, [pc, #148]	; (15804 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   1576e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   15770:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   15774:	9316      	str	r3, [sp, #88]	; 0x58
   15776:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1577a:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   1577e:	2308      	movs	r3, #8
   15780:	9314      	str	r3, [sp, #80]	; 0x50
   15782:	2308      	movs	r3, #8
   15784:	9313      	str	r3, [sp, #76]	; 0x4c
   15786:	4623      	mov	r3, r4
   15788:	4619      	mov	r1, r3
   1578a:	4820      	ldr	r0, [pc, #128]	; (1580c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   1578c:	f7fd fbba 	bl	12f04 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15794:	9312      	str	r3, [sp, #72]	; 0x48
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   15796:	2320      	movs	r3, #32
   15798:	9311      	str	r3, [sp, #68]	; 0x44
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1579a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1579c:	f1c3 0320 	rsb	r3, r3, #32
   157a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   157a4:	fa22 f303 	lsr.w	r3, r2, r3
   157a8:	9310      	str	r3, [sp, #64]	; 0x40
  target &= ~(mask << position);
   157aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
   157ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
   157ae:	fa02 f303 	lsl.w	r3, r2, r3
   157b2:	43db      	mvns	r3, r3
   157b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   157b6:	4013      	ands	r3, r2
   157b8:	9316      	str	r3, [sp, #88]	; 0x58
  target |= (value & mask) << position;
   157ba:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   157be:	9b10      	ldr	r3, [sp, #64]	; 0x40
   157c0:	401a      	ands	r2, r3
   157c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   157c4:	fa02 f303 	lsl.w	r3, r2, r3
   157c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   157ca:	4313      	orrs	r3, r2
   157cc:	9316      	str	r3, [sp, #88]	; 0x58
  return target;
   157ce:	9e16      	ldr	r6, [sp, #88]	; 0x58
   157d0:	4623      	mov	r3, r4
   157d2:	4619      	mov	r1, r3
   157d4:	480d      	ldr	r0, [pc, #52]	; (1580c <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e8>)
   157d6:	f7fd fba9 	bl	12f2c <__cyg_profile_func_exit>
   157da:	602e      	str	r6, [r5, #0]
    ssp_registers[pssp]->CPSR = prescaler;
   157dc:	4a09      	ldr	r2, [pc, #36]	; (15804 <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1e0>)
   157de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   157e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157e4:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
   157e8:	611a      	str	r2, [r3, #16]
   157ea:	4623      	mov	r3, r4
   157ec:	4619      	mov	r1, r3
   157ee:	4803      	ldr	r0, [pc, #12]	; (157fc <Ssp::SetClock(bool, bool, unsigned char, unsigned char)+0x1d8>)
   157f0:	f7fd fb9c 	bl	12f2c <__cyg_profile_func_exit>
  }
   157f4:	bf00      	nop
   157f6:	b018      	add	sp, #96	; 0x60
   157f8:	bd70      	pop	{r4, r5, r6, pc}
   157fa:	bf00      	nop
   157fc:	00015625 	.word	0x00015625
   15800:	00018d50 	.word	0x00018d50
   15804:	100001c8 	.word	0x100001c8
   15808:	00016dad 	.word	0x00016dad
   1580c:	00016ce5 	.word	0x00016ce5

00015810 <Ssp::GetClock()>:
  ///   0000_0000 0000_0x0x xxxx_xxxx xxxx_xxxx
  ///       polarity    = 1-bit @ bit 18
  ///       phase       = 1-bit @ bit 16
  ///       divider     = 8-bits @ bit 8
  ///       prescaler   = 8-bits @ bit 0
  uint32_t GetClock() override
   15810:	b570      	push	{r4, r5, r6, lr}
   15812:	b094      	sub	sp, #80	; 0x50
   15814:	4674      	mov	r4, lr
   15816:	9001      	str	r0, [sp, #4]
   15818:	4623      	mov	r3, r4
   1581a:	4619      	mov	r1, r3
   1581c:	4858      	ldr	r0, [pc, #352]	; (15980 <Ssp::GetClock()+0x170>)
   1581e:	f7fd fb71 	bl	12f04 <__cyg_profile_func_enter>
  {
    uint32_t return_val = 0;
   15822:	2300      	movs	r3, #0
   15824:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t pssp       = util::Value(pssp_);
   15826:	9b01      	ldr	r3, [sp, #4]
   15828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1582a:	4618      	mov	r0, r3
   1582c:	f7ff fb02 	bl	14e34 <int util::Value<Ssp::Peripheral, int>(Ssp::Peripheral)>
   15830:	4603      	mov	r3, r0
   15832:	9312      	str	r3, [sp, #72]	; 0x48
    // TODO(#371): Find a better alternative to powering up the peripheral for
    // every method.
    Ssp::PowerUpPeripheral(Ssp::kPowerBit[pssp]);
   15834:	9b01      	ldr	r3, [sp, #4]
   15836:	1d18      	adds	r0, r3, #4
   15838:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1583a:	009b      	lsls	r3, r3, #2
   1583c:	4a51      	ldr	r2, [pc, #324]	; (15984 <Ssp::GetClock()+0x174>)
   1583e:	4413      	add	r3, r2
   15840:	4619      	mov	r1, r3
   15842:	f7fb fa7b 	bl	10d3c <Lpc40xxSystemController::PowerUpPeripheral(SystemControllerInterface::PeripheralID const&)>

    return_val =
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   15846:	4a50      	ldr	r2, [pc, #320]	; (15988 <Ssp::GetClock()+0x178>)
   15848:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1584a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1584e:	691b      	ldr	r3, [r3, #16]
   15850:	9307      	str	r3, [sp, #28]
   15852:	2300      	movs	r3, #0
   15854:	9306      	str	r3, [sp, #24]
   15856:	2308      	movs	r3, #8
   15858:	9305      	str	r3, [sp, #20]
   1585a:	4623      	mov	r3, r4
   1585c:	4619      	mov	r1, r3
   1585e:	484b      	ldr	r0, [pc, #300]	; (1598c <Ssp::GetClock()+0x17c>)
   15860:	f7fd fb50 	bl	12f04 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   15864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15868:	9304      	str	r3, [sp, #16]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   1586a:	2320      	movs	r3, #32
   1586c:	9303      	str	r3, [sp, #12]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   1586e:	9b05      	ldr	r3, [sp, #20]
   15870:	f1c3 0320 	rsb	r3, r3, #32
   15874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15878:	fa22 f303 	lsr.w	r3, r2, r3
   1587c:	9302      	str	r3, [sp, #8]
  return (target >> position) & mask;
   1587e:	9a07      	ldr	r2, [sp, #28]
   15880:	9b06      	ldr	r3, [sp, #24]
   15882:	40da      	lsrs	r2, r3
   15884:	9b02      	ldr	r3, [sp, #8]
   15886:	ea02 0503 	and.w	r5, r2, r3
   1588a:	4623      	mov	r3, r4
   1588c:	4619      	mov	r1, r3
   1588e:	483f      	ldr	r0, [pc, #252]	; (1598c <Ssp::GetClock()+0x17c>)
   15890:	f7fd fb4c 	bl	12f2c <__cyg_profile_func_exit>
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   15894:	4a3c      	ldr	r2, [pc, #240]	; (15988 <Ssp::GetClock()+0x178>)
   15896:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1589c:	681b      	ldr	r3, [r3, #0]
   1589e:	930d      	str	r3, [sp, #52]	; 0x34
   158a0:	2308      	movs	r3, #8
   158a2:	930c      	str	r3, [sp, #48]	; 0x30
   158a4:	2308      	movs	r3, #8
   158a6:	930b      	str	r3, [sp, #44]	; 0x2c
   158a8:	4623      	mov	r3, r4
   158aa:	4619      	mov	r1, r3
   158ac:	4837      	ldr	r0, [pc, #220]	; (1598c <Ssp::GetClock()+0x17c>)
   158ae:	f7fd fb29 	bl	12f04 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   158b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   158b6:	930a      	str	r3, [sp, #40]	; 0x28
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   158b8:	2320      	movs	r3, #32
   158ba:	9309      	str	r3, [sp, #36]	; 0x24
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   158bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   158be:	f1c3 0320 	rsb	r3, r3, #32
   158c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   158c6:	fa22 f303 	lsr.w	r3, r2, r3
   158ca:	9308      	str	r3, [sp, #32]
  return (target >> position) & mask;
   158cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   158ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   158d0:	40da      	lsrs	r2, r3
   158d2:	9b08      	ldr	r3, [sp, #32]
   158d4:	ea02 0603 	and.w	r6, r2, r3
   158d8:	4623      	mov	r3, r4
   158da:	4619      	mov	r1, r3
   158dc:	482b      	ldr	r0, [pc, #172]	; (1598c <Ssp::GetClock()+0x17c>)
   158de:	f7fd fb25 	bl	12f2c <__cyg_profile_func_exit>
   158e2:	0233      	lsls	r3, r6, #8
        (bit::Extract(ssp_registers[pssp]->CPSR, kPrescalerBit, 8)) +
   158e4:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPhaseBit)) << 16) +
   158e6:	4a28      	ldr	r2, [pc, #160]	; (15988 <Ssp::GetClock()+0x178>)
   158e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   158ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158ee:	681b      	ldr	r3, [r3, #0]
   158f0:	930f      	str	r3, [sp, #60]	; 0x3c
   158f2:	2307      	movs	r3, #7
   158f4:	930e      	str	r3, [sp, #56]	; 0x38
   158f6:	4623      	mov	r3, r4
   158f8:	4619      	mov	r1, r3
   158fa:	4825      	ldr	r0, [pc, #148]	; (15990 <Ssp::GetClock()+0x180>)
   158fc:	f7fd fb02 	bl	12f04 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   15900:	2201      	movs	r2, #1
   15902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15904:	fa02 f303 	lsl.w	r3, r2, r3
   15908:	461a      	mov	r2, r3
   1590a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1590c:	4013      	ands	r3, r2
   1590e:	2b00      	cmp	r3, #0
   15910:	bf14      	ite	ne
   15912:	2301      	movne	r3, #1
   15914:	2300      	moveq	r3, #0
   15916:	b2de      	uxtb	r6, r3
   15918:	4623      	mov	r3, r4
   1591a:	4619      	mov	r1, r3
   1591c:	481c      	ldr	r0, [pc, #112]	; (15990 <Ssp::GetClock()+0x180>)
   1591e:	f7fd fb05 	bl	12f2c <__cyg_profile_func_exit>
   15922:	4633      	mov	r3, r6
   15924:	041b      	lsls	r3, r3, #16
        ((bit::Extract(ssp_registers[pssp]->CR0, kDividerBit, 8)) << 8) +
   15926:	441d      	add	r5, r3
        ((bit::Read(ssp_registers[pssp]->CR0, kPolarityBit)) << 18);
   15928:	4a17      	ldr	r2, [pc, #92]	; (15988 <Ssp::GetClock()+0x178>)
   1592a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1592c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15930:	681b      	ldr	r3, [r3, #0]
   15932:	9311      	str	r3, [sp, #68]	; 0x44
   15934:	2306      	movs	r3, #6
   15936:	9310      	str	r3, [sp, #64]	; 0x40
   15938:	4623      	mov	r3, r4
   1593a:	4619      	mov	r1, r3
   1593c:	4814      	ldr	r0, [pc, #80]	; (15990 <Ssp::GetClock()+0x180>)
   1593e:	f7fd fae1 	bl	12f04 <__cyg_profile_func_enter>
   15942:	2201      	movs	r2, #1
   15944:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15946:	fa02 f303 	lsl.w	r3, r2, r3
   1594a:	461a      	mov	r2, r3
   1594c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1594e:	4013      	ands	r3, r2
   15950:	2b00      	cmp	r3, #0
   15952:	bf14      	ite	ne
   15954:	2301      	movne	r3, #1
   15956:	2300      	moveq	r3, #0
   15958:	b2de      	uxtb	r6, r3
   1595a:	4623      	mov	r3, r4
   1595c:	4619      	mov	r1, r3
   1595e:	480c      	ldr	r0, [pc, #48]	; (15990 <Ssp::GetClock()+0x180>)
   15960:	f7fd fae4 	bl	12f2c <__cyg_profile_func_exit>
   15964:	4633      	mov	r3, r6
   15966:	049b      	lsls	r3, r3, #18
    return_val =
   15968:	442b      	add	r3, r5
   1596a:	9313      	str	r3, [sp, #76]	; 0x4c

    return return_val;
   1596c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   1596e:	4623      	mov	r3, r4
   15970:	4619      	mov	r1, r3
   15972:	4803      	ldr	r0, [pc, #12]	; (15980 <Ssp::GetClock()+0x170>)
   15974:	f7fd fada 	bl	12f2c <__cyg_profile_func_exit>
   15978:	462b      	mov	r3, r5
  }
   1597a:	4618      	mov	r0, r3
   1597c:	b014      	add	sp, #80	; 0x50
   1597e:	bd70      	pop	{r4, r5, r6, pc}
   15980:	00015811 	.word	0x00015811
   15984:	00018d50 	.word	0x00018d50
   15988:	100001c8 	.word	0x100001c8
   1598c:	00016d59 	.word	0x00016d59
   15990:	00016ca1 	.word	0x00016ca1

00015994 <SdInterface::SdInterface()>:
// NOLINTNEXTLINE(readability-identifier-naming)
// Relevant Datasheet:
// https://www.sdcard.org/downloads/pls/pdf/index.php?p=Part1_Physical_Layer_Simplified_Specification_Ver6.00.jpg&f=Part1_Physical_Layer_Simplified_Specification_Ver6.00.pdf&e=EN_SS1
// TODO(#348):  Write a class to represent a single Sd Card Block to make use
//              of block-related functions easier.
class SdInterface
   15994:	b530      	push	{r4, r5, lr}
   15996:	b083      	sub	sp, #12
   15998:	4675      	mov	r5, lr
   1599a:	9001      	str	r0, [sp, #4]
   1599c:	462b      	mov	r3, r5
   1599e:	4619      	mov	r1, r3
   159a0:	4807      	ldr	r0, [pc, #28]	; (159c0 <SdInterface::SdInterface()+0x2c>)
   159a2:	f7fd faaf 	bl	12f04 <__cyg_profile_func_enter>
   159a6:	4a07      	ldr	r2, [pc, #28]	; (159c4 <SdInterface::SdInterface()+0x30>)
   159a8:	9b01      	ldr	r3, [sp, #4]
   159aa:	601a      	str	r2, [r3, #0]
   159ac:	9c01      	ldr	r4, [sp, #4]
   159ae:	462b      	mov	r3, r5
   159b0:	4619      	mov	r1, r3
   159b2:	4803      	ldr	r0, [pc, #12]	; (159c0 <SdInterface::SdInterface()+0x2c>)
   159b4:	f7fd faba 	bl	12f2c <__cyg_profile_func_exit>
   159b8:	4623      	mov	r3, r4
   159ba:	4618      	mov	r0, r3
   159bc:	b003      	add	sp, #12
   159be:	bd30      	pop	{r4, r5, pc}
   159c0:	00015995 	.word	0x00015995
   159c4:	00019128 	.word	0x00019128

000159c8 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>:
  /// port that is broken out through the board's GPIO, allowing you to probe
  /// the chip select manually. To use this version instead of the main version,
  /// instantiate an Sd card instance like so:
  ///
  ///   Sd sdcard(Sd::DebugSdCard_t{});
  constexpr Sd(DebugSdCard_t, uint8_t port = 1, uint8_t pin = 8,
   159c8:	b530      	push	{r4, r5, lr}
   159ca:	b083      	sub	sp, #12
   159cc:	4675      	mov	r5, lr
   159ce:	9001      	str	r0, [sp, #4]
   159d0:	f88d 1000 	strb.w	r1, [sp]
   159d4:	4611      	mov	r1, r2
   159d6:	461a      	mov	r2, r3
   159d8:	460b      	mov	r3, r1
   159da:	f88d 3003 	strb.w	r3, [sp, #3]
   159de:	4613      	mov	r3, r2
   159e0:	f88d 3002 	strb.w	r3, [sp, #2]
   159e4:	462b      	mov	r3, r5
   159e6:	4619      	mov	r1, r3
   159e8:	481d      	ldr	r0, [pc, #116]	; (15a60 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   159ea:	f7fd fa8b 	bl	12f04 <__cyg_profile_func_enter>
      : ssp_interface_(&ssp_),
        ssp_(Ssp::Peripheral::kSsp2),
        chip_select_(&chip_select_pin_),
        chip_select_external_(&chip_select_external_pin_),
        chip_select_pin_(port, pin),
        chip_select_external_pin_(extport, extpin)
   159ee:	9b01      	ldr	r3, [sp, #4]
   159f0:	4618      	mov	r0, r3
   159f2:	f7ff ffcf 	bl	15994 <SdInterface::SdInterface()>
   159f6:	4a1b      	ldr	r2, [pc, #108]	; (15a64 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x9c>)
   159f8:	9b01      	ldr	r3, [sp, #4]
   159fa:	601a      	str	r2, [r3, #0]
   159fc:	9b01      	ldr	r3, [sp, #4]
   159fe:	f103 0208 	add.w	r2, r3, #8
   15a02:	9b01      	ldr	r3, [sp, #4]
   15a04:	605a      	str	r2, [r3, #4]
   15a06:	9b01      	ldr	r3, [sp, #4]
   15a08:	3308      	adds	r3, #8
   15a0a:	2102      	movs	r1, #2
   15a0c:	4618      	mov	r0, r3
   15a0e:	f7ff fa87 	bl	14f20 <Ssp::Ssp(Ssp::Peripheral)>
   15a12:	9b01      	ldr	r3, [sp, #4]
   15a14:	f103 0240 	add.w	r2, r3, #64	; 0x40
   15a18:	9b01      	ldr	r3, [sp, #4]
   15a1a:	639a      	str	r2, [r3, #56]	; 0x38
   15a1c:	9b01      	ldr	r3, [sp, #4]
   15a1e:	f103 0254 	add.w	r2, r3, #84	; 0x54
   15a22:	9b01      	ldr	r3, [sp, #4]
   15a24:	63da      	str	r2, [r3, #60]	; 0x3c
   15a26:	9b01      	ldr	r3, [sp, #4]
   15a28:	3340      	adds	r3, #64	; 0x40
   15a2a:	f89d 2002 	ldrb.w	r2, [sp, #2]
   15a2e:	f89d 1003 	ldrb.w	r1, [sp, #3]
   15a32:	4618      	mov	r0, r3
   15a34:	f7fe fd4c 	bl	144d0 <Gpio::Gpio(unsigned char, unsigned char)>
   15a38:	9b01      	ldr	r3, [sp, #4]
   15a3a:	3354      	adds	r3, #84	; 0x54
   15a3c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   15a40:	f89d 1018 	ldrb.w	r1, [sp, #24]
   15a44:	4618      	mov	r0, r3
   15a46:	f7fe fd43 	bl	144d0 <Gpio::Gpio(unsigned char, unsigned char)>
  {
  }
   15a4a:	9c01      	ldr	r4, [sp, #4]
   15a4c:	462b      	mov	r3, r5
   15a4e:	4619      	mov	r1, r3
   15a50:	4803      	ldr	r0, [pc, #12]	; (15a60 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)+0x98>)
   15a52:	f7fd fa6b 	bl	12f2c <__cyg_profile_func_exit>
   15a56:	4623      	mov	r3, r4
   15a58:	4618      	mov	r0, r3
   15a5a:	b003      	add	sp, #12
   15a5c:	bd30      	pop	{r4, r5, pc}
   15a5e:	bf00      	nop
   15a60:	000159c9 	.word	0x000159c9
   15a64:	000190fc 	.word	0x000190fc

00015a68 <Sd::Initialize()>:

  void Initialize() override
   15a68:	b530      	push	{r4, r5, lr}
   15a6a:	b085      	sub	sp, #20
   15a6c:	4675      	mov	r5, lr
   15a6e:	9003      	str	r0, [sp, #12]
   15a70:	462b      	mov	r3, r5
   15a72:	4619      	mov	r1, r3
   15a74:	4827      	ldr	r0, [pc, #156]	; (15b14 <Sd::Initialize()+0xac>)
   15a76:	f7fd fa45 	bl	12f04 <__cyg_profile_func_enter>
  {
    LOG_DEBUG("Begin initialization:");
    LOG_DEBUG("Setting CS as output...");
    chip_select_->SetAsOutput();
   15a7a:	9b03      	ldr	r3, [sp, #12]
   15a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   15a7e:	9b03      	ldr	r3, [sp, #12]
   15a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15a82:	681b      	ldr	r3, [r3, #0]
   15a84:	3304      	adds	r3, #4
   15a86:	681b      	ldr	r3, [r3, #0]
   15a88:	4610      	mov	r0, r2
   15a8a:	4798      	blx	r3
    chip_select_->SetHigh();
   15a8c:	9b03      	ldr	r3, [sp, #12]
   15a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   15a90:	9b03      	ldr	r3, [sp, #12]
   15a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15a94:	681b      	ldr	r3, [r3, #0]
   15a96:	330c      	adds	r3, #12
   15a98:	681b      	ldr	r3, [r3, #0]
   15a9a:	4610      	mov	r0, r2
   15a9c:	4798      	blx	r3
    chip_select_external_->SetAsOutput();
   15a9e:	9b03      	ldr	r3, [sp, #12]
   15aa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   15aa2:	9b03      	ldr	r3, [sp, #12]
   15aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   15aa6:	681b      	ldr	r3, [r3, #0]
   15aa8:	3304      	adds	r3, #4
   15aaa:	681b      	ldr	r3, [r3, #0]
   15aac:	4610      	mov	r0, r2
   15aae:	4798      	blx	r3
    chip_select_external_->SetHigh();
   15ab0:	9b03      	ldr	r3, [sp, #12]
   15ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   15ab4:	9b03      	ldr	r3, [sp, #12]
   15ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   15ab8:	681b      	ldr	r3, [r3, #0]
   15aba:	330c      	adds	r3, #12
   15abc:	681b      	ldr	r3, [r3, #0]
   15abe:	4610      	mov	r0, r2
   15ac0:	4798      	blx	r3

    LOG_DEBUG("Setting SSP Clock Speed...");
    ssp_interface_->SetClock(false, false, 14, 2);  // 400kHz
   15ac2:	9b03      	ldr	r3, [sp, #12]
   15ac4:	6858      	ldr	r0, [r3, #4]
   15ac6:	9b03      	ldr	r3, [sp, #12]
   15ac8:	685b      	ldr	r3, [r3, #4]
   15aca:	681b      	ldr	r3, [r3, #0]
   15acc:	3318      	adds	r3, #24
   15ace:	681c      	ldr	r4, [r3, #0]
   15ad0:	2302      	movs	r3, #2
   15ad2:	9300      	str	r3, [sp, #0]
   15ad4:	230e      	movs	r3, #14
   15ad6:	2200      	movs	r2, #0
   15ad8:	2100      	movs	r1, #0
   15ada:	47a0      	blx	r4

    LOG_DEBUG("Setting Peripheral Mode...");
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   15adc:	9b03      	ldr	r3, [sp, #12]
   15ade:	6858      	ldr	r0, [r3, #4]
   15ae0:	9b03      	ldr	r3, [sp, #12]
   15ae2:	685b      	ldr	r3, [r3, #4]
                                      Ssp::FrameMode::kSpi,
                                      Ssp::DataSize::kEight);
   15ae4:	681b      	ldr	r3, [r3, #0]
   15ae6:	3310      	adds	r3, #16
   15ae8:	681c      	ldr	r4, [r3, #0]
    ssp_interface_->SetPeripheralMode(Ssp::MasterSlaveMode::kMaster,
   15aea:	2307      	movs	r3, #7
   15aec:	2200      	movs	r2, #0
   15aee:	2100      	movs	r1, #0
   15af0:	47a0      	blx	r4

    LOG_DEBUG("Starting SSP Peripheral...");
    ssp_interface_->Initialize();
   15af2:	9b03      	ldr	r3, [sp, #12]
   15af4:	685a      	ldr	r2, [r3, #4]
   15af6:	9b03      	ldr	r3, [sp, #12]
   15af8:	685b      	ldr	r3, [r3, #4]
   15afa:	681b      	ldr	r3, [r3, #0]
   15afc:	681b      	ldr	r3, [r3, #0]
   15afe:	4610      	mov	r0, r2
   15b00:	4798      	blx	r3
   15b02:	462b      	mov	r3, r5
   15b04:	4619      	mov	r1, r3
   15b06:	4803      	ldr	r0, [pc, #12]	; (15b14 <Sd::Initialize()+0xac>)
   15b08:	f7fd fa10 	bl	12f2c <__cyg_profile_func_exit>
  }
   15b0c:	bf00      	nop
   15b0e:	b005      	add	sp, #20
   15b10:	bd30      	pop	{r4, r5, pc}
   15b12:	bf00      	nop
   15b14:	00015a69 	.word	0x00015a69

00015b18 <Sd::Mount(SdInterface::CardInfo_t*)>:

  // Initialize SD Card
  // TODO(#349): Split method into smaller piece with single jobs
  bool Mount(CardInfo_t * sd) override
   15b18:	b530      	push	{r4, r5, lr}
   15b1a:	b08b      	sub	sp, #44	; 0x2c
   15b1c:	4675      	mov	r5, lr
   15b1e:	9003      	str	r0, [sp, #12]
   15b20:	9102      	str	r1, [sp, #8]
   15b22:	462b      	mov	r3, r5
   15b24:	4619      	mov	r1, r3
   15b26:	48a7      	ldr	r0, [pc, #668]	; (15dc4 <Sd::Mount(SdInterface::CardInfo_t*)+0x2ac>)
   15b28:	f7fd f9ec 	bl	12f04 <__cyg_profile_func_enter>
  {
    uint8_t tries     = 0;
   15b2c:	2300      	movs	r3, #0
   15b2e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    bool card_is_idle = false;
   15b32:	2300      	movs	r3, #0
   15b34:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

    // Reset the card and force it to go to idle state at <400kHz with a
    // CMD0 + (active-low) CS
    LOG_DEBUG("Sending SD Card to Idle State...");
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   15b38:	9b03      	ldr	r3, [sp, #12]
   15b3a:	681b      	ldr	r3, [r3, #0]
   15b3c:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kReset, 0x00000000,
   15b3e:	9b02      	ldr	r3, [sp, #8]
   15b40:	f103 0208 	add.w	r2, r3, #8
   15b44:	2301      	movs	r3, #1
   15b46:	9301      	str	r3, [sp, #4]
   15b48:	2364      	movs	r3, #100	; 0x64
   15b4a:	9300      	str	r3, [sp, #0]
   15b4c:	4613      	mov	r3, r2
   15b4e:	2200      	movs	r2, #0
   15b50:	2140      	movs	r1, #64	; 0x40
   15b52:	9803      	ldr	r0, [sp, #12]
   15b54:	47a0      	blx	r4
   15b56:	4602      	mov	r2, r0
   15b58:	9b02      	ldr	r3, [sp, #8]
   15b5a:	611a      	str	r2, [r3, #16]

    // Reset the card again to trigger SPI mode
    LOG_DEBUG("Initializing SPI mode...");
    do
    {
      tries++;
   15b5c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15b60:	3301      	adds	r3, #1
   15b62:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
      sd->response.length = SendCmd(
          Command::kReset, 0x00, sd->response.data.byte, 100, KeepAlive::kYes);
   15b66:	9b03      	ldr	r3, [sp, #12]
   15b68:	681b      	ldr	r3, [r3, #0]
   15b6a:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(
   15b6c:	9b02      	ldr	r3, [sp, #8]
   15b6e:	f103 0208 	add.w	r2, r3, #8
   15b72:	2301      	movs	r3, #1
   15b74:	9301      	str	r3, [sp, #4]
   15b76:	2364      	movs	r3, #100	; 0x64
   15b78:	9300      	str	r3, [sp, #0]
   15b7a:	4613      	mov	r3, r2
   15b7c:	2200      	movs	r2, #0
   15b7e:	2140      	movs	r1, #64	; 0x40
   15b80:	9803      	ldr	r0, [sp, #12]
   15b82:	47a0      	blx	r4
   15b84:	4602      	mov	r2, r0
   15b86:	9b02      	ldr	r3, [sp, #8]
   15b88:	611a      	str	r2, [r3, #16]

      // Check if R1 response frame's bit 1 is set (to ensure that
      // card is in idle state)
      if (sd->response.data.byte[0] != 0xFF &&
   15b8a:	9b02      	ldr	r3, [sp, #8]
   15b8c:	7a1b      	ldrb	r3, [r3, #8]
   15b8e:	2bff      	cmp	r3, #255	; 0xff
   15b90:	d008      	beq.n	15ba4 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
          (sd->response.data.byte[0] & 0x01) == 0x01)
   15b92:	9b02      	ldr	r3, [sp, #8]
   15b94:	7a1b      	ldrb	r3, [r3, #8]
   15b96:	f003 0301 	and.w	r3, r3, #1
      if (sd->response.data.byte[0] != 0xFF &&
   15b9a:	2b00      	cmp	r3, #0
   15b9c:	d002      	beq.n	15ba4 <Sd::Mount(SdInterface::CardInfo_t*)+0x8c>
      {
        // If it is, we can move on; otherwise, keep trying for a set
        // amount of tries
        card_is_idle = true;
   15b9e:	2301      	movs	r3, #1
   15ba0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
      }
      Delay(10);
   15ba4:	f04f 000a 	mov.w	r0, #10
   15ba8:	f04f 0100 	mov.w	r1, #0
   15bac:	f7fa fe0e 	bl	107cc <Delay(unsigned long long)>
    } while (tries < kBusTimeout && !card_is_idle);
   15bb0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15bb4:	2bf9      	cmp	r3, #249	; 0xf9
   15bb6:	d804      	bhi.n	15bc2 <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
   15bb8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   15bbc:	2b00      	cmp	r3, #0
   15bbe:	d100      	bne.n	15bc2 <Sd::Mount(SdInterface::CardInfo_t*)+0xaa>
    do
   15bc0:	e7cc      	b.n	15b5c <Sd::Mount(SdInterface::CardInfo_t*)+0x44>
    LOG_DEBUG("%d tries", tries);
    if (tries >= kBusTimeout)
   15bc2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15bc6:	2bf9      	cmp	r3, #249	; 0xf9
   15bc8:	d91b      	bls.n	15c02 <Sd::Mount(SdInterface::CardInfo_t*)+0xea>
    {
      LOG_ERROR("Failed to initiate SPI mode within timeout. Aborting!");
   15bca:	f240 13ff 	movw	r3, #511	; 0x1ff
   15bce:	4a7e      	ldr	r2, [pc, #504]	; (15dc8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15bd0:	497e      	ldr	r1, [pc, #504]	; (15dcc <Sd::Mount(SdInterface::CardInfo_t*)+0x2b4>)
   15bd2:	487f      	ldr	r0, [pc, #508]	; (15dd0 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b8>)
   15bd4:	f7fe fbf6 	bl	143c4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15bd8:	9b03      	ldr	r3, [sp, #12]
   15bda:	681b      	ldr	r3, [r3, #0]
   15bdc:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15bde:	9b02      	ldr	r3, [sp, #8]
   15be0:	f103 0208 	add.w	r2, r3, #8
   15be4:	2300      	movs	r3, #0
   15be6:	9301      	str	r3, [sp, #4]
   15be8:	2300      	movs	r3, #0
   15bea:	9300      	str	r3, [sp, #0]
   15bec:	4613      	mov	r3, r2
   15bee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15bf2:	21ff      	movs	r1, #255	; 0xff
   15bf4:	9803      	ldr	r0, [sp, #12]
   15bf6:	47a0      	blx	r4
   15bf8:	4602      	mov	r2, r0
   15bfa:	9b02      	ldr	r3, [sp, #8]
   15bfc:	611a      	str	r2, [r3, #16]
      return false;
   15bfe:	2400      	movs	r4, #0
   15c00:	e10c      	b.n	15e1c <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Send the host's supported voltage (3.3V) and ask if the card
    // supports it
    LOG_DEBUG("Checking Current SD Card Voltage Level...");
    constexpr uint8_t kCheckPattern = 0xAB;
   15c02:	23ab      	movs	r3, #171	; 0xab
   15c04:	f88d 301f 	strb.w	r3, [sp, #31]
    uint64_t supported_voltage      = 0x00000001;
   15c08:	f04f 0301 	mov.w	r3, #1
   15c0c:	f04f 0400 	mov.w	r4, #0
   15c10:	e9cd 3404 	strd	r3, r4, [sp, #16]
    sd->response.length =
        SendCmd(Command::kGetOp,
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
                sd->response.data.byte, 100, KeepAlive::kYes);
   15c14:	9b03      	ldr	r3, [sp, #12]
   15c16:	681b      	ldr	r3, [r3, #0]
   15c18:	681c      	ldr	r4, [r3, #0]
                static_cast<uint32_t>((supported_voltage << 8) | kCheckPattern),
   15c1a:	9b04      	ldr	r3, [sp, #16]
   15c1c:	021b      	lsls	r3, r3, #8
        SendCmd(Command::kGetOp,
   15c1e:	f043 02ab 	orr.w	r2, r3, #171	; 0xab
   15c22:	9b02      	ldr	r3, [sp, #8]
   15c24:	f103 0108 	add.w	r1, r3, #8
   15c28:	2301      	movs	r3, #1
   15c2a:	9301      	str	r3, [sp, #4]
   15c2c:	2364      	movs	r3, #100	; 0x64
   15c2e:	9300      	str	r3, [sp, #0]
   15c30:	460b      	mov	r3, r1
   15c32:	2148      	movs	r1, #72	; 0x48
   15c34:	9803      	ldr	r0, [sp, #12]
   15c36:	47a0      	blx	r4
   15c38:	4602      	mov	r2, r0
    sd->response.length =
   15c3a:	9b02      	ldr	r3, [sp, #8]
   15c3c:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[4] != kCheckPattern)
   15c3e:	9b02      	ldr	r3, [sp, #8]
   15c40:	7b1b      	ldrb	r3, [r3, #12]
   15c42:	2bab      	cmp	r3, #171	; 0xab
   15c44:	d01b      	beq.n	15c7e <Sd::Mount(SdInterface::CardInfo_t*)+0x166>
    {
      // If the last byte is not an exact echo of the LSB of the kGetOp
      // command's argument, this response is invalid
      LOG_ERROR("Response integrity check failed. Aborting!");
   15c46:	f240 2312 	movw	r3, #530	; 0x212
   15c4a:	4a5f      	ldr	r2, [pc, #380]	; (15dc8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15c4c:	4961      	ldr	r1, [pc, #388]	; (15dd4 <Sd::Mount(SdInterface::CardInfo_t*)+0x2bc>)
   15c4e:	4862      	ldr	r0, [pc, #392]	; (15dd8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c0>)
   15c50:	f7fe fbb8 	bl	143c4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15c54:	9b03      	ldr	r3, [sp, #12]
   15c56:	681b      	ldr	r3, [r3, #0]
   15c58:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15c5a:	9b02      	ldr	r3, [sp, #8]
   15c5c:	f103 0208 	add.w	r2, r3, #8
   15c60:	2300      	movs	r3, #0
   15c62:	9301      	str	r3, [sp, #4]
   15c64:	2300      	movs	r3, #0
   15c66:	9300      	str	r3, [sp, #0]
   15c68:	4613      	mov	r3, r2
   15c6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15c6e:	21ff      	movs	r1, #255	; 0xff
   15c70:	9803      	ldr	r0, [sp, #12]
   15c72:	47a0      	blx	r4
   15c74:	4602      	mov	r2, r0
   15c76:	9b02      	ldr	r3, [sp, #8]
   15c78:	611a      	str	r2, [r3, #16]
      return false;
   15c7a:	2400      	movs	r4, #0
   15c7c:	e0ce      	b.n	15e1c <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }
    else if (sd->response.data.byte[3] &
   15c7e:	9b02      	ldr	r3, [sp, #8]
   15c80:	7adb      	ldrb	r3, [r3, #11]
   15c82:	4619      	mov	r1, r3
             (supported_voltage == static_cast<uint64_t>(0x00)))
   15c84:	9a04      	ldr	r2, [sp, #16]
   15c86:	9b05      	ldr	r3, [sp, #20]
   15c88:	4313      	orrs	r3, r2
   15c8a:	2b00      	cmp	r3, #0
   15c8c:	bf0c      	ite	eq
   15c8e:	2301      	moveq	r3, #1
   15c90:	2300      	movne	r3, #0
   15c92:	b2db      	uxtb	r3, r3
    else if (sd->response.data.byte[3] &
   15c94:	400b      	ands	r3, r1
   15c96:	2b00      	cmp	r3, #0
   15c98:	d01b      	beq.n	15cd2 <Sd::Mount(SdInterface::CardInfo_t*)+0x1ba>
    {
      // If the 2nd-to-last byte of the reponse AND'ed with our host
      // device's supported voltage range is 0x00, the SD card doesn't
      // support our device's operating voltage
      LOG_ERROR("Unsupported voltage in use. Aborting!");
   15c9a:	f240 231d 	movw	r3, #541	; 0x21d
   15c9e:	4a4a      	ldr	r2, [pc, #296]	; (15dc8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15ca0:	494e      	ldr	r1, [pc, #312]	; (15ddc <Sd::Mount(SdInterface::CardInfo_t*)+0x2c4>)
   15ca2:	484f      	ldr	r0, [pc, #316]	; (15de0 <Sd::Mount(SdInterface::CardInfo_t*)+0x2c8>)
   15ca4:	f7fe fb8e 	bl	143c4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15ca8:	9b03      	ldr	r3, [sp, #12]
   15caa:	681b      	ldr	r3, [r3, #0]
   15cac:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15cae:	9b02      	ldr	r3, [sp, #8]
   15cb0:	f103 0208 	add.w	r2, r3, #8
   15cb4:	2300      	movs	r3, #0
   15cb6:	9301      	str	r3, [sp, #4]
   15cb8:	2300      	movs	r3, #0
   15cba:	9300      	str	r3, [sp, #0]
   15cbc:	4613      	mov	r3, r2
   15cbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15cc2:	21ff      	movs	r1, #255	; 0xff
   15cc4:	9803      	ldr	r0, [sp, #12]
   15cc6:	47a0      	blx	r4
   15cc8:	4602      	mov	r2, r0
   15cca:	9b02      	ldr	r3, [sp, #8]
   15ccc:	611a      	str	r2, [r3, #16]
      return false;
   15cce:	2400      	movs	r4, #0
   15cd0:	e0a4      	b.n	15e1c <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    }

    // Indicate that the host supports SDHC/SDXC and wait for card to
    // shift out of idle state
    LOG_DEBUG("Expressing High-Capacity SD Card Support...");
    tries = 0;
   15cd2:	2300      	movs	r3, #0
   15cd4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    do
    {
      // Send host's operating conditions
      sd->response.length =
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
                  KeepAlive::kYes);
   15cd8:	9b03      	ldr	r3, [sp, #12]
   15cda:	681b      	ldr	r3, [r3, #0]
   15cdc:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kInit, 0x40000000, sd->response.data.byte, 100,
   15cde:	9b02      	ldr	r3, [sp, #8]
   15ce0:	f103 0208 	add.w	r2, r3, #8
   15ce4:	2301      	movs	r3, #1
   15ce6:	9301      	str	r3, [sp, #4]
   15ce8:	2364      	movs	r3, #100	; 0x64
   15cea:	9300      	str	r3, [sp, #0]
   15cec:	4613      	mov	r3, r2
   15cee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   15cf2:	2141      	movs	r1, #65	; 0x41
   15cf4:	9803      	ldr	r0, [sp, #12]
   15cf6:	47a0      	blx	r4
   15cf8:	4602      	mov	r2, r0
      sd->response.length =
   15cfa:	9b02      	ldr	r3, [sp, #8]
   15cfc:	611a      	str	r2, [r3, #16]
      tries++;
   15cfe:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15d02:	3301      	adds	r3, #1
   15d04:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    } while (tries < kBusTimeout && sd->response.data.byte[0] & 0x01);
   15d08:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15d0c:	2bf9      	cmp	r3, #249	; 0xf9
   15d0e:	d806      	bhi.n	15d1e <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
   15d10:	9b02      	ldr	r3, [sp, #8]
   15d12:	7a1b      	ldrb	r3, [r3, #8]
   15d14:	f003 0301 	and.w	r3, r3, #1
   15d18:	2b00      	cmp	r3, #0
   15d1a:	d000      	beq.n	15d1e <Sd::Mount(SdInterface::CardInfo_t*)+0x206>
    do
   15d1c:	e7dc      	b.n	15cd8 <Sd::Mount(SdInterface::CardInfo_t*)+0x1c0>
    if (tries == kBusTimeout)
   15d1e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15d22:	2bfa      	cmp	r3, #250	; 0xfa
   15d24:	d11b      	bne.n	15d5e <Sd::Mount(SdInterface::CardInfo_t*)+0x246>
    {
      LOG_ERROR("SD Card timed out. Aborting!");
   15d26:	f240 2331 	movw	r3, #561	; 0x231
   15d2a:	4a27      	ldr	r2, [pc, #156]	; (15dc8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2b0>)
   15d2c:	492d      	ldr	r1, [pc, #180]	; (15de4 <Sd::Mount(SdInterface::CardInfo_t*)+0x2cc>)
   15d2e:	482e      	ldr	r0, [pc, #184]	; (15de8 <Sd::Mount(SdInterface::CardInfo_t*)+0x2d0>)
   15d30:	f7fe fb48 	bl	143c4 <printf>
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
                                    sd->response.data.byte, 0, KeepAlive::kNo);
   15d34:	9b03      	ldr	r3, [sp, #12]
   15d36:	681b      	ldr	r3, [r3, #0]
   15d38:	681c      	ldr	r4, [r3, #0]
      sd->response.length = SendCmd(Command::kGarbage, 0xFFFFFFFF,
   15d3a:	9b02      	ldr	r3, [sp, #8]
   15d3c:	f103 0208 	add.w	r2, r3, #8
   15d40:	2300      	movs	r3, #0
   15d42:	9301      	str	r3, [sp, #4]
   15d44:	2300      	movs	r3, #0
   15d46:	9300      	str	r3, [sp, #0]
   15d48:	4613      	mov	r3, r2
   15d4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15d4e:	21ff      	movs	r1, #255	; 0xff
   15d50:	9803      	ldr	r0, [sp, #12]
   15d52:	47a0      	blx	r4
   15d54:	4602      	mov	r2, r0
   15d56:	9b02      	ldr	r3, [sp, #8]
   15d58:	611a      	str	r2, [r3, #16]
      return false;
   15d5a:	2400      	movs	r4, #0
   15d5c:	e05e      	b.n	15e1c <Sd::Mount(SdInterface::CardInfo_t*)+0x304>
    // After card is ready, acquire card capacity info using kGetOcr a
    // second time
    LOG_DEBUG("Reading Card Capacity Information...");
    // Read CCS
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
                                  sd->response.data.byte, 100, KeepAlive::kYes);
   15d5e:	9b03      	ldr	r3, [sp, #12]
   15d60:	681b      	ldr	r3, [r3, #0]
   15d62:	681c      	ldr	r4, [r3, #0]
    sd->response.length = SendCmd(Command::kGetOcr, 0x00,
   15d64:	9b02      	ldr	r3, [sp, #8]
   15d66:	f103 0208 	add.w	r2, r3, #8
   15d6a:	2301      	movs	r3, #1
   15d6c:	9301      	str	r3, [sp, #4]
   15d6e:	2364      	movs	r3, #100	; 0x64
   15d70:	9300      	str	r3, [sp, #0]
   15d72:	4613      	mov	r3, r2
   15d74:	2200      	movs	r2, #0
   15d76:	217a      	movs	r1, #122	; 0x7a
   15d78:	9803      	ldr	r0, [sp, #12]
   15d7a:	47a0      	blx	r4
   15d7c:	4602      	mov	r2, r0
   15d7e:	9b02      	ldr	r3, [sp, #8]
   15d80:	611a      	str	r2, [r3, #16]
    if (sd->response.data.byte[1] & 0x40)
   15d82:	9b02      	ldr	r3, [sp, #8]
   15d84:	7a5b      	ldrb	r3, [r3, #9]
   15d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
   15d8a:	2b00      	cmp	r3, #0
   15d8c:	d003      	beq.n	15d96 <Sd::Mount(SdInterface::CardInfo_t*)+0x27e>
    {
      // The card is either high or extended capacity
      LOG_DEBUG("SD Card is HC/XC");
      sd->type = Type::kSDHC;
   15d8e:	9b02      	ldr	r3, [sp, #8]
   15d90:	2201      	movs	r2, #1
   15d92:	605a      	str	r2, [r3, #4]
   15d94:	e002      	b.n	15d9c <Sd::Mount(SdInterface::CardInfo_t*)+0x284>
    }
    else
    {
      // The card is standard capacity
      LOG_DEBUG("SD Card is SC");
      sd->type = Type::kSDSC;
   15d96:	9b02      	ldr	r3, [sp, #8]
   15d98:	2200      	movs	r2, #0
   15d9a:	605a      	str	r2, [r3, #4]
    }

    // Store OCR information
    for (int i = 0; i < 4; i++)
   15d9c:	2300      	movs	r3, #0
   15d9e:	9308      	str	r3, [sp, #32]
   15da0:	9b08      	ldr	r3, [sp, #32]
   15da2:	2b03      	cmp	r3, #3
   15da4:	dc22      	bgt.n	15dec <Sd::Mount(SdInterface::CardInfo_t*)+0x2d4>
    {
      // ensure OCR doesn't capture the R1 section of the response
      sd->ocr.byte[i] = sd->response.data.byte[i + 1];
   15da6:	9b08      	ldr	r3, [sp, #32]
   15da8:	3301      	adds	r3, #1
   15daa:	9a02      	ldr	r2, [sp, #8]
   15dac:	4413      	add	r3, r2
   15dae:	7a19      	ldrb	r1, [r3, #8]
   15db0:	9a02      	ldr	r2, [sp, #8]
   15db2:	9b08      	ldr	r3, [sp, #32]
   15db4:	4413      	add	r3, r2
   15db6:	460a      	mov	r2, r1
   15db8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
   15dba:	9b08      	ldr	r3, [sp, #32]
   15dbc:	3301      	adds	r3, #1
   15dbe:	9308      	str	r3, [sp, #32]
   15dc0:	e7ee      	b.n	15da0 <Sd::Mount(SdInterface::CardInfo_t*)+0x288>
   15dc2:	bf00      	nop
   15dc4:	00015b19 	.word	0x00015b19
   15dc8:	00019344 	.word	0x00019344
   15dcc:	0001905c 	.word	0x0001905c
   15dd0:	00018674 	.word	0x00018674
   15dd4:	00019064 	.word	0x00019064
   15dd8:	000186e4 	.word	0x000186e4
   15ddc:	0001906c 	.word	0x0001906c
   15de0:	00018748 	.word	0x00018748
   15de4:	00019074 	.word	0x00019074
   15de8:	000187a8 	.word	0x000187a8
    }

    // If card is SDSC, manually set its block size
    if (sd->type == Type::kSDSC)
   15dec:	9b02      	ldr	r3, [sp, #8]
   15dee:	685b      	ldr	r3, [r3, #4]
   15df0:	2b00      	cmp	r3, #0
   15df2:	d112      	bne.n	15e1a <Sd::Mount(SdInterface::CardInfo_t*)+0x302>
    {
      // Send requested byte size
      sd->response.length =
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
                  sd->response.data.byte, 0, KeepAlive::kYes);
   15df4:	9b03      	ldr	r3, [sp, #12]
   15df6:	681b      	ldr	r3, [r3, #0]
   15df8:	681c      	ldr	r4, [r3, #0]
          SendCmd(Command::kChgBlkLen, static_cast<uint32_t>(kBlockSize),
   15dfa:	9b02      	ldr	r3, [sp, #8]
   15dfc:	f103 0208 	add.w	r2, r3, #8
   15e00:	2301      	movs	r3, #1
   15e02:	9301      	str	r3, [sp, #4]
   15e04:	2300      	movs	r3, #0
   15e06:	9300      	str	r3, [sp, #0]
   15e08:	4613      	mov	r3, r2
   15e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
   15e0e:	2150      	movs	r1, #80	; 0x50
   15e10:	9803      	ldr	r0, [sp, #12]
   15e12:	47a0      	blx	r4
   15e14:	4602      	mov	r2, r0
      sd->response.length =
   15e16:	9b02      	ldr	r3, [sp, #8]
   15e18:	611a      	str	r2, [r3, #16]
    }

    return true;
   15e1a:	2401      	movs	r4, #1
   15e1c:	462b      	mov	r3, r5
   15e1e:	4619      	mov	r1, r3
   15e20:	4803      	ldr	r0, [pc, #12]	; (15e30 <Sd::Mount(SdInterface::CardInfo_t*)+0x318>)
   15e22:	f7fd f883 	bl	12f2c <__cyg_profile_func_exit>
   15e26:	4623      	mov	r3, r4
  }
   15e28:	4618      	mov	r0, r3
   15e2a:	b00b      	add	sp, #44	; 0x2c
   15e2c:	bd30      	pop	{r4, r5, pc}
   15e2e:	bf00      	nop
   15e30:	00015b19 	.word	0x00015b19

00015e34 <Sd::ToBool(bool)>:

  // Returns string to represent a boolean value
  const char * ToBool(bool condition)
   15e34:	b530      	push	{r4, r5, lr}
   15e36:	b083      	sub	sp, #12
   15e38:	4675      	mov	r5, lr
   15e3a:	9001      	str	r0, [sp, #4]
   15e3c:	460b      	mov	r3, r1
   15e3e:	f88d 3003 	strb.w	r3, [sp, #3]
   15e42:	462b      	mov	r3, r5
   15e44:	4619      	mov	r1, r3
   15e46:	4809      	ldr	r0, [pc, #36]	; (15e6c <Sd::ToBool(bool)+0x38>)
   15e48:	f7fd f85c 	bl	12f04 <__cyg_profile_func_enter>
  {
    return (condition) ? "true" : "false";
   15e4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15e50:	2b00      	cmp	r3, #0
   15e52:	d001      	beq.n	15e58 <Sd::ToBool(bool)+0x24>
   15e54:	4c06      	ldr	r4, [pc, #24]	; (15e70 <Sd::ToBool(bool)+0x3c>)
   15e56:	e000      	b.n	15e5a <Sd::ToBool(bool)+0x26>
   15e58:	4c06      	ldr	r4, [pc, #24]	; (15e74 <Sd::ToBool(bool)+0x40>)
   15e5a:	462b      	mov	r3, r5
   15e5c:	4619      	mov	r1, r3
   15e5e:	4803      	ldr	r0, [pc, #12]	; (15e6c <Sd::ToBool(bool)+0x38>)
   15e60:	f7fd f864 	bl	12f2c <__cyg_profile_func_exit>
   15e64:	4623      	mov	r3, r4
  }
   15e66:	4618      	mov	r0, r3
   15e68:	b003      	add	sp, #12
   15e6a:	bd30      	pop	{r4, r5, pc}
   15e6c:	00015e35 	.word	0x00015e35
   15e70:	00018800 	.word	0x00018800
   15e74:	00018808 	.word	0x00018808

00015e78 <Sd::WaitToReadBlock()>:

  // Waits for the card to respond after a single or multi block read cmd is
  // sent.
  void WaitToReadBlock()
   15e78:	b510      	push	{r4, lr}
   15e7a:	b084      	sub	sp, #16
   15e7c:	4674      	mov	r4, lr
   15e7e:	9001      	str	r0, [sp, #4]
   15e80:	4623      	mov	r3, r4
   15e82:	4619      	mov	r1, r3
   15e84:	4814      	ldr	r0, [pc, #80]	; (15ed8 <Sd::WaitToReadBlock()+0x60>)
   15e86:	f7fd f83d 	bl	12f04 <__cyg_profile_func_enter>
    // Bit 4 -->  If set, card is locked
    // Bit 3 -->  If set, address is out or range
    // Bit 2 -->  If set, card ECC failed
    // Bit 1 -->  If set, CC error occurred
    // Bit 0 -->  If set, a generic error occurred
    uint8_t wait_byte = 0x00;
   15e8a:	2300      	movs	r3, #0
   15e8c:	f88d 300f 	strb.w	r3, [sp, #15]
    do
    {
      wait_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   15e90:	9b01      	ldr	r3, [sp, #4]
   15e92:	685a      	ldr	r2, [r3, #4]
   15e94:	9b01      	ldr	r3, [sp, #4]
   15e96:	685b      	ldr	r3, [r3, #4]
   15e98:	681b      	ldr	r3, [r3, #0]
   15e9a:	3308      	adds	r3, #8
   15e9c:	681b      	ldr	r3, [r3, #0]
   15e9e:	21ff      	movs	r1, #255	; 0xff
   15ea0:	4610      	mov	r0, r2
   15ea2:	4798      	blx	r3
   15ea4:	4603      	mov	r3, r0
   15ea6:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (wait_byte != 0xFE && (wait_byte & 0xE0) != 0x00);
   15eaa:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15eae:	2bfe      	cmp	r3, #254	; 0xfe
   15eb0:	d006      	beq.n	15ec0 <Sd::WaitToReadBlock()+0x48>
   15eb2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15eb6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   15eba:	2b00      	cmp	r3, #0
   15ebc:	d000      	beq.n	15ec0 <Sd::WaitToReadBlock()+0x48>
    do
   15ebe:	e7e7      	b.n	15e90 <Sd::WaitToReadBlock()+0x18>

    // DEBUG: Check the value of the wait byte
    if (wait_byte == 0xFE)
   15ec0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15ec4:	2bfe      	cmp	r3, #254	; 0xfe
   15ec6:	4623      	mov	r3, r4
   15ec8:	4619      	mov	r1, r3
   15eca:	4803      	ldr	r0, [pc, #12]	; (15ed8 <Sd::WaitToReadBlock()+0x60>)
   15ecc:	f7fd f82e 	bl	12f2c <__cyg_profile_func_exit>
      LOG_DEBUG("Addr Out of Range?: %s", ToBool(wait_byte & 0x08));
      LOG_DEBUG("Card ECC Failed?: %s", ToBool(wait_byte & 0x04));
      LOG_DEBUG("CC Error?: %s", ToBool(wait_byte & 0x02));
      LOG_DEBUG("Error?: %s", ToBool(wait_byte & 0x01));
    }
  }
   15ed0:	bf00      	nop
   15ed2:	b004      	add	sp, #16
   15ed4:	bd10      	pop	{r4, pc}
   15ed6:	bf00      	nop
   15ed8:	00015e79 	.word	0x00015e79

00015edc <Sd::WaitWhileBusy()>:

  // Waits for the card to be ready to receive a new block after one has
  // been written or erased
  void WaitWhileBusy()
   15edc:	b510      	push	{r4, lr}
   15ede:	b084      	sub	sp, #16
   15ee0:	4674      	mov	r4, lr
   15ee2:	9001      	str	r0, [sp, #4]
   15ee4:	4623      	mov	r3, r4
   15ee6:	4619      	mov	r1, r3
   15ee8:	480f      	ldr	r0, [pc, #60]	; (15f28 <Sd::WaitWhileBusy()+0x4c>)
   15eea:	f7fd f80b 	bl	12f04 <__cyg_profile_func_enter>
  {
    // Wait for the card to finish programming (i.e. when the
    // bytes return to 0xFF)
    uint8_t busy_byte = 0x00;
   15eee:	2300      	movs	r3, #0
   15ef0:	f88d 300f 	strb.w	r3, [sp, #15]
    LOG_DEBUG("Card is busy. Waiting for it to finish...");
    do
    {
      busy_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   15ef4:	9b01      	ldr	r3, [sp, #4]
   15ef6:	685a      	ldr	r2, [r3, #4]
   15ef8:	9b01      	ldr	r3, [sp, #4]
   15efa:	685b      	ldr	r3, [r3, #4]
   15efc:	681b      	ldr	r3, [r3, #0]
   15efe:	3308      	adds	r3, #8
   15f00:	681b      	ldr	r3, [r3, #0]
   15f02:	21ff      	movs	r1, #255	; 0xff
   15f04:	4610      	mov	r0, r2
   15f06:	4798      	blx	r3
   15f08:	4603      	mov	r3, r0
   15f0a:	f88d 300f 	strb.w	r3, [sp, #15]
    } while (busy_byte != 0xFF);
   15f0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15f12:	2bff      	cmp	r3, #255	; 0xff
   15f14:	d000      	beq.n	15f18 <Sd::WaitWhileBusy()+0x3c>
    do
   15f16:	e7ed      	b.n	15ef4 <Sd::WaitWhileBusy()+0x18>
   15f18:	4623      	mov	r3, r4
   15f1a:	4619      	mov	r1, r3
   15f1c:	4802      	ldr	r0, [pc, #8]	; (15f28 <Sd::WaitWhileBusy()+0x4c>)
   15f1e:	f7fd f805 	bl	12f2c <__cyg_profile_func_exit>
    LOG_DEBUG("Card finished!");
  }
   15f22:	bf00      	nop
   15f24:	b004      	add	sp, #16
   15f26:	bd10      	pop	{r4, pc}
   15f28:	00015edd 	.word	0x00015edd

00015f2c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)>:

  // Read any number of blocks from the SD card
  uint8_t ReadBlock(uint32_t address, uint8_t * array,
   15f2c:	b530      	push	{r4, r5, lr}
   15f2e:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   15f32:	4675      	mov	r5, lr
   15f34:	ac05      	add	r4, sp, #20
   15f36:	6020      	str	r0, [r4, #0]
   15f38:	a804      	add	r0, sp, #16
   15f3a:	6001      	str	r1, [r0, #0]
   15f3c:	a903      	add	r1, sp, #12
   15f3e:	600a      	str	r2, [r1, #0]
   15f40:	aa02      	add	r2, sp, #8
   15f42:	6013      	str	r3, [r2, #0]
   15f44:	462b      	mov	r3, r5
   15f46:	4619      	mov	r1, r3
   15f48:	487d      	ldr	r0, [pc, #500]	; (16140 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x214>)
   15f4a:	f7fc ffdb 	bl	12f04 <__cyg_profile_func_enter>
                    uint32_t blocks = 1) override
  {
    LOG_DEBUG("Block %" PRId32 " :: 0x%" PRIX32 " for %" PRId32 " blocks",
              address, address, blocks);
    // Wait for a previous command to finish
    WaitWhileBusy();
   15f4e:	ab05      	add	r3, sp, #20
   15f50:	6818      	ldr	r0, [r3, #0]
   15f52:	f7ff ffc3 	bl	15edc <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool payload_had_bad_crc = false;
   15f56:	2300      	movs	r3, #0
   15f58:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247

    // Create a temporary place to store blocks of 512 bytes (this is now
    // possible because the constructor enforces block size cross-
    // compatibility)
    uint8_t block_store[512] = { 0 };
   15f5c:	ab06      	add	r3, sp, #24
   15f5e:	4618      	mov	r0, r3
   15f60:	f44f 7300 	mov.w	r3, #512	; 0x200
   15f64:	461a      	mov	r2, r3
   15f66:	2100      	movs	r1, #0
   15f68:	f001 f9d8 	bl	1731c <memset>

    // Determine appropriate command to send
    Command read_cmd;
    if (blocks > 1)
   15f6c:	ab02      	add	r3, sp, #8
   15f6e:	681b      	ldr	r3, [r3, #0]
   15f70:	2b01      	cmp	r3, #1
   15f72:	d902      	bls.n	15f7a <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x4e>
    {
      read_cmd = Command::kReadMulti;
   15f74:	2352      	movs	r3, #82	; 0x52
   15f76:	9390      	str	r3, [sp, #576]	; 0x240
   15f78:	e001      	b.n	15f7e <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x52>
    }
    else
    {
      read_cmd = Command::kReadSingle;
   15f7a:	2351      	movs	r3, #81	; 0x51
   15f7c:	9390      	str	r3, [sp, #576]	; 0x240
    }

    // Send initial read command
    sd.response.length =
        SendCmd(read_cmd, address, sd.response.data.byte, 100, KeepAlive::kYes);
   15f7e:	ab05      	add	r3, sp, #20
   15f80:	681b      	ldr	r3, [r3, #0]
   15f82:	681b      	ldr	r3, [r3, #0]
   15f84:	681c      	ldr	r4, [r3, #0]
   15f86:	ab86      	add	r3, sp, #536	; 0x218
   15f88:	f103 0108 	add.w	r1, r3, #8
   15f8c:	aa04      	add	r2, sp, #16
   15f8e:	a805      	add	r0, sp, #20
   15f90:	2301      	movs	r3, #1
   15f92:	9301      	str	r3, [sp, #4]
   15f94:	2364      	movs	r3, #100	; 0x64
   15f96:	9300      	str	r3, [sp, #0]
   15f98:	460b      	mov	r3, r1
   15f9a:	6812      	ldr	r2, [r2, #0]
   15f9c:	9990      	ldr	r1, [sp, #576]	; 0x240
   15f9e:	6800      	ldr	r0, [r0, #0]
   15fa0:	47a0      	blx	r4
   15fa2:	4603      	mov	r3, r0
    sd.response.length =
   15fa4:	938a      	str	r3, [sp, #552]	; 0x228
    LOG_DEBUG("Sent Read Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the command was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   15fa6:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   15faa:	2b00      	cmp	r3, #0
   15fac:	f040 80d8 	bne.w	16160 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x234>
    {
      // For every block requested
      uint16_t block_count;
      for (block_count = 0; block_count < blocks; block_count++)
   15fb0:	2300      	movs	r3, #0
   15fb2:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   15fb6:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15fba:	aa02      	add	r2, sp, #8
   15fbc:	6812      	ldr	r2, [r2, #0]
   15fbe:	429a      	cmp	r2, r3
   15fc0:	f240 8099 	bls.w	160f6 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1ca>
      {
        // Wait for the card to respond with a ready signal
        WaitToReadBlock();
   15fc4:	ab05      	add	r3, sp, #20
   15fc6:	6818      	ldr	r0, [r3, #0]
   15fc8:	f7ff ff56 	bl	15e78 <Sd::WaitToReadBlock()>

        // Calculate the block address offset
        uint16_t block_addr_offset =
   15fcc:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   15fd0:	025b      	lsls	r3, r3, #9
   15fd2:	f8ad 323a 	strh.w	r3, [sp, #570]	; 0x23a
            static_cast<uint16_t>(block_count * kBlockSize);

        // Read all the bytes of a single block
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   15fd6:	2300      	movs	r3, #0
   15fd8:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   15fdc:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   15fe4:	d22b      	bcs.n	1603e <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x112>
        {
          // Calculate the current storage index
          uint16_t storage_index =
   15fe6:	f8bd 223a 	ldrh.w	r2, [sp, #570]	; 0x23a
   15fea:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   15fee:	4413      	add	r3, r2
   15ff0:	f8ad 3238 	strh.w	r3, [sp, #568]	; 0x238
              static_cast<uint16_t>(block_addr_offset + byte_count);

          // Transfer a byte to read a block from the SD card
          array[storage_index] =
              static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   15ff4:	ab05      	add	r3, sp, #20
   15ff6:	681b      	ldr	r3, [r3, #0]
   15ff8:	685a      	ldr	r2, [r3, #4]
   15ffa:	ab05      	add	r3, sp, #20
   15ffc:	681b      	ldr	r3, [r3, #0]
   15ffe:	685b      	ldr	r3, [r3, #4]
   16000:	681b      	ldr	r3, [r3, #0]
   16002:	3308      	adds	r3, #8
   16004:	681b      	ldr	r3, [r3, #0]
   16006:	21ff      	movs	r1, #255	; 0xff
   16008:	4610      	mov	r0, r2
   1600a:	4798      	blx	r3
   1600c:	4603      	mov	r3, r0
   1600e:	4619      	mov	r1, r3
          array[storage_index] =
   16010:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   16014:	aa03      	add	r2, sp, #12
   16016:	6812      	ldr	r2, [r2, #0]
   16018:	4413      	add	r3, r2
   1601a:	b2ca      	uxtb	r2, r1
   1601c:	701a      	strb	r2, [r3, #0]

          // Copy that byte into our temporary block store
          block_store[byte_count] = array[storage_index];
   1601e:	f8bd 3238 	ldrh.w	r3, [sp, #568]	; 0x238
   16022:	aa03      	add	r2, sp, #12
   16024:	6812      	ldr	r2, [r2, #0]
   16026:	441a      	add	r2, r3
   16028:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   1602c:	7811      	ldrb	r1, [r2, #0]
   1602e:	aa06      	add	r2, sp, #24
   16030:	54d1      	strb	r1, [r2, r3]
        for (uint16_t byte_count = 0; byte_count < kBlockSize; byte_count++)
   16032:	f8bd 323c 	ldrh.w	r3, [sp, #572]	; 0x23c
   16036:	3301      	adds	r3, #1
   16038:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
   1603c:	e7ce      	b.n	15fdc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0xb0>
        }

        // Then read the block's 16-bit CRC (i.e. read two bytes)
        uint16_t block_crc =
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   1603e:	ab05      	add	r3, sp, #20
   16040:	681b      	ldr	r3, [r3, #0]
   16042:	685a      	ldr	r2, [r3, #4]
   16044:	ab05      	add	r3, sp, #20
   16046:	681b      	ldr	r3, [r3, #0]
   16048:	685b      	ldr	r3, [r3, #4]
   1604a:	681b      	ldr	r3, [r3, #0]
   1604c:	3308      	adds	r3, #8
   1604e:	681b      	ldr	r3, [r3, #0]
   16050:	21ff      	movs	r1, #255	; 0xff
   16052:	4610      	mov	r0, r2
   16054:	4798      	blx	r3
   16056:	4603      	mov	r3, r0
   16058:	021b      	lsls	r3, r3, #8
   1605a:	b21c      	sxth	r4, r3
                                  ssp_interface_->Transfer(0xFF));
   1605c:	ab05      	add	r3, sp, #20
   1605e:	681b      	ldr	r3, [r3, #0]
   16060:	685a      	ldr	r2, [r3, #4]
   16062:	ab05      	add	r3, sp, #20
   16064:	681b      	ldr	r3, [r3, #0]
   16066:	685b      	ldr	r3, [r3, #4]
   16068:	681b      	ldr	r3, [r3, #0]
   1606a:	3308      	adds	r3, #8
   1606c:	681b      	ldr	r3, [r3, #0]
   1606e:	21ff      	movs	r1, #255	; 0xff
   16070:	4610      	mov	r0, r2
   16072:	4798      	blx	r3
   16074:	4603      	mov	r3, r0
   16076:	b21b      	sxth	r3, r3
            static_cast<uint16_t>((ssp_interface_->Transfer(0xFF) << 8) |
   16078:	4323      	orrs	r3, r4
   1607a:	b21b      	sxth	r3, r3
                                  ssp_interface_->Transfer(0xFF));
   1607c:	f8ad 3236 	strh.w	r3, [sp, #566]	; 0x236

        // Run a CRC-16 calculation on the message to determine if the
        // received CRCs match (i.e. checks if the block data is
        // valid).
        uint16_t expected_block_crc = GetCrc16(block_store, 512);
   16080:	ab05      	add	r3, sp, #20
   16082:	681b      	ldr	r3, [r3, #0]
   16084:	681b      	ldr	r3, [r3, #0]
   16086:	3320      	adds	r3, #32
   16088:	681b      	ldr	r3, [r3, #0]
   1608a:	a906      	add	r1, sp, #24
   1608c:	a805      	add	r0, sp, #20
   1608e:	f44f 7200 	mov.w	r2, #512	; 0x200
   16092:	6800      	ldr	r0, [r0, #0]
   16094:	4798      	blx	r3
   16096:	4603      	mov	r3, r0
   16098:	f8ad 3234 	strh.w	r3, [sp, #564]	; 0x234

        LOG_DEBUG("Block #%d @ 0x%" PRIX32 " acquired", block_count, address);
        LOG_DEBUG("Expecting block crc16 '0x%04X'", expected_block_crc);
        LOG_DEBUG("Got '0x%04X'", block_crc);
        if (expected_block_crc != block_crc)
   1609c:	f8bd 2234 	ldrh.w	r2, [sp, #564]	; 0x234
   160a0:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   160a4:	429a      	cmp	r2, r3
   160a6:	d020      	beq.n	160ea <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1be>
        {
          // If they do not match, set the bad crc status
          payload_had_bad_crc = true;
   160a8:	2301      	movs	r3, #1
   160aa:	f88d 3247 	strb.w	r3, [sp, #583]	; 0x247
          LOG_ERROR("While Reading Block #%d CRC16:", block_count);
   160ae:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   160b2:	9300      	str	r3, [sp, #0]
   160b4:	f240 23ed 	movw	r3, #749	; 0x2ed
   160b8:	4a22      	ldr	r2, [pc, #136]	; (16144 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   160ba:	4923      	ldr	r1, [pc, #140]	; (16148 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x21c>)
   160bc:	4823      	ldr	r0, [pc, #140]	; (1614c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x220>)
   160be:	f7fe f981 	bl	143c4 <printf>
          LOG_ERROR("Expected '0x%04X'", expected_block_crc);
   160c2:	f8bd 3234 	ldrh.w	r3, [sp, #564]	; 0x234
   160c6:	9300      	str	r3, [sp, #0]
   160c8:	f240 23ee 	movw	r3, #750	; 0x2ee
   160cc:	4a1d      	ldr	r2, [pc, #116]	; (16144 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   160ce:	4920      	ldr	r1, [pc, #128]	; (16150 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x224>)
   160d0:	4820      	ldr	r0, [pc, #128]	; (16154 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x228>)
   160d2:	f7fe f977 	bl	143c4 <printf>
          LOG_ERROR("Got '0x%04X'", block_crc);
   160d6:	f8bd 3236 	ldrh.w	r3, [sp, #566]	; 0x236
   160da:	9300      	str	r3, [sp, #0]
   160dc:	f240 23ef 	movw	r3, #751	; 0x2ef
   160e0:	4a18      	ldr	r2, [pc, #96]	; (16144 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x218>)
   160e2:	491d      	ldr	r1, [pc, #116]	; (16158 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x22c>)
   160e4:	481d      	ldr	r0, [pc, #116]	; (1615c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x230>)
   160e6:	f7fe f96d 	bl	143c4 <printf>
      for (block_count = 0; block_count < blocks; block_count++)
   160ea:	f8bd 323e 	ldrh.w	r3, [sp, #574]	; 0x23e
   160ee:	3301      	adds	r3, #1
   160f0:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
   160f4:	e75f      	b.n	15fb6 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x8a>
        }
      }

      // After reading multiple blocks, send the stop command to terminate the
      // transaction (i.e. no keep-alive)
      if (blocks > 1)
   160f6:	ab02      	add	r3, sp, #8
   160f8:	681b      	ldr	r3, [r3, #0]
   160fa:	2b01      	cmp	r3, #1
   160fc:	d913      	bls.n	16126 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x1fa>
      {
        sd.response.length =
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
                    KeepAlive::kNo);
   160fe:	ab05      	add	r3, sp, #20
   16100:	681b      	ldr	r3, [r3, #0]
   16102:	681b      	ldr	r3, [r3, #0]
   16104:	681c      	ldr	r4, [r3, #0]
            SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte, 100,
   16106:	ab86      	add	r3, sp, #536	; 0x218
   16108:	f103 0208 	add.w	r2, r3, #8
   1610c:	a805      	add	r0, sp, #20
   1610e:	2300      	movs	r3, #0
   16110:	9301      	str	r3, [sp, #4]
   16112:	2364      	movs	r3, #100	; 0x64
   16114:	9300      	str	r3, [sp, #0]
   16116:	4613      	mov	r3, r2
   16118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1611c:	214c      	movs	r1, #76	; 0x4c
   1611e:	6800      	ldr	r0, [r0, #0]
   16120:	47a0      	blx	r4
   16122:	4603      	mov	r3, r0
        sd.response.length =
   16124:	938a      	str	r3, [sp, #552]	; 0x228
      LOG_DEBUG("Response Byte");
      LOG_DEBUG("0x%02X", sd.response.data.byte[0]);

      // If there was a bad crc from the payload, manually set the
      // CRC error flag in the command response byte
      if (payload_had_bad_crc)
   16126:	f89d 3247 	ldrb.w	r3, [sp, #583]	; 0x247
   1612a:	2b00      	cmp	r3, #0
   1612c:	f000 80c0 	beq.w	162b0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
      {
        sd.response.data.byte[0] |= 0x08;
   16130:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16134:	f043 0308 	orr.w	r3, r3, #8
   16138:	b2db      	uxtb	r3, r3
   1613a:	f88d 3220 	strb.w	r3, [sp, #544]	; 0x220
   1613e:	e0b7      	b.n	162b0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
   16140:	00015f2d 	.word	0x00015f2d
   16144:	00019378 	.word	0x00019378
   16148:	0001907c 	.word	0x0001907c
   1614c:	00018810 	.word	0x00018810
   16150:	00019084 	.word	0x00019084
   16154:	00018868 	.word	0x00018868
   16158:	0001908c 	.word	0x0001908c
   1615c:	000188b4 	.word	0x000188b4
      }
    }
    else
    {
      LOG_ERROR("Read Cmd was not acknowledged properly!");
   16160:	f240 3309 	movw	r3, #777	; 0x309
   16164:	4a65      	ldr	r2, [pc, #404]	; (162fc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16166:	4966      	ldr	r1, [pc, #408]	; (16300 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d4>)
   16168:	4866      	ldr	r0, [pc, #408]	; (16304 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d8>)
   1616a:	f7fe f92b 	bl	143c4 <printf>
      LOG_ERROR("Parameter Err: %s", ToBool(sd.response.data.byte[0] & 0x40));
   1616e:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16172:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16176:	2b00      	cmp	r3, #0
   16178:	bf14      	ite	ne
   1617a:	2301      	movne	r3, #1
   1617c:	2300      	moveq	r3, #0
   1617e:	b2da      	uxtb	r2, r3
   16180:	ab05      	add	r3, sp, #20
   16182:	4611      	mov	r1, r2
   16184:	6818      	ldr	r0, [r3, #0]
   16186:	f7ff fe55 	bl	15e34 <Sd::ToBool(bool)>
   1618a:	4603      	mov	r3, r0
   1618c:	9300      	str	r3, [sp, #0]
   1618e:	f240 330a 	movw	r3, #778	; 0x30a
   16192:	4a5a      	ldr	r2, [pc, #360]	; (162fc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   16194:	495c      	ldr	r1, [pc, #368]	; (16308 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3dc>)
   16196:	485d      	ldr	r0, [pc, #372]	; (1630c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e0>)
   16198:	f7fe f914 	bl	143c4 <printf>
      LOG_ERROR("Addr Err: %s", ToBool(sd.response.data.byte[0] & 0x20));
   1619c:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   161a0:	f003 0320 	and.w	r3, r3, #32
   161a4:	2b00      	cmp	r3, #0
   161a6:	bf14      	ite	ne
   161a8:	2301      	movne	r3, #1
   161aa:	2300      	moveq	r3, #0
   161ac:	b2da      	uxtb	r2, r3
   161ae:	ab05      	add	r3, sp, #20
   161b0:	4611      	mov	r1, r2
   161b2:	6818      	ldr	r0, [r3, #0]
   161b4:	f7ff fe3e 	bl	15e34 <Sd::ToBool(bool)>
   161b8:	4603      	mov	r3, r0
   161ba:	9300      	str	r3, [sp, #0]
   161bc:	f240 330b 	movw	r3, #779	; 0x30b
   161c0:	4a4e      	ldr	r2, [pc, #312]	; (162fc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   161c2:	4953      	ldr	r1, [pc, #332]	; (16310 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e4>)
   161c4:	4853      	ldr	r0, [pc, #332]	; (16314 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3e8>)
   161c6:	f7fe f8fd 	bl	143c4 <printf>
      LOG_ERROR("Erase Seq Err: %s", ToBool(sd.response.data.byte[0] & 0x10));
   161ca:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   161ce:	f003 0310 	and.w	r3, r3, #16
   161d2:	2b00      	cmp	r3, #0
   161d4:	bf14      	ite	ne
   161d6:	2301      	movne	r3, #1
   161d8:	2300      	moveq	r3, #0
   161da:	b2da      	uxtb	r2, r3
   161dc:	ab05      	add	r3, sp, #20
   161de:	4611      	mov	r1, r2
   161e0:	6818      	ldr	r0, [r3, #0]
   161e2:	f7ff fe27 	bl	15e34 <Sd::ToBool(bool)>
   161e6:	4603      	mov	r3, r0
   161e8:	9300      	str	r3, [sp, #0]
   161ea:	f44f 7343 	mov.w	r3, #780	; 0x30c
   161ee:	4a43      	ldr	r2, [pc, #268]	; (162fc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   161f0:	4949      	ldr	r1, [pc, #292]	; (16318 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3ec>)
   161f2:	484a      	ldr	r0, [pc, #296]	; (1631c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f0>)
   161f4:	f7fe f8e6 	bl	143c4 <printf>
      LOG_ERROR("Com CRC Err: %s", ToBool(sd.response.data.byte[0] & 0x08));
   161f8:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   161fc:	f003 0308 	and.w	r3, r3, #8
   16200:	2b00      	cmp	r3, #0
   16202:	bf14      	ite	ne
   16204:	2301      	movne	r3, #1
   16206:	2300      	moveq	r3, #0
   16208:	b2da      	uxtb	r2, r3
   1620a:	ab05      	add	r3, sp, #20
   1620c:	4611      	mov	r1, r2
   1620e:	6818      	ldr	r0, [r3, #0]
   16210:	f7ff fe10 	bl	15e34 <Sd::ToBool(bool)>
   16214:	4603      	mov	r3, r0
   16216:	9300      	str	r3, [sp, #0]
   16218:	f240 330d 	movw	r3, #781	; 0x30d
   1621c:	4a37      	ldr	r2, [pc, #220]	; (162fc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1621e:	4940      	ldr	r1, [pc, #256]	; (16320 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f4>)
   16220:	4840      	ldr	r0, [pc, #256]	; (16324 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3f8>)
   16222:	f7fe f8cf 	bl	143c4 <printf>
      LOG_ERROR("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
   16226:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   1622a:	f003 0304 	and.w	r3, r3, #4
   1622e:	2b00      	cmp	r3, #0
   16230:	bf14      	ite	ne
   16232:	2301      	movne	r3, #1
   16234:	2300      	moveq	r3, #0
   16236:	b2da      	uxtb	r2, r3
   16238:	ab05      	add	r3, sp, #20
   1623a:	4611      	mov	r1, r2
   1623c:	6818      	ldr	r0, [r3, #0]
   1623e:	f7ff fdf9 	bl	15e34 <Sd::ToBool(bool)>
   16242:	4603      	mov	r3, r0
   16244:	9300      	str	r3, [sp, #0]
   16246:	f240 330e 	movw	r3, #782	; 0x30e
   1624a:	4a2c      	ldr	r2, [pc, #176]	; (162fc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1624c:	4936      	ldr	r1, [pc, #216]	; (16328 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3fc>)
   1624e:	4837      	ldr	r0, [pc, #220]	; (1632c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x400>)
   16250:	f7fe f8b8 	bl	143c4 <printf>
      LOG_ERROR("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
   16254:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16258:	f003 0302 	and.w	r3, r3, #2
   1625c:	2b00      	cmp	r3, #0
   1625e:	bf14      	ite	ne
   16260:	2301      	movne	r3, #1
   16262:	2300      	moveq	r3, #0
   16264:	b2da      	uxtb	r2, r3
   16266:	ab05      	add	r3, sp, #20
   16268:	4611      	mov	r1, r2
   1626a:	6818      	ldr	r0, [r3, #0]
   1626c:	f7ff fde2 	bl	15e34 <Sd::ToBool(bool)>
   16270:	4603      	mov	r3, r0
   16272:	9300      	str	r3, [sp, #0]
   16274:	f240 330f 	movw	r3, #783	; 0x30f
   16278:	4a20      	ldr	r2, [pc, #128]	; (162fc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   1627a:	492d      	ldr	r1, [pc, #180]	; (16330 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x404>)
   1627c:	482d      	ldr	r0, [pc, #180]	; (16334 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x408>)
   1627e:	f7fe f8a1 	bl	143c4 <printf>
      LOG_ERROR("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
   16282:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   16286:	f003 0301 	and.w	r3, r3, #1
   1628a:	2b00      	cmp	r3, #0
   1628c:	bf14      	ite	ne
   1628e:	2301      	movne	r3, #1
   16290:	2300      	moveq	r3, #0
   16292:	b2da      	uxtb	r2, r3
   16294:	ab05      	add	r3, sp, #20
   16296:	4611      	mov	r1, r2
   16298:	6818      	ldr	r0, [r3, #0]
   1629a:	f7ff fdcb 	bl	15e34 <Sd::ToBool(bool)>
   1629e:	4603      	mov	r3, r0
   162a0:	9300      	str	r3, [sp, #0]
   162a2:	f44f 7344 	mov.w	r3, #784	; 0x310
   162a6:	4a15      	ldr	r2, [pc, #84]	; (162fc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3d0>)
   162a8:	4923      	ldr	r1, [pc, #140]	; (16338 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x40c>)
   162aa:	4824      	ldr	r0, [pc, #144]	; (1633c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x410>)
   162ac:	f7fe f88a 	bl	143c4 <printf>
    LOG_DEBUG("Now waiting for SD Card to exit Idle Mode...");
    do
    {
      // Query the status register
      sd.response.length = SendCmd(Command::kGetStatus, 32,
                                   sd.response.data.byte, 0, KeepAlive::kNo);
   162b0:	ab05      	add	r3, sp, #20
   162b2:	681b      	ldr	r3, [r3, #0]
   162b4:	681b      	ldr	r3, [r3, #0]
   162b6:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kGetStatus, 32,
   162b8:	ab86      	add	r3, sp, #536	; 0x218
   162ba:	f103 0208 	add.w	r2, r3, #8
   162be:	a805      	add	r0, sp, #20
   162c0:	2300      	movs	r3, #0
   162c2:	9301      	str	r3, [sp, #4]
   162c4:	2300      	movs	r3, #0
   162c6:	9300      	str	r3, [sp, #0]
   162c8:	4613      	mov	r3, r2
   162ca:	2220      	movs	r2, #32
   162cc:	210d      	movs	r1, #13
   162ce:	6800      	ldr	r0, [r0, #0]
   162d0:	47a0      	blx	r4
   162d2:	4603      	mov	r3, r0
   162d4:	938a      	str	r3, [sp, #552]	; 0x228
    } while (sd.response.data.byte[0] & 0x01);
   162d6:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
   162da:	f003 0301 	and.w	r3, r3, #1
   162de:	2b00      	cmp	r3, #0
   162e0:	d000      	beq.n	162e4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x3b8>
    do
   162e2:	e7e5      	b.n	162b0 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x384>
    LOG_DEBUG("SD Card is out of Idle Mode!");

    // Return the status
    LOG_DEBUG("Read Complete! [R1 Response: 0x%02X]", sd.response.data.byte[0]);
    return sd.response.data.byte[0];
   162e4:	f89d 4220 	ldrb.w	r4, [sp, #544]	; 0x220
   162e8:	462b      	mov	r3, r5
   162ea:	4619      	mov	r1, r3
   162ec:	4814      	ldr	r0, [pc, #80]	; (16340 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)+0x414>)
   162ee:	f7fc fe1d 	bl	12f2c <__cyg_profile_func_exit>
   162f2:	4623      	mov	r3, r4
  }
   162f4:	4618      	mov	r0, r3
   162f6:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
   162fa:	bd30      	pop	{r4, r5, pc}
   162fc:	00019378 	.word	0x00019378
   16300:	00019094 	.word	0x00019094
   16304:	000188fc 	.word	0x000188fc
   16308:	0001909c 	.word	0x0001909c
   1630c:	00018960 	.word	0x00018960
   16310:	000190a4 	.word	0x000190a4
   16314:	000189ac 	.word	0x000189ac
   16318:	000190ac 	.word	0x000190ac
   1631c:	000189f4 	.word	0x000189f4
   16320:	000190b4 	.word	0x000190b4
   16324:	00018a40 	.word	0x00018a40
   16328:	000190bc 	.word	0x000190bc
   1632c:	00018a8c 	.word	0x00018a8c
   16330:	000190c4 	.word	0x000190c4
   16334:	00018adc 	.word	0x00018adc
   16338:	000190cc 	.word	0x000190cc
   1633c:	00018b28 	.word	0x00018b28
   16340:	00015f2d 	.word	0x00015f2d

00016344 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)>:

  // Writes any number of 512-byte blocks to the SD Card
  uint8_t WriteBlock(uint32_t address, const uint8_t * array,
   16344:	b530      	push	{r4, r5, lr}
   16346:	b095      	sub	sp, #84	; 0x54
   16348:	4675      	mov	r5, lr
   1634a:	9005      	str	r0, [sp, #20]
   1634c:	9104      	str	r1, [sp, #16]
   1634e:	9203      	str	r2, [sp, #12]
   16350:	9302      	str	r3, [sp, #8]
   16352:	462b      	mov	r3, r5
   16354:	4619      	mov	r1, r3
   16356:	4865      	ldr	r0, [pc, #404]	; (164ec <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   16358:	f7fc fdd4 	bl	12f04 <__cyg_profile_func_enter>
                     uint32_t blocks = 1) override
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   1635c:	9805      	ldr	r0, [sp, #20]
   1635e:	f7ff fdbd 	bl	15edc <Sd::WaitWhileBusy()>
    Sd::CardInfo_t sd;

    // Determine appropriate command and start token to send
    Command write_cmd;
    uint8_t write_start_tkn;
    if (blocks > 1)
   16362:	9b02      	ldr	r3, [sp, #8]
   16364:	2b01      	cmp	r3, #1
   16366:	d905      	bls.n	16374 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x30>
    {
      write_cmd       = Command::kWriteMulti;
   16368:	2359      	movs	r3, #89	; 0x59
   1636a:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFC;
   1636c:	23fc      	movs	r3, #252	; 0xfc
   1636e:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
   16372:	e004      	b.n	1637e <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x3a>
    }
    else
    {
      write_cmd       = Command::kWriteSingle;
   16374:	2358      	movs	r3, #88	; 0x58
   16376:	9313      	str	r3, [sp, #76]	; 0x4c
      write_start_tkn = 0xFE;
   16378:	23fe      	movs	r3, #254	; 0xfe
   1637a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
    }

    // Send initial write command
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
                                 KeepAlive::kYes);
   1637e:	9b05      	ldr	r3, [sp, #20]
   16380:	681b      	ldr	r3, [r3, #0]
   16382:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(write_cmd, address, sd.response.data.byte, 100,
   16384:	ab06      	add	r3, sp, #24
   16386:	f103 0208 	add.w	r2, r3, #8
   1638a:	2301      	movs	r3, #1
   1638c:	9301      	str	r3, [sp, #4]
   1638e:	2364      	movs	r3, #100	; 0x64
   16390:	9300      	str	r3, [sp, #0]
   16392:	4613      	mov	r3, r2
   16394:	9a04      	ldr	r2, [sp, #16]
   16396:	9913      	ldr	r1, [sp, #76]	; 0x4c
   16398:	9805      	ldr	r0, [sp, #20]
   1639a:	47a0      	blx	r4
   1639c:	4603      	mov	r3, r0
   1639e:	930a      	str	r3, [sp, #40]	; 0x28
    LOG_DEBUG("Sent Write Cmd");
    LOG_DEBUG("[R1 Response:0x%02X]", sd.response.data.byte[0]);

    // Check if the response was acknowledged properly
    if (sd.response.data.byte[0] == 0x00)
   163a0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   163a4:	2b00      	cmp	r3, #0
   163a6:	f040 8096 	bne.w	164d6 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
    {
      // If no errors, proceed write given block(s) to SD Card
      // For each given block
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   163aa:	2300      	movs	r3, #0
   163ac:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   163b0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   163b4:	9a02      	ldr	r2, [sp, #8]
   163b6:	429a      	cmp	r2, r3
   163b8:	d97a      	bls.n	164b0 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x16c>
           current_block_num++)
      {
        // Calculate array offset
        uint64_t arr_offset = current_block_num * kBlockSize;
   163ba:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   163be:	025b      	lsls	r3, r3, #9
   163c0:	ea4f 74e3 	mov.w	r4, r3, asr #31
   163c4:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38

        // Send the start token for the current block
        ssp_interface_->Transfer(write_start_tkn);
   163c8:	9b05      	ldr	r3, [sp, #20]
   163ca:	685a      	ldr	r2, [r3, #4]
   163cc:	9b05      	ldr	r3, [sp, #20]
   163ce:	685b      	ldr	r3, [r3, #4]
   163d0:	681b      	ldr	r3, [r3, #0]
   163d2:	3308      	adds	r3, #8
   163d4:	681b      	ldr	r3, [r3, #0]
   163d6:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
   163da:	b289      	uxth	r1, r1
   163dc:	4610      	mov	r0, r2
   163de:	4798      	blx	r3

        // Write all 512-bytes of the given block
        LOG_DEBUG("Writing block #%d", current_block_num);
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   163e0:	2300      	movs	r3, #0
   163e2:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   163e6:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   163ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   163ee:	d216      	bcs.n	1641e <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xda>
             current_byte++)
        {
          ssp_interface_->Transfer(array[arr_offset + current_byte]);
   163f0:	9b05      	ldr	r3, [sp, #20]
   163f2:	6858      	ldr	r0, [r3, #4]
   163f4:	9b05      	ldr	r3, [sp, #20]
   163f6:	685b      	ldr	r3, [r3, #4]
   163f8:	681b      	ldr	r3, [r3, #0]
   163fa:	3308      	adds	r3, #8
   163fc:	681b      	ldr	r3, [r3, #0]
   163fe:	990e      	ldr	r1, [sp, #56]	; 0x38
   16400:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
   16404:	440a      	add	r2, r1
   16406:	9903      	ldr	r1, [sp, #12]
   16408:	440a      	add	r2, r1
   1640a:	7812      	ldrb	r2, [r2, #0]
   1640c:	b292      	uxth	r2, r2
   1640e:	4611      	mov	r1, r2
   16410:	4798      	blx	r3
        for (uint16_t current_byte = 0; current_byte < kBlockSize;
   16412:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   16416:	3301      	adds	r3, #1
   16418:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   1641c:	e7e3      	b.n	163e6 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0xa2>
        }

        // Read the data response token after writing the block
        uint8_t data_response_tkn =
            static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   1641e:	9b05      	ldr	r3, [sp, #20]
   16420:	685a      	ldr	r2, [r3, #4]
   16422:	9b05      	ldr	r3, [sp, #20]
   16424:	685b      	ldr	r3, [r3, #4]
   16426:	681b      	ldr	r3, [r3, #0]
   16428:	3308      	adds	r3, #8
   1642a:	681b      	ldr	r3, [r3, #0]
   1642c:	21ff      	movs	r1, #255	; 0xff
   1642e:	4610      	mov	r0, r2
   16430:	4798      	blx	r3
   16432:	4603      	mov	r3, r0
   16434:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                  ToBool(data_response_tkn & 0x0B));
        LOG_DEBUG("Data Rejected (write err)?: %s",
                  ToBool(data_response_tkn & 0x0D));

        // If writing multiple blocks and the previous block was rejected
        if (blocks > 1 && !(data_response_tkn & 0x05))
   16438:	9b02      	ldr	r3, [sp, #8]
   1643a:	2b01      	cmp	r3, #1
   1643c:	d92f      	bls.n	1649e <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
   1643e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   16442:	f003 0305 	and.w	r3, r3, #5
   16446:	2b00      	cmp	r3, #0
   16448:	d129      	bne.n	1649e <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
        {
          // Send an immediate stop (CMD12)
          sd.response.length =
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
                      100, KeepAlive::kYes);
   1644a:	9b05      	ldr	r3, [sp, #20]
   1644c:	681b      	ldr	r3, [r3, #0]
   1644e:	681c      	ldr	r4, [r3, #0]
              SendCmd(Command::kStopTrans, 0xFFFFFFFF, sd.response.data.byte,
   16450:	ab06      	add	r3, sp, #24
   16452:	f103 0208 	add.w	r2, r3, #8
   16456:	2301      	movs	r3, #1
   16458:	9301      	str	r3, [sp, #4]
   1645a:	2364      	movs	r3, #100	; 0x64
   1645c:	9300      	str	r3, [sp, #0]
   1645e:	4613      	mov	r3, r2
   16460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16464:	214c      	movs	r1, #76	; 0x4c
   16466:	9805      	ldr	r0, [sp, #20]
   16468:	47a0      	blx	r4
   1646a:	4603      	mov	r3, r0
          sd.response.length =
   1646c:	930a      	str	r3, [sp, #40]	; 0x28
          LOG_DEBUG("Stopped Transmission due to rejection...");
          LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);

          // In the case of a write error, ask for the reason why
          if (data_response_tkn & 0x0D)
   1646e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   16472:	f003 030d 	and.w	r3, r3, #13
   16476:	2b00      	cmp	r3, #0
   16478:	d011      	beq.n	1649e <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x15a>
          {
            sd.response.length =
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
                        100, KeepAlive::kYes);
   1647a:	9b05      	ldr	r3, [sp, #20]
   1647c:	681b      	ldr	r3, [r3, #0]
   1647e:	681c      	ldr	r4, [r3, #0]
                SendCmd(Command::kGetStatus, 0xFFFFFFFF, sd.response.data.byte,
   16480:	ab06      	add	r3, sp, #24
   16482:	f103 0208 	add.w	r2, r3, #8
   16486:	2301      	movs	r3, #1
   16488:	9301      	str	r3, [sp, #4]
   1648a:	2364      	movs	r3, #100	; 0x64
   1648c:	9300      	str	r3, [sp, #0]
   1648e:	4613      	mov	r3, r2
   16490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16494:	210d      	movs	r1, #13
   16496:	9805      	ldr	r0, [sp, #20]
   16498:	47a0      	blx	r4
   1649a:	4603      	mov	r3, r0
            sd.response.length =
   1649c:	930a      	str	r3, [sp, #40]	; 0x28
                "Checking Status Register to see cause of Write Error...");
            LOG_DEBUG("[R2 Response: 0x%04" PRIX32 "]",
                      sd.response.data.dWord.lo);
          }
        }
        WaitWhileBusy();
   1649e:	9805      	ldr	r0, [sp, #20]
   164a0:	f7ff fd1c 	bl	15edc <Sd::WaitWhileBusy()>
      for (uint16_t current_block_num = 0; current_block_num < blocks;
   164a4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   164a8:	3301      	adds	r3, #1
   164aa:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   164ae:	e77f      	b.n	163b0 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x6c>
      }

      if (blocks > 1)
   164b0:	9b02      	ldr	r3, [sp, #8]
   164b2:	2b01      	cmp	r3, #1
   164b4:	d90f      	bls.n	164d6 <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x192>
      {
        constexpr uint8_t kStopToken = 0xFD;
   164b6:	23fd      	movs	r3, #253	; 0xfd
   164b8:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
        ssp_interface_->Transfer(kStopToken);
   164bc:	9b05      	ldr	r3, [sp, #20]
   164be:	685a      	ldr	r2, [r3, #4]
   164c0:	9b05      	ldr	r3, [sp, #20]
   164c2:	685b      	ldr	r3, [r3, #4]
   164c4:	681b      	ldr	r3, [r3, #0]
   164c6:	3308      	adds	r3, #8
   164c8:	681b      	ldr	r3, [r3, #0]
   164ca:	21fd      	movs	r1, #253	; 0xfd
   164cc:	4610      	mov	r0, r2
   164ce:	4798      	blx	r3

        // Wait for the card's programming to complete before
        // reselecting it (i.e. to prevent corruption)
        WaitWhileBusy();
   164d0:	9805      	ldr	r0, [sp, #20]
   164d2:	f7ff fd03 	bl	15edc <Sd::WaitWhileBusy()>
      LOG_DEBUG("Illegal Cmd Err: %s", ToBool(sd.response.data.byte[0] & 0x04));
      LOG_DEBUG("Erase Reset: %s", ToBool(sd.response.data.byte[0] & 0x02));
      LOG_DEBUG("In Idle: %s", ToBool(sd.response.data.byte[0] & 0x01));
    }

    return sd.response.data.byte[0];
   164d6:	f89d 4020 	ldrb.w	r4, [sp, #32]
   164da:	462b      	mov	r3, r5
   164dc:	4619      	mov	r1, r3
   164de:	4803      	ldr	r0, [pc, #12]	; (164ec <Sd::WriteBlock(unsigned long, unsigned char const*, unsigned long)+0x1a8>)
   164e0:	f7fc fd24 	bl	12f2c <__cyg_profile_func_exit>
   164e4:	4623      	mov	r3, r4
  }
   164e6:	4618      	mov	r0, r3
   164e8:	b015      	add	sp, #84	; 0x54
   164ea:	bd30      	pop	{r4, r5, pc}
   164ec:	00016345 	.word	0x00016345

000164f0 <Sd::DeleteBlock(unsigned long, unsigned long)>:

  // Deletes any number of blocks (inclusively) within a range of address.
  uint8_t DeleteBlock(uint32_t start, uint32_t end) override
   164f0:	b530      	push	{r4, r5, lr}
   164f2:	b08f      	sub	sp, #60	; 0x3c
   164f4:	4675      	mov	r5, lr
   164f6:	9005      	str	r0, [sp, #20]
   164f8:	9104      	str	r1, [sp, #16]
   164fa:	9203      	str	r2, [sp, #12]
   164fc:	462b      	mov	r3, r5
   164fe:	4619      	mov	r1, r3
   16500:	483d      	ldr	r0, [pc, #244]	; (165f8 <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   16502:	f7fc fcff 	bl	12f04 <__cyg_profile_func_enter>
  {
    // Wait for a previous command to finish
    WaitWhileBusy();
   16506:	9805      	ldr	r0, [sp, #20]
   16508:	f7ff fce8 	bl	15edc <Sd::WaitWhileBusy()>

    // Create a temporary storage location to store sd command responses
    Sd::CardInfo_t sd;
    bool delete_failed = false;
   1650c:	2300      	movs	r3, #0
   1650e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

    // Set the delete start address
    LOG_DEBUG("Setting Delete Start Address...");
    sd.response.length = SendCmd(Command::kDelFrom, start,
                                 sd.response.data.byte, 100, KeepAlive::kYes);
   16512:	9b05      	ldr	r3, [sp, #20]
   16514:	681b      	ldr	r3, [r3, #0]
   16516:	681c      	ldr	r4, [r3, #0]
    sd.response.length = SendCmd(Command::kDelFrom, start,
   16518:	ab06      	add	r3, sp, #24
   1651a:	f103 0208 	add.w	r2, r3, #8
   1651e:	2301      	movs	r3, #1
   16520:	9301      	str	r3, [sp, #4]
   16522:	2364      	movs	r3, #100	; 0x64
   16524:	9300      	str	r3, [sp, #0]
   16526:	4613      	mov	r3, r2
   16528:	9a04      	ldr	r2, [sp, #16]
   1652a:	2160      	movs	r1, #96	; 0x60
   1652c:	9805      	ldr	r0, [sp, #20]
   1652e:	47a0      	blx	r4
   16530:	4603      	mov	r3, r0
   16532:	930a      	str	r3, [sp, #40]	; 0x28

    // Wait while the writing the start address
    WaitWhileBusy();
   16534:	9805      	ldr	r0, [sp, #20]
   16536:	f7ff fcd1 	bl	15edc <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   1653a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1653e:	2b00      	cmp	r3, #0
   16540:	d009      	beq.n	16556 <Sd::DeleteBlock(unsigned long, unsigned long)+0x66>
    {
      LOG_ERROR("Failed to set Start Address!");
   16542:	f44f 736a 	mov.w	r3, #936	; 0x3a8
   16546:	4a2d      	ldr	r2, [pc, #180]	; (165fc <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   16548:	492d      	ldr	r1, [pc, #180]	; (16600 <Sd::DeleteBlock(unsigned long, unsigned long)+0x110>)
   1654a:	482e      	ldr	r0, [pc, #184]	; (16604 <Sd::DeleteBlock(unsigned long, unsigned long)+0x114>)
   1654c:	f7fd ff3a 	bl	143c4 <printf>
      delete_failed = true;
   16550:	2301      	movs	r3, #1
   16552:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Set the delete end address
    if (!delete_failed)
   16556:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1655a:	f083 0301 	eor.w	r3, r3, #1
   1655e:	b2db      	uxtb	r3, r3
   16560:	2b00      	cmp	r3, #0
   16562:	d010      	beq.n	16586 <Sd::DeleteBlock(unsigned long, unsigned long)+0x96>
    {
      LOG_DEBUG("Setting Delete End Address...");
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
                                   100, KeepAlive::kYes);
   16564:	9b05      	ldr	r3, [sp, #20]
   16566:	681b      	ldr	r3, [r3, #0]
   16568:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDelTo, end, sd.response.data.byte,
   1656a:	ab06      	add	r3, sp, #24
   1656c:	f103 0208 	add.w	r2, r3, #8
   16570:	2301      	movs	r3, #1
   16572:	9301      	str	r3, [sp, #4]
   16574:	2364      	movs	r3, #100	; 0x64
   16576:	9300      	str	r3, [sp, #0]
   16578:	4613      	mov	r3, r2
   1657a:	9a03      	ldr	r2, [sp, #12]
   1657c:	2161      	movs	r1, #97	; 0x61
   1657e:	9805      	ldr	r0, [sp, #20]
   16580:	47a0      	blx	r4
   16582:	4603      	mov	r3, r0
   16584:	930a      	str	r3, [sp, #40]	; 0x28
    }

    // Wait while the writing the end address
    WaitWhileBusy();
   16586:	9805      	ldr	r0, [sp, #20]
   16588:	f7ff fca8 	bl	15edc <Sd::WaitWhileBusy()>

    // Force return if an error occurred
    if (sd.response.data.byte[0] != 0x00)
   1658c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   16590:	2b00      	cmp	r3, #0
   16592:	d009      	beq.n	165a8 <Sd::DeleteBlock(unsigned long, unsigned long)+0xb8>
    {
      LOG_ERROR("Failed to set End Address!");
   16594:	f240 33ba 	movw	r3, #954	; 0x3ba
   16598:	4a18      	ldr	r2, [pc, #96]	; (165fc <Sd::DeleteBlock(unsigned long, unsigned long)+0x10c>)
   1659a:	491b      	ldr	r1, [pc, #108]	; (16608 <Sd::DeleteBlock(unsigned long, unsigned long)+0x118>)
   1659c:	481b      	ldr	r0, [pc, #108]	; (1660c <Sd::DeleteBlock(unsigned long, unsigned long)+0x11c>)
   1659e:	f7fd ff11 	bl	143c4 <printf>
      delete_failed = true;
   165a2:	2301      	movs	r3, #1
   165a4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    }

    // Finally, attempt a delete
    if (!delete_failed)
   165a8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   165ac:	f083 0301 	eor.w	r3, r3, #1
   165b0:	b2db      	uxtb	r3, r3
   165b2:	2b00      	cmp	r3, #0
   165b4:	d014      	beq.n	165e0 <Sd::DeleteBlock(unsigned long, unsigned long)+0xf0>
    {
      // Issue the delete command to delete from our from:to range
      LOG_DEBUG("Issuing Delete Command...");
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
                                   sd.response.data.byte, 100, KeepAlive::kYes);
   165b6:	9b05      	ldr	r3, [sp, #20]
   165b8:	681b      	ldr	r3, [r3, #0]
   165ba:	681c      	ldr	r4, [r3, #0]
      sd.response.length = SendCmd(Command::kDel, 0xFFFFFFFF,
   165bc:	ab06      	add	r3, sp, #24
   165be:	f103 0208 	add.w	r2, r3, #8
   165c2:	2301      	movs	r3, #1
   165c4:	9301      	str	r3, [sp, #4]
   165c6:	2364      	movs	r3, #100	; 0x64
   165c8:	9300      	str	r3, [sp, #0]
   165ca:	4613      	mov	r3, r2
   165cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   165d0:	2166      	movs	r1, #102	; 0x66
   165d2:	9805      	ldr	r0, [sp, #20]
   165d4:	47a0      	blx	r4
   165d6:	4603      	mov	r3, r0
   165d8:	930a      	str	r3, [sp, #40]	; 0x28

      // Wait while the deletion occurs
      WaitWhileBusy();
   165da:	9805      	ldr	r0, [sp, #20]
   165dc:	f7ff fc7e 	bl	15edc <Sd::WaitWhileBusy()>
      LOG_DEBUG("[R1 Response: 0x%02X]", sd.response.data.byte[0]);
      LOG_DEBUG("Deletion Complete...");
    }

    // Return status
    return sd.response.data.byte[0];
   165e0:	f89d 4020 	ldrb.w	r4, [sp, #32]
   165e4:	462b      	mov	r3, r5
   165e6:	4619      	mov	r1, r3
   165e8:	4803      	ldr	r0, [pc, #12]	; (165f8 <Sd::DeleteBlock(unsigned long, unsigned long)+0x108>)
   165ea:	f7fc fc9f 	bl	12f2c <__cyg_profile_func_exit>
   165ee:	4623      	mov	r3, r4
  }
   165f0:	4618      	mov	r0, r3
   165f2:	b00f      	add	sp, #60	; 0x3c
   165f4:	bd30      	pop	{r4, r5, pc}
   165f6:	bf00      	nop
   165f8:	000164f1 	.word	0x000164f1
   165fc:	000193b4 	.word	0x000193b4
   16600:	000190d4 	.word	0x000190d4
   16604:	00018b70 	.word	0x00018b70
   16608:	000190dc 	.word	0x000190dc
   1660c:	00018bc8 	.word	0x00018bc8

00016610 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)>:

  // Send a command
  uint32_t SendCmd(Command sdc, uint32_t arg, uint8_t response_buffer[],
   16610:	e92d 49f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp, lr}
   16614:	b08f      	sub	sp, #60	; 0x3c
   16616:	46f0      	mov	r8, lr
   16618:	9003      	str	r0, [sp, #12]
   1661a:	9102      	str	r1, [sp, #8]
   1661c:	9201      	str	r2, [sp, #4]
   1661e:	9300      	str	r3, [sp, #0]
   16620:	4643      	mov	r3, r8
   16622:	4619      	mov	r1, r3
   16624:	4840      	ldr	r0, [pc, #256]	; (16728 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x118>)
   16626:	f7fc fc6d 	bl	12f04 <__cyg_profile_func_enter>
                   uint32_t delay, KeepAlive keep_alive) override
  {
    ResponseType res_type;
    uint8_t res_len    = 0;
   1662a:	2300      	movs	r3, #0
   1662c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    uint8_t crc        = 0;
   16630:	2300      	movs	r3, #0
   16632:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    uint8_t tries      = 0;
   16636:	2300      	movs	r3, #0
   16638:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    uint8_t bit_offset = 0;  // determines the distance of the response's
   1663c:	2300      	movs	r3, #0
   1663e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                             // 0 bit from the MSB place
    uint8_t temp_byte = 0;
   16642:	2300      	movs	r3, #0
   16644:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

    // Determine the response type of the set command
    switch (sdc)
   16648:	9b02      	ldr	r3, [sp, #8]
   1664a:	2b58      	cmp	r3, #88	; 0x58
   1664c:	d052      	beq.n	166f4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xe4>
   1664e:	2b58      	cmp	r3, #88	; 0x58
   16650:	dc16      	bgt.n	16680 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x70>
   16652:	2b48      	cmp	r3, #72	; 0x48
   16654:	d033      	beq.n	166be <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xae>
   16656:	2b48      	cmp	r3, #72	; 0x48
   16658:	dc06      	bgt.n	16668 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x58>
   1665a:	2b40      	cmp	r3, #64	; 0x40
   1665c:	d029      	beq.n	166b2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa2>
   1665e:	2b41      	cmp	r3, #65	; 0x41
   16660:	d02a      	beq.n	166b8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xa8>
   16662:	2b0d      	cmp	r3, #13
   16664:	d031      	beq.n	166ca <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xba>
   16666:	e054      	b.n	16712 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   16668:	2b50      	cmp	r3, #80	; 0x50
   1666a:	d03a      	beq.n	166e2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd2>
   1666c:	2b50      	cmp	r3, #80	; 0x50
   1666e:	dc02      	bgt.n	16676 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x66>
   16670:	2b4c      	cmp	r3, #76	; 0x4c
   16672:	d027      	beq.n	166c4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xb4>
   16674:	e04d      	b.n	16712 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   16676:	2b51      	cmp	r3, #81	; 0x51
   16678:	d036      	beq.n	166e8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xd8>
   1667a:	2b52      	cmp	r3, #82	; 0x52
   1667c:	d037      	beq.n	166ee <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xde>
   1667e:	e048      	b.n	16712 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   16680:	2b66      	cmp	r3, #102	; 0x66
   16682:	d043      	beq.n	1670c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xfc>
   16684:	2b66      	cmp	r3, #102	; 0x66
   16686:	dc06      	bgt.n	16696 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x86>
   16688:	2b60      	cmp	r3, #96	; 0x60
   1668a:	d039      	beq.n	16700 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf0>
   1668c:	2b61      	cmp	r3, #97	; 0x61
   1668e:	d03a      	beq.n	16706 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xf6>
   16690:	2b59      	cmp	r3, #89	; 0x59
   16692:	d032      	beq.n	166fa <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xea>
   16694:	e03d      	b.n	16712 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   16696:	2b77      	cmp	r3, #119	; 0x77
   16698:	d01a      	beq.n	166d0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc0>
   1669a:	2b77      	cmp	r3, #119	; 0x77
   1669c:	dc02      	bgt.n	166a4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x94>
   1669e:	2b69      	cmp	r3, #105	; 0x69
   166a0:	d019      	beq.n	166d6 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xc6>
   166a2:	e036      	b.n	16712 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
   166a4:	2b7a      	cmp	r3, #122	; 0x7a
   166a6:	d019      	beq.n	166dc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0xcc>
   166a8:	2bff      	cmp	r3, #255	; 0xff
   166aa:	d132      	bne.n	16712 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x102>
    {
      case Command::kGarbage: res_type = ResponseType::kR1; break;
   166ac:	2300      	movs	r3, #0
   166ae:	930d      	str	r3, [sp, #52]	; 0x34
   166b0:	e042      	b.n	16738 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReset: res_type = ResponseType::kR1; break;
   166b2:	2300      	movs	r3, #0
   166b4:	930d      	str	r3, [sp, #52]	; 0x34
   166b6:	e03f      	b.n	16738 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kInit: res_type = ResponseType::kR1; break;
   166b8:	2300      	movs	r3, #0
   166ba:	930d      	str	r3, [sp, #52]	; 0x34
   166bc:	e03c      	b.n	16738 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOp: res_type = ResponseType::kR7; break;
   166be:	2307      	movs	r3, #7
   166c0:	930d      	str	r3, [sp, #52]	; 0x34
   166c2:	e039      	b.n	16738 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kStopTrans: res_type = ResponseType::kR1; break;
   166c4:	2300      	movs	r3, #0
   166c6:	930d      	str	r3, [sp, #52]	; 0x34
   166c8:	e036      	b.n	16738 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetStatus: res_type = ResponseType::kR2; break;
   166ca:	2302      	movs	r3, #2
   166cc:	930d      	str	r3, [sp, #52]	; 0x34
   166ce:	e033      	b.n	16738 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcBegin: res_type = ResponseType::kR1; break;
   166d0:	2300      	movs	r3, #0
   166d2:	930d      	str	r3, [sp, #52]	; 0x34
   166d4:	e030      	b.n	16738 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kAcInit: res_type = ResponseType::kR1; break;
   166d6:	2300      	movs	r3, #0
   166d8:	930d      	str	r3, [sp, #52]	; 0x34
   166da:	e02d      	b.n	16738 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kGetOcr: res_type = ResponseType::kR3; break;
   166dc:	2303      	movs	r3, #3
   166de:	930d      	str	r3, [sp, #52]	; 0x34
   166e0:	e02a      	b.n	16738 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kChgBlkLen: res_type = ResponseType::kR1; break;
   166e2:	2300      	movs	r3, #0
   166e4:	930d      	str	r3, [sp, #52]	; 0x34
   166e6:	e027      	b.n	16738 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadSingle: res_type = ResponseType::kR1; break;
   166e8:	2300      	movs	r3, #0
   166ea:	930d      	str	r3, [sp, #52]	; 0x34
   166ec:	e024      	b.n	16738 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kReadMulti: res_type = ResponseType::kR1; break;
   166ee:	2300      	movs	r3, #0
   166f0:	930d      	str	r3, [sp, #52]	; 0x34
   166f2:	e021      	b.n	16738 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteSingle: res_type = ResponseType::kR1; break;
   166f4:	2300      	movs	r3, #0
   166f6:	930d      	str	r3, [sp, #52]	; 0x34
   166f8:	e01e      	b.n	16738 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kWriteMulti: res_type = ResponseType::kR1; break;
   166fa:	2300      	movs	r3, #0
   166fc:	930d      	str	r3, [sp, #52]	; 0x34
   166fe:	e01b      	b.n	16738 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelFrom: res_type = ResponseType::kR1; break;
   16700:	2300      	movs	r3, #0
   16702:	930d      	str	r3, [sp, #52]	; 0x34
   16704:	e018      	b.n	16738 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDelTo: res_type = ResponseType::kR1; break;
   16706:	2300      	movs	r3, #0
   16708:	930d      	str	r3, [sp, #52]	; 0x34
   1670a:	e015      	b.n	16738 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      case Command::kDel: res_type = ResponseType::kR1b; break;
   1670c:	2301      	movs	r3, #1
   1670e:	930d      	str	r3, [sp, #52]	; 0x34
   16710:	e012      	b.n	16738 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x128>
      default:
        LOG_ERROR("Unknown response type. Aborting!");
   16712:	f240 33f3 	movw	r3, #1011	; 0x3f3
   16716:	4a05      	ldr	r2, [pc, #20]	; (1672c <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x11c>)
   16718:	4905      	ldr	r1, [pc, #20]	; (16730 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x120>)
   1671a:	4806      	ldr	r0, [pc, #24]	; (16734 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x124>)
   1671c:	f7fd fe52 	bl	143c4 <printf>
        return -1;
   16720:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16724:	e1b1      	b.n	16a8a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
   16726:	bf00      	nop
   16728:	00016611 	.word	0x00016611
   1672c:	000193e8 	.word	0x000193e8
   16730:	000190e4 	.word	0x000190e4
   16734:	00018c1c 	.word	0x00018c1c
    // algorithm
    uint8_t msg[5] = { static_cast<uint8_t>(sdc),
                       static_cast<uint8_t>(arg >> 24),
                       static_cast<uint8_t>(arg >> 16),
                       static_cast<uint8_t>(arg >> 8),
                       static_cast<uint8_t>(arg >> 0) };
   16738:	9b02      	ldr	r3, [sp, #8]
   1673a:	b2db      	uxtb	r3, r3
   1673c:	f88d 3010 	strb.w	r3, [sp, #16]
                       static_cast<uint8_t>(arg >> 24),
   16740:	9b01      	ldr	r3, [sp, #4]
   16742:	0e1b      	lsrs	r3, r3, #24
                       static_cast<uint8_t>(arg >> 0) };
   16744:	b2db      	uxtb	r3, r3
   16746:	f88d 3011 	strb.w	r3, [sp, #17]
                       static_cast<uint8_t>(arg >> 16),
   1674a:	9b01      	ldr	r3, [sp, #4]
   1674c:	0c1b      	lsrs	r3, r3, #16
                       static_cast<uint8_t>(arg >> 0) };
   1674e:	b2db      	uxtb	r3, r3
   16750:	f88d 3012 	strb.w	r3, [sp, #18]
                       static_cast<uint8_t>(arg >> 8),
   16754:	9b01      	ldr	r3, [sp, #4]
   16756:	0a1b      	lsrs	r3, r3, #8
                       static_cast<uint8_t>(arg >> 0) };
   16758:	b2db      	uxtb	r3, r3
   1675a:	f88d 3013 	strb.w	r3, [sp, #19]
   1675e:	9b01      	ldr	r3, [sp, #4]
   16760:	b2db      	uxtb	r3, r3
   16762:	f88d 3014 	strb.w	r3, [sp, #20]

    crc = GetCrc7(msg, sizeof(msg));
   16766:	9b03      	ldr	r3, [sp, #12]
   16768:	681b      	ldr	r3, [r3, #0]
   1676a:	331c      	adds	r3, #28
   1676c:	681b      	ldr	r3, [r3, #0]
   1676e:	a904      	add	r1, sp, #16
   16770:	2205      	movs	r2, #5
   16772:	9803      	ldr	r0, [sp, #12]
   16774:	4798      	blx	r3
   16776:	4603      	mov	r3, r0
   16778:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    if (sdc == Command::kGarbage)
   1677c:	9b02      	ldr	r3, [sp, #8]
   1677e:	2bff      	cmp	r3, #255	; 0xff
   16780:	d102      	bne.n	16788 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x178>
    {
      crc = 0xFF;
   16782:	23ff      	movs	r3, #255	; 0xff
   16784:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    // Select the SD Card
    chip_select_->SetLow();
   16788:	9b03      	ldr	r3, [sp, #12]
   1678a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1678c:	9b03      	ldr	r3, [sp, #12]
   1678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16790:	681b      	ldr	r3, [r3, #0]
   16792:	3310      	adds	r3, #16
   16794:	681b      	ldr	r3, [r3, #0]
   16796:	4610      	mov	r0, r2
   16798:	4798      	blx	r3
    chip_select_external_->SetLow();
   1679a:	9b03      	ldr	r3, [sp, #12]
   1679c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1679e:	9b03      	ldr	r3, [sp, #12]
   167a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   167a2:	681b      	ldr	r3, [r3, #0]
   167a4:	3310      	adds	r3, #16
   167a6:	681b      	ldr	r3, [r3, #0]
   167a8:	4610      	mov	r0, r2
   167aa:	4798      	blx	r3

    // If desired, wait a bit before talking
    if (delay > 0)
   167ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
   167ae:	2b00      	cmp	r3, #0
   167b0:	d007      	beq.n	167c2 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x1b2>
    {
      Delay(delay);
   167b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   167b4:	461a      	mov	r2, r3
   167b6:	f04f 0300 	mov.w	r3, #0
   167ba:	4610      	mov	r0, r2
   167bc:	4619      	mov	r1, r3
   167be:	f7fa f805 	bl	107cc <Delay(unsigned long long)>
    }

    // Send the desired command frame to the SD card board
    // Begin by transfering the command byte
    ssp_interface_->Transfer(static_cast<uint16_t>(sdc));
   167c2:	9b03      	ldr	r3, [sp, #12]
   167c4:	685a      	ldr	r2, [r3, #4]
   167c6:	9b03      	ldr	r3, [sp, #12]
   167c8:	685b      	ldr	r3, [r3, #4]
   167ca:	681b      	ldr	r3, [r3, #0]
   167cc:	3308      	adds	r3, #8
   167ce:	681b      	ldr	r3, [r3, #0]
   167d0:	9902      	ldr	r1, [sp, #8]
   167d2:	b289      	uxth	r1, r1
   167d4:	4610      	mov	r0, r2
   167d6:	4798      	blx	r3
    // Send arg byte [31:24]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 24) & 0xFF);
   167d8:	9b03      	ldr	r3, [sp, #12]
   167da:	6858      	ldr	r0, [r3, #4]
   167dc:	9b03      	ldr	r3, [sp, #12]
   167de:	685b      	ldr	r3, [r3, #4]
   167e0:	681b      	ldr	r3, [r3, #0]
   167e2:	3308      	adds	r3, #8
   167e4:	681b      	ldr	r3, [r3, #0]
   167e6:	9a01      	ldr	r2, [sp, #4]
   167e8:	0e12      	lsrs	r2, r2, #24
   167ea:	b292      	uxth	r2, r2
   167ec:	b2d2      	uxtb	r2, r2
   167ee:	b292      	uxth	r2, r2
   167f0:	4611      	mov	r1, r2
   167f2:	4798      	blx	r3
    // Send arg byte [23:16]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 16) & 0xFF);
   167f4:	9b03      	ldr	r3, [sp, #12]
   167f6:	6858      	ldr	r0, [r3, #4]
   167f8:	9b03      	ldr	r3, [sp, #12]
   167fa:	685b      	ldr	r3, [r3, #4]
   167fc:	681b      	ldr	r3, [r3, #0]
   167fe:	3308      	adds	r3, #8
   16800:	681b      	ldr	r3, [r3, #0]
   16802:	9a01      	ldr	r2, [sp, #4]
   16804:	0c12      	lsrs	r2, r2, #16
   16806:	b292      	uxth	r2, r2
   16808:	b2d2      	uxtb	r2, r2
   1680a:	b292      	uxth	r2, r2
   1680c:	4611      	mov	r1, r2
   1680e:	4798      	blx	r3
    // Send arg byte [15:8]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 8) & 0xFF);
   16810:	9b03      	ldr	r3, [sp, #12]
   16812:	6858      	ldr	r0, [r3, #4]
   16814:	9b03      	ldr	r3, [sp, #12]
   16816:	685b      	ldr	r3, [r3, #4]
   16818:	681b      	ldr	r3, [r3, #0]
   1681a:	3308      	adds	r3, #8
   1681c:	681b      	ldr	r3, [r3, #0]
   1681e:	9a01      	ldr	r2, [sp, #4]
   16820:	0a12      	lsrs	r2, r2, #8
   16822:	b292      	uxth	r2, r2
   16824:	b2d2      	uxtb	r2, r2
   16826:	b292      	uxth	r2, r2
   16828:	4611      	mov	r1, r2
   1682a:	4798      	blx	r3
    // Send arg byte [7:0]
    ssp_interface_->Transfer(static_cast<uint16_t>(arg >> 0) & 0xFF);
   1682c:	9b03      	ldr	r3, [sp, #12]
   1682e:	685a      	ldr	r2, [r3, #4]
   16830:	9b03      	ldr	r3, [sp, #12]
   16832:	685b      	ldr	r3, [r3, #4]
   16834:	681b      	ldr	r3, [r3, #0]
   16836:	3308      	adds	r3, #8
   16838:	681b      	ldr	r3, [r3, #0]
   1683a:	9901      	ldr	r1, [sp, #4]
   1683c:	b289      	uxth	r1, r1
   1683e:	b2c9      	uxtb	r1, r1
   16840:	b289      	uxth	r1, r1
   16842:	4610      	mov	r0, r2
   16844:	4798      	blx	r3
    // Send 7-bit CRC and LSB stop addr (as b1)
    ssp_interface_->Transfer(static_cast<uint16_t>(crc << 1) | 0x01);
   16846:	9b03      	ldr	r3, [sp, #12]
   16848:	6858      	ldr	r0, [r3, #4]
   1684a:	9b03      	ldr	r3, [sp, #12]
   1684c:	685b      	ldr	r3, [r3, #4]
   1684e:	681b      	ldr	r3, [r3, #0]
   16850:	3308      	adds	r3, #8
   16852:	681b      	ldr	r3, [r3, #0]
   16854:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   16858:	b292      	uxth	r2, r2
   1685a:	0052      	lsls	r2, r2, #1
   1685c:	b292      	uxth	r2, r2
   1685e:	f042 0201 	orr.w	r2, r2, #1
   16862:	b292      	uxth	r2, r2
   16864:	4611      	mov	r1, r2
   16866:	4798      	blx	r3

    // Write garbage while waiting for a response
    // Send at least 1 byte of garbage before checking for a response
    temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   16868:	9b03      	ldr	r3, [sp, #12]
   1686a:	685a      	ldr	r2, [r3, #4]
   1686c:	9b03      	ldr	r3, [sp, #12]
   1686e:	685b      	ldr	r3, [r3, #4]
   16870:	681b      	ldr	r3, [r3, #0]
   16872:	3308      	adds	r3, #8
   16874:	681b      	ldr	r3, [r3, #0]
   16876:	21ff      	movs	r1, #255	; 0xff
   16878:	4610      	mov	r0, r2
   1687a:	4798      	blx	r3
   1687c:	4603      	mov	r3, r0
   1687e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (tries++ < kBusTimeout)
   16882:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   16886:	1c5a      	adds	r2, r3, #1
   16888:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   1688c:	2bf9      	cmp	r3, #249	; 0xf9
   1688e:	bf94      	ite	ls
   16890:	2301      	movls	r3, #1
   16892:	2300      	movhi	r3, #0
   16894:	b2db      	uxtb	r3, r3
   16896:	2b00      	cmp	r3, #0
   16898:	d027      	beq.n	168ea <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2da>
    {
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   1689a:	9b03      	ldr	r3, [sp, #12]
   1689c:	685a      	ldr	r2, [r3, #4]
   1689e:	9b03      	ldr	r3, [sp, #12]
   168a0:	685b      	ldr	r3, [r3, #4]
   168a2:	681b      	ldr	r3, [r3, #0]
   168a4:	3308      	adds	r3, #8
   168a6:	681b      	ldr	r3, [r3, #0]
   168a8:	21ff      	movs	r1, #255	; 0xff
   168aa:	4610      	mov	r0, r2
   168ac:	4798      	blx	r3
   168ae:	4603      	mov	r3, r0
   168b0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      if (temp_byte != 0xFF)
   168b4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   168b8:	2bff      	cmp	r3, #255	; 0xff
   168ba:	d00f      	beq.n	168dc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2cc>
      {
        // Determine the offset, since the first byte of a
        // response will always be 0.
        while (temp_byte & (0x80 >> bit_offset))
   168bc:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   168c0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   168c4:	2180      	movs	r1, #128	; 0x80
   168c6:	fa41 f303 	asr.w	r3, r1, r3
   168ca:	4013      	ands	r3, r2
   168cc:	2b00      	cmp	r3, #0
   168ce:	d00b      	beq.n	168e8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2d8>
        {
          bit_offset++;
   168d0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   168d4:	3301      	adds	r3, #1
   168d6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        while (temp_byte & (0x80 >> bit_offset))
   168da:	e7ef      	b.n	168bc <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2ac>
        }
        break;
      }
      tries++;
   168dc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   168e0:	3301      	adds	r3, #1
   168e2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    while (tries++ < kBusTimeout)
   168e6:	e7cc      	b.n	16882 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x272>
        break;
   168e8:	bf00      	nop
    }

    // Determine response length (in bytes) based on response type
    switch (res_type)
   168ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   168ec:	2b07      	cmp	r3, #7
   168ee:	d827      	bhi.n	16940 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x330>
   168f0:	a201      	add	r2, pc, #4	; (adr r2, 168f8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x2e8>)
   168f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   168f6:	bf00      	nop
   168f8:	00016919 	.word	0x00016919
   168fc:	00016921 	.word	0x00016921
   16900:	00016929 	.word	0x00016929
   16904:	00016931 	.word	0x00016931
   16908:	00016941 	.word	0x00016941
   1690c:	00016941 	.word	0x00016941
   16910:	00016941 	.word	0x00016941
   16914:	00016939 	.word	0x00016939
    {
      case ResponseType::kR1: res_len = 1; break;
   16918:	2301      	movs	r3, #1
   1691a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1691e:	e019      	b.n	16954 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR1b: res_len = 1; break;
   16920:	2301      	movs	r3, #1
   16922:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16926:	e015      	b.n	16954 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR2: res_len = 2; break;
   16928:	2302      	movs	r3, #2
   1692a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1692e:	e011      	b.n	16954 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR3: res_len = 5; break;
   16930:	2305      	movs	r3, #5
   16932:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   16936:	e00d      	b.n	16954 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      case ResponseType::kR7: res_len = 5; break;
   16938:	2305      	movs	r3, #5
   1693a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1693e:	e009      	b.n	16954 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x344>
      default:
        LOG_ERROR("Response unsupported in SPI mode. Aborting!");
   16940:	f240 433a 	movw	r3, #1082	; 0x43a
   16944:	4a56      	ldr	r2, [pc, #344]	; (16aa0 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x490>)
   16946:	4957      	ldr	r1, [pc, #348]	; (16aa4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x494>)
   16948:	4857      	ldr	r0, [pc, #348]	; (16aa8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x498>)
   1694a:	f7fd fd3b 	bl	143c4 <printf>
        return -1;
   1694e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16952:	e09a      	b.n	16a8a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x47a>
        break;
    }

    // Acquire the response
    uint64_t temp_response = 0;
   16954:	f04f 0200 	mov.w	r2, #0
   16958:	f04f 0300 	mov.w	r3, #0
   1695c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    // Read an extra 8 bits since the response was offset
    uint8_t bytes_to_read =
   16960:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   16964:	2b00      	cmp	r3, #0
   16966:	d004      	beq.n	16972 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x362>
   16968:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1696c:	3301      	adds	r3, #1
   1696e:	b2db      	uxtb	r3, r3
   16970:	e001      	b.n	16976 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x366>
   16972:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   16976:	f88d 301f 	strb.w	r3, [sp, #31]
        static_cast<uint8_t>((bit_offset > 0) ? res_len + 1 : res_len);
    while (bytes_to_read-- > 0)
   1697a:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1697e:	1e5a      	subs	r2, r3, #1
   16980:	f88d 201f 	strb.w	r2, [sp, #31]
   16984:	2b00      	cmp	r3, #0
   16986:	bf14      	ite	ne
   16988:	2301      	movne	r3, #1
   1698a:	2300      	moveq	r3, #0
   1698c:	b2db      	uxtb	r3, r3
   1698e:	2b00      	cmp	r3, #0
   16990:	d025      	beq.n	169de <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x3ce>
    {
      // Make space for the next byte
      temp_response = temp_response << 8;
   16992:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   16996:	f04f 0200 	mov.w	r2, #0
   1699a:	f04f 0300 	mov.w	r3, #0
   1699e:	020b      	lsls	r3, r1, #8
   169a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   169a4:	0202      	lsls	r2, r0, #8
   169a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_response |= temp_byte;
   169aa:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
   169ae:	f04f 0c00 	mov.w	ip, #0
   169b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   169b6:	ea4b 0200 	orr.w	r2, fp, r0
   169ba:	ea4c 0301 	orr.w	r3, ip, r1
   169be:	e9cd 2308 	strd	r2, r3, [sp, #32]
      temp_byte = static_cast<uint8_t>(ssp_interface_->Transfer(0xFF));
   169c2:	9b03      	ldr	r3, [sp, #12]
   169c4:	685a      	ldr	r2, [r3, #4]
   169c6:	9b03      	ldr	r3, [sp, #12]
   169c8:	685b      	ldr	r3, [r3, #4]
   169ca:	681b      	ldr	r3, [r3, #0]
   169cc:	3308      	adds	r3, #8
   169ce:	681b      	ldr	r3, [r3, #0]
   169d0:	21ff      	movs	r1, #255	; 0xff
   169d2:	4610      	mov	r0, r2
   169d4:	4798      	blx	r3
   169d6:	4603      	mov	r3, r0
   169d8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    while (bytes_to_read-- > 0)
   169dc:	e7cd      	b.n	1697a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x36a>
    }
    // Compensate for the bit offset
    temp_response = temp_response >> bit_offset;
   169de:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   169e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   169e6:	f1c1 0c20 	rsb	ip, r1, #32
   169ea:	f1a1 0020 	sub.w	r0, r1, #32
   169ee:	fa22 f401 	lsr.w	r4, r2, r1
   169f2:	fa03 fc0c 	lsl.w	ip, r3, ip
   169f6:	ea44 040c 	orr.w	r4, r4, ip
   169fa:	fa23 f000 	lsr.w	r0, r3, r0
   169fe:	4304      	orrs	r4, r0
   16a00:	fa23 f501 	lsr.w	r5, r3, r1
   16a04:	e9cd 4508 	strd	r4, r5, [sp, #32]

    // Only write to the response buffer if it is provided
    if (response_buffer != nullptr)
   16a08:	9b00      	ldr	r3, [sp, #0]
   16a0a:	2b00      	cmp	r3, #0
   16a0c:	d025      	beq.n	16a5a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
    {
      for (int i = 0; i < res_len; i++)
   16a0e:	2300      	movs	r3, #0
   16a10:	9306      	str	r3, [sp, #24]
   16a12:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   16a16:	9a06      	ldr	r2, [sp, #24]
   16a18:	429a      	cmp	r2, r3
   16a1a:	da1e      	bge.n	16a5a <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x44a>
      {
        response_buffer[i] =
            static_cast<uint8_t>(temp_response >> 8 * (res_len - 1 - i));
   16a1c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   16a20:	1e5a      	subs	r2, r3, #1
   16a22:	9b06      	ldr	r3, [sp, #24]
   16a24:	1ad3      	subs	r3, r2, r3
   16a26:	00da      	lsls	r2, r3, #3
   16a28:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   16a2c:	f1c2 0020 	rsb	r0, r2, #32
   16a30:	f1a2 0120 	sub.w	r1, r2, #32
   16a34:	fa23 f602 	lsr.w	r6, r3, r2
   16a38:	fa04 f000 	lsl.w	r0, r4, r0
   16a3c:	4306      	orrs	r6, r0
   16a3e:	fa24 f101 	lsr.w	r1, r4, r1
   16a42:	430e      	orrs	r6, r1
   16a44:	fa24 f702 	lsr.w	r7, r4, r2
        response_buffer[i] =
   16a48:	9b06      	ldr	r3, [sp, #24]
   16a4a:	9a00      	ldr	r2, [sp, #0]
   16a4c:	4413      	add	r3, r2
   16a4e:	b2f2      	uxtb	r2, r6
   16a50:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < res_len; i++)
   16a52:	9b06      	ldr	r3, [sp, #24]
   16a54:	3301      	adds	r3, #1
   16a56:	9306      	str	r3, [sp, #24]
   16a58:	e7db      	b.n	16a12 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x402>
      }
    }

    // Only end the transaction if keep_alive isn't requested
    if (keep_alive == KeepAlive::kNo)
   16a5a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   16a5e:	2b00      	cmp	r3, #0
   16a60:	d111      	bne.n	16a86 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x476>
    {
      // Deselect the SPI comm board
      chip_select_->SetHigh();
   16a62:	9b03      	ldr	r3, [sp, #12]
   16a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   16a66:	9b03      	ldr	r3, [sp, #12]
   16a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16a6a:	681b      	ldr	r3, [r3, #0]
   16a6c:	330c      	adds	r3, #12
   16a6e:	681b      	ldr	r3, [r3, #0]
   16a70:	4610      	mov	r0, r2
   16a72:	4798      	blx	r3
      chip_select_external_->SetHigh();
   16a74:	9b03      	ldr	r3, [sp, #12]
   16a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   16a78:	9b03      	ldr	r3, [sp, #12]
   16a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   16a7c:	681b      	ldr	r3, [r3, #0]
   16a7e:	330c      	adds	r3, #12
   16a80:	681b      	ldr	r3, [r3, #0]
   16a82:	4610      	mov	r0, r2
   16a84:	4798      	blx	r3
    }
    return res_len;
   16a86:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   16a8a:	4643      	mov	r3, r8
   16a8c:	4619      	mov	r1, r3
   16a8e:	4807      	ldr	r0, [pc, #28]	; (16aac <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)+0x49c>)
   16a90:	f7fc fa4c 	bl	12f2c <__cyg_profile_func_exit>
   16a94:	4623      	mov	r3, r4
  }
   16a96:	4618      	mov	r0, r3
   16a98:	b00f      	add	sp, #60	; 0x3c
   16a9a:	e8bd 89f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp, pc}
   16a9e:	bf00      	nop
   16aa0:	000193e8 	.word	0x000193e8
   16aa4:	000190ec 	.word	0x000190ec
   16aa8:	00018c78 	.word	0x00018c78
   16aac:	00016611 	.word	0x00016611

00016ab0 <Sd::Crc7Add(unsigned char, unsigned char)>:

  // Adds a message byte to the current CRC-7 to get a the new CRC-7
  uint8_t Crc7Add(uint8_t crc, uint8_t message_byte) override
   16ab0:	b530      	push	{r4, r5, lr}
   16ab2:	b083      	sub	sp, #12
   16ab4:	4675      	mov	r5, lr
   16ab6:	9001      	str	r0, [sp, #4]
   16ab8:	460b      	mov	r3, r1
   16aba:	f88d 3003 	strb.w	r3, [sp, #3]
   16abe:	4613      	mov	r3, r2
   16ac0:	f88d 3002 	strb.w	r3, [sp, #2]
   16ac4:	462b      	mov	r3, r5
   16ac6:	4619      	mov	r1, r3
   16ac8:	4809      	ldr	r0, [pc, #36]	; (16af0 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   16aca:	f7fc fa1b 	bl	12f04 <__cyg_profile_func_enter>
  {
    return kCrcTable8.crc_table[(crc << 1) ^ message_byte];
   16ace:	f89d 3003 	ldrb.w	r3, [sp, #3]
   16ad2:	005a      	lsls	r2, r3, #1
   16ad4:	f89d 3002 	ldrb.w	r3, [sp, #2]
   16ad8:	4053      	eors	r3, r2
   16ada:	4a06      	ldr	r2, [pc, #24]	; (16af4 <Sd::Crc7Add(unsigned char, unsigned char)+0x44>)
   16adc:	5cd4      	ldrb	r4, [r2, r3]
   16ade:	462b      	mov	r3, r5
   16ae0:	4619      	mov	r1, r3
   16ae2:	4803      	ldr	r0, [pc, #12]	; (16af0 <Sd::Crc7Add(unsigned char, unsigned char)+0x40>)
   16ae4:	f7fc fa22 	bl	12f2c <__cyg_profile_func_exit>
   16ae8:	4623      	mov	r3, r4
  }
   16aea:	4618      	mov	r0, r3
   16aec:	b003      	add	sp, #12
   16aee:	bd30      	pop	{r4, r5, pc}
   16af0:	00016ab1 	.word	0x00016ab1
   16af4:	00018d5c 	.word	0x00018d5c

00016af8 <Sd::GetCrc7(unsigned char*, unsigned char)>:

  // Returns the CRC-7 for a message of "length" bytes
  uint8_t GetCrc7(uint8_t * message, uint8_t length) override
   16af8:	b530      	push	{r4, r5, lr}
   16afa:	b087      	sub	sp, #28
   16afc:	4675      	mov	r5, lr
   16afe:	9003      	str	r0, [sp, #12]
   16b00:	9102      	str	r1, [sp, #8]
   16b02:	4613      	mov	r3, r2
   16b04:	f88d 3007 	strb.w	r3, [sp, #7]
   16b08:	462b      	mov	r3, r5
   16b0a:	4619      	mov	r1, r3
   16b0c:	4815      	ldr	r0, [pc, #84]	; (16b64 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   16b0e:	f7fc f9f9 	bl	12f04 <__cyg_profile_func_enter>
  {
    uint8_t crc = 0;
   16b12:	2300      	movs	r3, #0
   16b14:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   16b18:	2300      	movs	r3, #0
   16b1a:	9304      	str	r3, [sp, #16]
   16b1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16b20:	9a04      	ldr	r2, [sp, #16]
   16b22:	429a      	cmp	r2, r3
   16b24:	da12      	bge.n	16b4c <Sd::GetCrc7(unsigned char*, unsigned char)+0x54>
    {
      crc = Crc7Add(crc, message[i]);
   16b26:	9b03      	ldr	r3, [sp, #12]
   16b28:	681b      	ldr	r3, [r3, #0]
   16b2a:	3318      	adds	r3, #24
   16b2c:	681b      	ldr	r3, [r3, #0]
   16b2e:	9a04      	ldr	r2, [sp, #16]
   16b30:	9902      	ldr	r1, [sp, #8]
   16b32:	440a      	add	r2, r1
   16b34:	7812      	ldrb	r2, [r2, #0]
   16b36:	f89d 1017 	ldrb.w	r1, [sp, #23]
   16b3a:	9803      	ldr	r0, [sp, #12]
   16b3c:	4798      	blx	r3
   16b3e:	4603      	mov	r3, r0
   16b40:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int i = 0; i < length; i++)
   16b44:	9b04      	ldr	r3, [sp, #16]
   16b46:	3301      	adds	r3, #1
   16b48:	9304      	str	r3, [sp, #16]
   16b4a:	e7e7      	b.n	16b1c <Sd::GetCrc7(unsigned char*, unsigned char)+0x24>
    }
    return crc;
   16b4c:	f89d 4017 	ldrb.w	r4, [sp, #23]
   16b50:	462b      	mov	r3, r5
   16b52:	4619      	mov	r1, r3
   16b54:	4803      	ldr	r0, [pc, #12]	; (16b64 <Sd::GetCrc7(unsigned char*, unsigned char)+0x6c>)
   16b56:	f7fc f9e9 	bl	12f2c <__cyg_profile_func_exit>
   16b5a:	4623      	mov	r3, r4
  }
   16b5c:	4618      	mov	r0, r3
   16b5e:	b007      	add	sp, #28
   16b60:	bd30      	pop	{r4, r5, pc}
   16b62:	bf00      	nop
   16b64:	00016af9 	.word	0x00016af9

00016b68 <Sd::GetCrc16(unsigned char*, unsigned short)>:

  // Returns CCITT CRC-16 for a message of "length" bytes
  uint16_t GetCrc16(uint8_t * message, uint16_t length) override
   16b68:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   16b6c:	b08c      	sub	sp, #48	; 0x30
   16b6e:	4677      	mov	r7, lr
   16b70:	9003      	str	r0, [sp, #12]
   16b72:	9102      	str	r1, [sp, #8]
   16b74:	4613      	mov	r3, r2
   16b76:	f8ad 3006 	strh.w	r3, [sp, #6]
   16b7a:	463b      	mov	r3, r7
   16b7c:	4619      	mov	r1, r3
   16b7e:	4837      	ldr	r0, [pc, #220]	; (16c5c <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   16b80:	f7fc f9c0 	bl	12f04 <__cyg_profile_func_enter>
  {
    uint64_t crc = 0x0000;
   16b84:	f04f 0300 	mov.w	r3, #0
   16b88:	f04f 0400 	mov.w	r4, #0
   16b8c:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    uint64_t temp;
    uint64_t final_value = 0;
   16b90:	f04f 0300 	mov.w	r3, #0
   16b94:	f04f 0400 	mov.w	r4, #0
   16b98:	e9cd 3406 	strd	r3, r4, [sp, #24]

    for (uint64_t count = 0; count < length; ++count)
   16b9c:	f04f 0300 	mov.w	r3, #0
   16ba0:	f04f 0400 	mov.w	r4, #0
   16ba4:	e9cd 3408 	strd	r3, r4, [sp, #32]
   16ba8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   16bac:	f04f 0400 	mov.w	r4, #0
   16bb0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   16bb4:	42a2      	cmp	r2, r4
   16bb6:	bf08      	it	eq
   16bb8:	4299      	cmpeq	r1, r3
   16bba:	d23f      	bcs.n	16c3c <Sd::GetCrc16(unsigned char*, unsigned short)+0xd4>
    {
      temp = (*message++ ^ (crc >> 8)) & 0xff;
   16bbc:	9b02      	ldr	r3, [sp, #8]
   16bbe:	1c5a      	adds	r2, r3, #1
   16bc0:	9202      	str	r2, [sp, #8]
   16bc2:	781b      	ldrb	r3, [r3, #0]
   16bc4:	b2dd      	uxtb	r5, r3
   16bc6:	f04f 0600 	mov.w	r6, #0
   16bca:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   16bce:	f04f 0300 	mov.w	r3, #0
   16bd2:	f04f 0400 	mov.w	r4, #0
   16bd6:	0a0b      	lsrs	r3, r1, #8
   16bd8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   16bdc:	0a14      	lsrs	r4, r2, #8
   16bde:	ea83 0b05 	eor.w	fp, r3, r5
   16be2:	ea84 0c06 	eor.w	ip, r4, r6
   16be6:	f04f 01ff 	mov.w	r1, #255	; 0xff
   16bea:	f04f 0200 	mov.w	r2, #0
   16bee:	ea0b 0301 	and.w	r3, fp, r1
   16bf2:	ea0c 0402 	and.w	r4, ip, r2
   16bf6:	e9cd 3404 	strd	r3, r4, [sp, #16]
      crc  = kCrcTable16.crc_table[temp] ^ (crc << 8);
   16bfa:	4a19      	ldr	r2, [pc, #100]	; (16c60 <Sd::GetCrc16(unsigned char*, unsigned short)+0xf8>)
   16bfc:	9b04      	ldr	r3, [sp, #16]
   16bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   16c02:	b29d      	uxth	r5, r3
   16c04:	f04f 0600 	mov.w	r6, #0
   16c08:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   16c0c:	f04f 0b00 	mov.w	fp, #0
   16c10:	f04f 0c00 	mov.w	ip, #0
   16c14:	ea4f 2c02 	mov.w	ip, r2, lsl #8
   16c18:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
   16c1c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
   16c20:	ea8b 0305 	eor.w	r3, fp, r5
   16c24:	ea8c 0406 	eor.w	r4, ip, r6
   16c28:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    for (uint64_t count = 0; count < length; ++count)
   16c2c:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   16c30:	1c59      	adds	r1, r3, #1
   16c32:	f144 0200 	adc.w	r2, r4, #0
   16c36:	e9cd 1208 	strd	r1, r2, [sp, #32]
   16c3a:	e7b5      	b.n	16ba8 <Sd::GetCrc16(unsigned char*, unsigned short)+0x40>
    }

    return static_cast<uint16_t>(crc ^ final_value);
   16c3c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   16c40:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   16c44:	4053      	eors	r3, r2
   16c46:	b29c      	uxth	r4, r3
   16c48:	463b      	mov	r3, r7
   16c4a:	4619      	mov	r1, r3
   16c4c:	4803      	ldr	r0, [pc, #12]	; (16c5c <Sd::GetCrc16(unsigned char*, unsigned short)+0xf4>)
   16c4e:	f7fc f96d 	bl	12f2c <__cyg_profile_func_exit>
   16c52:	4623      	mov	r3, r4
  }
   16c54:	4618      	mov	r0, r3
   16c56:	b00c      	add	sp, #48	; 0x30
   16c58:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   16c5c:	00016b69 	.word	0x00016b69
   16c60:	00018e5c 	.word	0x00018e5c

00016c64 <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)>:
constexpr T Set(T target, uint32_t position)
   16c64:	b530      	push	{r4, r5, lr}
   16c66:	b083      	sub	sp, #12
   16c68:	4675      	mov	r5, lr
   16c6a:	9001      	str	r0, [sp, #4]
   16c6c:	9100      	str	r1, [sp, #0]
   16c6e:	462b      	mov	r3, r5
   16c70:	4619      	mov	r1, r3
   16c72:	480a      	ldr	r0, [pc, #40]	; (16c9c <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   16c74:	f7fc f946 	bl	12f04 <__cyg_profile_func_enter>
  return target | (1 << position);
   16c78:	2201      	movs	r2, #1
   16c7a:	9b00      	ldr	r3, [sp, #0]
   16c7c:	fa02 f303 	lsl.w	r3, r2, r3
   16c80:	461a      	mov	r2, r3
   16c82:	9b01      	ldr	r3, [sp, #4]
   16c84:	ea42 0403 	orr.w	r4, r2, r3
   16c88:	462b      	mov	r3, r5
   16c8a:	4619      	mov	r1, r3
   16c8c:	4803      	ldr	r0, [pc, #12]	; (16c9c <unsigned long bit::Set<unsigned long>(unsigned long, unsigned long)+0x38>)
   16c8e:	f7fc f94d 	bl	12f2c <__cyg_profile_func_exit>
   16c92:	4623      	mov	r3, r4
}
   16c94:	4618      	mov	r0, r3
   16c96:	b003      	add	sp, #12
   16c98:	bd30      	pop	{r4, r5, pc}
   16c9a:	bf00      	nop
   16c9c:	00016c65 	.word	0x00016c65

00016ca0 <bool bit::Read<unsigned long>(unsigned long, unsigned long)>:
[[gnu::always_inline]][[nodiscard]] constexpr bool Read(T target,
   16ca0:	b530      	push	{r4, r5, lr}
   16ca2:	b083      	sub	sp, #12
   16ca4:	4675      	mov	r5, lr
   16ca6:	9001      	str	r0, [sp, #4]
   16ca8:	9100      	str	r1, [sp, #0]
   16caa:	462b      	mov	r3, r5
   16cac:	4619      	mov	r1, r3
   16cae:	480c      	ldr	r0, [pc, #48]	; (16ce0 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   16cb0:	f7fc f928 	bl	12f04 <__cyg_profile_func_enter>
  return static_cast<bool>(target & (1 << position));
   16cb4:	2201      	movs	r2, #1
   16cb6:	9b00      	ldr	r3, [sp, #0]
   16cb8:	fa02 f303 	lsl.w	r3, r2, r3
   16cbc:	461a      	mov	r2, r3
   16cbe:	9b01      	ldr	r3, [sp, #4]
   16cc0:	4013      	ands	r3, r2
   16cc2:	2b00      	cmp	r3, #0
   16cc4:	bf14      	ite	ne
   16cc6:	2301      	movne	r3, #1
   16cc8:	2300      	moveq	r3, #0
   16cca:	b2dc      	uxtb	r4, r3
   16ccc:	462b      	mov	r3, r5
   16cce:	4619      	mov	r1, r3
   16cd0:	4803      	ldr	r0, [pc, #12]	; (16ce0 <bool bit::Read<unsigned long>(unsigned long, unsigned long)+0x40>)
   16cd2:	f7fc f92b 	bl	12f2c <__cyg_profile_func_exit>
   16cd6:	4623      	mov	r3, r4
}
   16cd8:	4618      	mov	r0, r3
   16cda:	b003      	add	sp, #12
   16cdc:	bd30      	pop	{r4, r5, pc}
   16cde:	bf00      	nop
   16ce0:	00016ca1 	.word	0x00016ca1

00016ce4 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   16ce4:	b530      	push	{r4, r5, lr}
   16ce6:	b089      	sub	sp, #36	; 0x24
   16ce8:	4675      	mov	r5, lr
   16cea:	9003      	str	r0, [sp, #12]
   16cec:	9201      	str	r2, [sp, #4]
   16cee:	9300      	str	r3, [sp, #0]
   16cf0:	460b      	mov	r3, r1
   16cf2:	f88d 300b 	strb.w	r3, [sp, #11]
   16cf6:	462b      	mov	r3, r5
   16cf8:	4619      	mov	r1, r3
   16cfa:	4816      	ldr	r0, [pc, #88]	; (16d54 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   16cfc:	f7fc f902 	bl	12f04 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16d04:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16d06:	2320      	movs	r3, #32
   16d08:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16d0a:	9b00      	ldr	r3, [sp, #0]
   16d0c:	f1c3 0320 	rsb	r3, r3, #32
   16d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16d14:	fa22 f303 	lsr.w	r3, r2, r3
   16d18:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   16d1a:	9a05      	ldr	r2, [sp, #20]
   16d1c:	9b01      	ldr	r3, [sp, #4]
   16d1e:	fa02 f303 	lsl.w	r3, r2, r3
   16d22:	43db      	mvns	r3, r3
   16d24:	9a03      	ldr	r2, [sp, #12]
   16d26:	4013      	ands	r3, r2
   16d28:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   16d2a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16d2e:	9b05      	ldr	r3, [sp, #20]
   16d30:	401a      	ands	r2, r3
   16d32:	9b01      	ldr	r3, [sp, #4]
   16d34:	fa02 f303 	lsl.w	r3, r2, r3
   16d38:	9a03      	ldr	r2, [sp, #12]
   16d3a:	4313      	orrs	r3, r2
   16d3c:	9303      	str	r3, [sp, #12]
  return target;
   16d3e:	9c03      	ldr	r4, [sp, #12]
   16d40:	462b      	mov	r3, r5
   16d42:	4619      	mov	r1, r3
   16d44:	4803      	ldr	r0, [pc, #12]	; (16d54 <unsigned long bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)+0x70>)
   16d46:	f7fc f8f1 	bl	12f2c <__cyg_profile_func_exit>
   16d4a:	4623      	mov	r3, r4
}
   16d4c:	4618      	mov	r0, r3
   16d4e:	b009      	add	sp, #36	; 0x24
   16d50:	bd30      	pop	{r4, r5, pc}
   16d52:	bf00      	nop
   16d54:	00016ce5 	.word	0x00016ce5

00016d58 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)>:
constexpr T Extract(T target, uint32_t position, uint32_t width = 1)
   16d58:	b530      	push	{r4, r5, lr}
   16d5a:	b089      	sub	sp, #36	; 0x24
   16d5c:	4675      	mov	r5, lr
   16d5e:	9003      	str	r0, [sp, #12]
   16d60:	9102      	str	r1, [sp, #8]
   16d62:	9201      	str	r2, [sp, #4]
   16d64:	462b      	mov	r3, r5
   16d66:	4619      	mov	r1, r3
   16d68:	480f      	ldr	r0, [pc, #60]	; (16da8 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   16d6a:	f7fc f8cb 	bl	12f04 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16d72:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16d74:	2320      	movs	r3, #32
   16d76:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16d78:	9b01      	ldr	r3, [sp, #4]
   16d7a:	f1c3 0320 	rsb	r3, r3, #32
   16d7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16d82:	fa22 f303 	lsr.w	r3, r2, r3
   16d86:	9305      	str	r3, [sp, #20]
  return (target >> position) & mask;
   16d88:	9a03      	ldr	r2, [sp, #12]
   16d8a:	9b02      	ldr	r3, [sp, #8]
   16d8c:	40da      	lsrs	r2, r3
   16d8e:	9b05      	ldr	r3, [sp, #20]
   16d90:	ea02 0403 	and.w	r4, r2, r3
   16d94:	462b      	mov	r3, r5
   16d96:	4619      	mov	r1, r3
   16d98:	4803      	ldr	r0, [pc, #12]	; (16da8 <unsigned long bit::Extract<unsigned long>(unsigned long, unsigned long, unsigned long)+0x50>)
   16d9a:	f7fc f8c7 	bl	12f2c <__cyg_profile_func_exit>
   16d9e:	4623      	mov	r3, r4
}
   16da0:	4618      	mov	r0, r3
   16da2:	b009      	add	sp, #36	; 0x24
   16da4:	bd30      	pop	{r4, r5, pc}
   16da6:	bf00      	nop
   16da8:	00016d59 	.word	0x00016d59

00016dac <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
constexpr T Insert(T target, U value, uint32_t position, uint32_t width = 1)
   16dac:	b530      	push	{r4, r5, lr}
   16dae:	b089      	sub	sp, #36	; 0x24
   16db0:	4675      	mov	r5, lr
   16db2:	9003      	str	r0, [sp, #12]
   16db4:	9201      	str	r2, [sp, #4]
   16db6:	9300      	str	r3, [sp, #0]
   16db8:	460b      	mov	r3, r1
   16dba:	f88d 300b 	strb.w	r3, [sp, #11]
   16dbe:	462b      	mov	r3, r5
   16dc0:	4619      	mov	r1, r3
   16dc2:	4816      	ldr	r0, [pc, #88]	; (16e1c <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   16dc4:	f7fc f89e 	bl	12f04 <__cyg_profile_func_enter>
  constexpr UnsignedT kFieldOfOnes = GenerateFieldOfOnes<T>();
   16dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16dcc:	9307      	str	r3, [sp, #28]
  constexpr size_t kTargetWidth     = sizeof(T) * 8;
   16dce:	2320      	movs	r3, #32
   16dd0:	9306      	str	r3, [sp, #24]
  UnsignedT mask   = kFieldOfOnes >> (kTargetWidth - width);
   16dd2:	9b00      	ldr	r3, [sp, #0]
   16dd4:	f1c3 0320 	rsb	r3, r3, #32
   16dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16ddc:	fa22 f303 	lsr.w	r3, r2, r3
   16de0:	9305      	str	r3, [sp, #20]
  target &= ~(mask << position);
   16de2:	9a05      	ldr	r2, [sp, #20]
   16de4:	9b01      	ldr	r3, [sp, #4]
   16de6:	fa02 f303 	lsl.w	r3, r2, r3
   16dea:	43db      	mvns	r3, r3
   16dec:	9a03      	ldr	r2, [sp, #12]
   16dee:	4013      	ands	r3, r2
   16df0:	9303      	str	r3, [sp, #12]
  target |= (value & mask) << position;
   16df2:	f89d 200b 	ldrb.w	r2, [sp, #11]
   16df6:	9b05      	ldr	r3, [sp, #20]
   16df8:	401a      	ands	r2, r3
   16dfa:	9b01      	ldr	r3, [sp, #4]
   16dfc:	fa02 f303 	lsl.w	r3, r2, r3
   16e00:	9a03      	ldr	r2, [sp, #12]
   16e02:	4313      	orrs	r3, r2
   16e04:	9303      	str	r3, [sp, #12]
  return target;
   16e06:	9c03      	ldr	r4, [sp, #12]
   16e08:	462b      	mov	r3, r5
   16e0a:	4619      	mov	r1, r3
   16e0c:	4803      	ldr	r0, [pc, #12]	; (16e1c <unsigned long bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)+0x70>)
   16e0e:	f7fc f88d 	bl	12f2c <__cyg_profile_func_exit>
   16e12:	4623      	mov	r3, r4
}
   16e14:	4618      	mov	r0, r3
   16e16:	b009      	add	sp, #36	; 0x24
   16e18:	bd30      	pop	{r4, r5, pc}
   16e1a:	bf00      	nop
   16e1c:	00016dad 	.word	0x00016dad

00016e20 <__static_initialization_and_destruction_0(int, int)>:
extern "C" DRESULT disk_ioctl([[maybe_unused]] BYTE drive_number,
                              [[maybe_unused]] BYTE command,
                              [[maybe_unused]] void * buffer)
{
  return RES_PARERR;
}
   16e20:	b530      	push	{r4, r5, lr}
   16e22:	b085      	sub	sp, #20
   16e24:	4674      	mov	r4, lr
   16e26:	9003      	str	r0, [sp, #12]
   16e28:	9102      	str	r1, [sp, #8]
   16e2a:	4623      	mov	r3, r4
   16e2c:	4619      	mov	r1, r3
   16e2e:	480e      	ldr	r0, [pc, #56]	; (16e68 <__static_initialization_and_destruction_0(int, int)+0x48>)
   16e30:	f7fc f868 	bl	12f04 <__cyg_profile_func_enter>
   16e34:	9b03      	ldr	r3, [sp, #12]
   16e36:	2b01      	cmp	r3, #1
   16e38:	d10e      	bne.n	16e58 <__static_initialization_and_destruction_0(int, int)+0x38>
   16e3a:	9b02      	ldr	r3, [sp, #8]
   16e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16e40:	4293      	cmp	r3, r2
   16e42:	d109      	bne.n	16e58 <__static_initialization_and_destruction_0(int, int)+0x38>
Sd sd_card(Sd::DebugSdCard_t{});
   16e44:	2306      	movs	r3, #6
   16e46:	9301      	str	r3, [sp, #4]
   16e48:	2300      	movs	r3, #0
   16e4a:	9300      	str	r3, [sp, #0]
   16e4c:	2308      	movs	r3, #8
   16e4e:	2201      	movs	r2, #1
   16e50:	4629      	mov	r1, r5
   16e52:	4806      	ldr	r0, [pc, #24]	; (16e6c <__static_initialization_and_destruction_0(int, int)+0x4c>)
   16e54:	f7fe fdb8 	bl	159c8 <Sd::Sd(Sd::DebugSdCard_t, unsigned char, unsigned char, unsigned char, unsigned char)>
   16e58:	4623      	mov	r3, r4
   16e5a:	4619      	mov	r1, r3
   16e5c:	4802      	ldr	r0, [pc, #8]	; (16e68 <__static_initialization_and_destruction_0(int, int)+0x48>)
   16e5e:	f7fc f865 	bl	12f2c <__cyg_profile_func_exit>
}
   16e62:	bf00      	nop
   16e64:	b005      	add	sp, #20
   16e66:	bd30      	pop	{r4, r5, pc}
   16e68:	00016e21 	.word	0x00016e21
   16e6c:	10000540 	.word	0x10000540

00016e70 <_GLOBAL__sub_I_disk_status>:
   16e70:	b510      	push	{r4, lr}
   16e72:	4674      	mov	r4, lr
   16e74:	4623      	mov	r3, r4
   16e76:	4619      	mov	r1, r3
   16e78:	4806      	ldr	r0, [pc, #24]	; (16e94 <_GLOBAL__sub_I_disk_status+0x24>)
   16e7a:	f7fc f843 	bl	12f04 <__cyg_profile_func_enter>
   16e7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16e82:	2001      	movs	r0, #1
   16e84:	f7ff ffcc 	bl	16e20 <__static_initialization_and_destruction_0(int, int)>
   16e88:	4623      	mov	r3, r4
   16e8a:	4619      	mov	r1, r3
   16e8c:	4801      	ldr	r0, [pc, #4]	; (16e94 <_GLOBAL__sub_I_disk_status+0x24>)
   16e8e:	f7fc f84d 	bl	12f2c <__cyg_profile_func_exit>
   16e92:	bd10      	pop	{r4, pc}
   16e94:	00016e71 	.word	0x00016e71

00016e98 <__cxa_pure_virtual>:
   16e98:	b508      	push	{r3, lr}
   16e9a:	f000 f80d 	bl	16eb8 <std::terminate()>

00016e9e <__cxxabiv1::__terminate(void (*)())>:
   16e9e:	b508      	push	{r3, lr}
   16ea0:	4780      	blx	r0
   16ea2:	f000 fa0f 	bl	172c4 <abort>
   16ea6:	Address 0x0000000000016ea6 is out of bounds.


00016ea8 <std::get_terminate()>:
   16ea8:	4b02      	ldr	r3, [pc, #8]	; (16eb4 <std::get_terminate()+0xc>)
   16eaa:	6818      	ldr	r0, [r3, #0]
   16eac:	f3bf 8f5b 	dmb	ish
   16eb0:	4770      	bx	lr
   16eb2:	bf00      	nop
   16eb4:	100001d4 	.word	0x100001d4

00016eb8 <std::terminate()>:
   16eb8:	b508      	push	{r3, lr}
   16eba:	f7ff fff5 	bl	16ea8 <std::get_terminate()>
   16ebe:	f7ff ffee 	bl	16e9e <__cxxabiv1::__terminate(void (*)())>
   16ec2:	Address 0x0000000000016ec2 is out of bounds.


00016ec4 <roundf>:
   16ec4:	b082      	sub	sp, #8
   16ec6:	ed8d 0a01 	vstr	s0, [sp, #4]
   16eca:	9901      	ldr	r1, [sp, #4]
   16ecc:	f3c1 53c7 	ubfx	r3, r1, #23, #8
   16ed0:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
   16ed4:	2a16      	cmp	r2, #22
   16ed6:	dc0c      	bgt.n	16ef2 <roundf+0x2e>
   16ed8:	2a00      	cmp	r2, #0
   16eda:	db10      	blt.n	16efe <roundf+0x3a>
   16edc:	4810      	ldr	r0, [pc, #64]	; (16f20 <roundf+0x5c>)
   16ede:	4110      	asrs	r0, r2
   16ee0:	4201      	tst	r1, r0
   16ee2:	d008      	beq.n	16ef6 <roundf+0x32>
   16ee4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   16ee8:	4113      	asrs	r3, r2
   16eea:	440b      	add	r3, r1
   16eec:	ea23 0300 	bic.w	r3, r3, r0
   16ef0:	e00b      	b.n	16f0a <roundf+0x46>
   16ef2:	2a80      	cmp	r2, #128	; 0x80
   16ef4:	d00d      	beq.n	16f12 <roundf+0x4e>
   16ef6:	ed9d 0a01 	vldr	s0, [sp, #4]
   16efa:	b002      	add	sp, #8
   16efc:	4770      	bx	lr
   16efe:	3201      	adds	r2, #1
   16f00:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   16f04:	d101      	bne.n	16f0a <roundf+0x46>
   16f06:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   16f0a:	ee00 3a10 	vmov	s0, r3
   16f0e:	b002      	add	sp, #8
   16f10:	4770      	bx	lr
   16f12:	eddd 7a01 	vldr	s15, [sp, #4]
   16f16:	ee37 0aa7 	vadd.f32	s0, s15, s15
   16f1a:	b002      	add	sp, #8
   16f1c:	4770      	bx	lr
   16f1e:	bf00      	nop
   16f20:	007fffff 	.word	0x007fffff

00016f24 <__aeabi_d2f>:
   16f24:	ea4f 0241 	mov.w	r2, r1, lsl #1
   16f28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   16f2c:	bf24      	itt	cs
   16f2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   16f32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   16f36:	d90d      	bls.n	16f54 <__aeabi_d2f+0x30>
   16f38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   16f3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   16f40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   16f44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   16f48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   16f4c:	bf08      	it	eq
   16f4e:	f020 0001 	biceq.w	r0, r0, #1
   16f52:	4770      	bx	lr
   16f54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   16f58:	d121      	bne.n	16f9e <__aeabi_d2f+0x7a>
   16f5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   16f5e:	bfbc      	itt	lt
   16f60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   16f64:	4770      	bxlt	lr
   16f66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   16f6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   16f6e:	f1c2 0218 	rsb	r2, r2, #24
   16f72:	f1c2 0c20 	rsb	ip, r2, #32
   16f76:	fa10 f30c 	lsls.w	r3, r0, ip
   16f7a:	fa20 f002 	lsr.w	r0, r0, r2
   16f7e:	bf18      	it	ne
   16f80:	f040 0001 	orrne.w	r0, r0, #1
   16f84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   16f88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   16f8c:	fa03 fc0c 	lsl.w	ip, r3, ip
   16f90:	ea40 000c 	orr.w	r0, r0, ip
   16f94:	fa23 f302 	lsr.w	r3, r3, r2
   16f98:	ea4f 0343 	mov.w	r3, r3, lsl #1
   16f9c:	e7cc      	b.n	16f38 <__aeabi_d2f+0x14>
   16f9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   16fa2:	d107      	bne.n	16fb4 <__aeabi_d2f+0x90>
   16fa4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   16fa8:	bf1e      	ittt	ne
   16faa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   16fae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   16fb2:	4770      	bxne	lr
   16fb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   16fb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   16fbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   16fc0:	4770      	bx	lr
   16fc2:	bf00      	nop

00016fc4 <__aeabi_uldivmod>:
   16fc4:	b953      	cbnz	r3, 16fdc <__aeabi_uldivmod+0x18>
   16fc6:	b94a      	cbnz	r2, 16fdc <__aeabi_uldivmod+0x18>
   16fc8:	2900      	cmp	r1, #0
   16fca:	bf08      	it	eq
   16fcc:	2800      	cmpeq	r0, #0
   16fce:	bf1c      	itt	ne
   16fd0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   16fd4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   16fd8:	f000 b972 	b.w	172c0 <__aeabi_idiv0>
   16fdc:	f1ad 0c08 	sub.w	ip, sp, #8
   16fe0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   16fe4:	f000 f806 	bl	16ff4 <__udivmoddi4>
   16fe8:	f8dd e004 	ldr.w	lr, [sp, #4]
   16fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   16ff0:	b004      	add	sp, #16
   16ff2:	4770      	bx	lr

00016ff4 <__udivmoddi4>:
   16ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ff8:	9e08      	ldr	r6, [sp, #32]
   16ffa:	4604      	mov	r4, r0
   16ffc:	4688      	mov	r8, r1
   16ffe:	2b00      	cmp	r3, #0
   17000:	d14b      	bne.n	1709a <__udivmoddi4+0xa6>
   17002:	428a      	cmp	r2, r1
   17004:	4615      	mov	r5, r2
   17006:	d967      	bls.n	170d8 <__udivmoddi4+0xe4>
   17008:	fab2 f282 	clz	r2, r2
   1700c:	b14a      	cbz	r2, 17022 <__udivmoddi4+0x2e>
   1700e:	f1c2 0720 	rsb	r7, r2, #32
   17012:	fa01 f302 	lsl.w	r3, r1, r2
   17016:	fa20 f707 	lsr.w	r7, r0, r7
   1701a:	4095      	lsls	r5, r2
   1701c:	ea47 0803 	orr.w	r8, r7, r3
   17020:	4094      	lsls	r4, r2
   17022:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   17026:	0c23      	lsrs	r3, r4, #16
   17028:	fbb8 f7fe 	udiv	r7, r8, lr
   1702c:	fa1f fc85 	uxth.w	ip, r5
   17030:	fb0e 8817 	mls	r8, lr, r7, r8
   17034:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   17038:	fb07 f10c 	mul.w	r1, r7, ip
   1703c:	4299      	cmp	r1, r3
   1703e:	d909      	bls.n	17054 <__udivmoddi4+0x60>
   17040:	18eb      	adds	r3, r5, r3
   17042:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   17046:	f080 811b 	bcs.w	17280 <__udivmoddi4+0x28c>
   1704a:	4299      	cmp	r1, r3
   1704c:	f240 8118 	bls.w	17280 <__udivmoddi4+0x28c>
   17050:	3f02      	subs	r7, #2
   17052:	442b      	add	r3, r5
   17054:	1a5b      	subs	r3, r3, r1
   17056:	b2a4      	uxth	r4, r4
   17058:	fbb3 f0fe 	udiv	r0, r3, lr
   1705c:	fb0e 3310 	mls	r3, lr, r0, r3
   17060:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   17064:	fb00 fc0c 	mul.w	ip, r0, ip
   17068:	45a4      	cmp	ip, r4
   1706a:	d909      	bls.n	17080 <__udivmoddi4+0x8c>
   1706c:	192c      	adds	r4, r5, r4
   1706e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   17072:	f080 8107 	bcs.w	17284 <__udivmoddi4+0x290>
   17076:	45a4      	cmp	ip, r4
   17078:	f240 8104 	bls.w	17284 <__udivmoddi4+0x290>
   1707c:	3802      	subs	r0, #2
   1707e:	442c      	add	r4, r5
   17080:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   17084:	eba4 040c 	sub.w	r4, r4, ip
   17088:	2700      	movs	r7, #0
   1708a:	b11e      	cbz	r6, 17094 <__udivmoddi4+0xa0>
   1708c:	40d4      	lsrs	r4, r2
   1708e:	2300      	movs	r3, #0
   17090:	e9c6 4300 	strd	r4, r3, [r6]
   17094:	4639      	mov	r1, r7
   17096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1709a:	428b      	cmp	r3, r1
   1709c:	d909      	bls.n	170b2 <__udivmoddi4+0xbe>
   1709e:	2e00      	cmp	r6, #0
   170a0:	f000 80eb 	beq.w	1727a <__udivmoddi4+0x286>
   170a4:	2700      	movs	r7, #0
   170a6:	e9c6 0100 	strd	r0, r1, [r6]
   170aa:	4638      	mov	r0, r7
   170ac:	4639      	mov	r1, r7
   170ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   170b2:	fab3 f783 	clz	r7, r3
   170b6:	2f00      	cmp	r7, #0
   170b8:	d147      	bne.n	1714a <__udivmoddi4+0x156>
   170ba:	428b      	cmp	r3, r1
   170bc:	d302      	bcc.n	170c4 <__udivmoddi4+0xd0>
   170be:	4282      	cmp	r2, r0
   170c0:	f200 80fa 	bhi.w	172b8 <__udivmoddi4+0x2c4>
   170c4:	1a84      	subs	r4, r0, r2
   170c6:	eb61 0303 	sbc.w	r3, r1, r3
   170ca:	2001      	movs	r0, #1
   170cc:	4698      	mov	r8, r3
   170ce:	2e00      	cmp	r6, #0
   170d0:	d0e0      	beq.n	17094 <__udivmoddi4+0xa0>
   170d2:	e9c6 4800 	strd	r4, r8, [r6]
   170d6:	e7dd      	b.n	17094 <__udivmoddi4+0xa0>
   170d8:	b902      	cbnz	r2, 170dc <__udivmoddi4+0xe8>
   170da:	deff      	udf	#255	; 0xff
   170dc:	fab2 f282 	clz	r2, r2
   170e0:	2a00      	cmp	r2, #0
   170e2:	f040 808f 	bne.w	17204 <__udivmoddi4+0x210>
   170e6:	1b49      	subs	r1, r1, r5
   170e8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   170ec:	fa1f f885 	uxth.w	r8, r5
   170f0:	2701      	movs	r7, #1
   170f2:	fbb1 fcfe 	udiv	ip, r1, lr
   170f6:	0c23      	lsrs	r3, r4, #16
   170f8:	fb0e 111c 	mls	r1, lr, ip, r1
   170fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   17100:	fb08 f10c 	mul.w	r1, r8, ip
   17104:	4299      	cmp	r1, r3
   17106:	d907      	bls.n	17118 <__udivmoddi4+0x124>
   17108:	18eb      	adds	r3, r5, r3
   1710a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1710e:	d202      	bcs.n	17116 <__udivmoddi4+0x122>
   17110:	4299      	cmp	r1, r3
   17112:	f200 80cd 	bhi.w	172b0 <__udivmoddi4+0x2bc>
   17116:	4684      	mov	ip, r0
   17118:	1a59      	subs	r1, r3, r1
   1711a:	b2a3      	uxth	r3, r4
   1711c:	fbb1 f0fe 	udiv	r0, r1, lr
   17120:	fb0e 1410 	mls	r4, lr, r0, r1
   17124:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   17128:	fb08 f800 	mul.w	r8, r8, r0
   1712c:	45a0      	cmp	r8, r4
   1712e:	d907      	bls.n	17140 <__udivmoddi4+0x14c>
   17130:	192c      	adds	r4, r5, r4
   17132:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   17136:	d202      	bcs.n	1713e <__udivmoddi4+0x14a>
   17138:	45a0      	cmp	r8, r4
   1713a:	f200 80b6 	bhi.w	172aa <__udivmoddi4+0x2b6>
   1713e:	4618      	mov	r0, r3
   17140:	eba4 0408 	sub.w	r4, r4, r8
   17144:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   17148:	e79f      	b.n	1708a <__udivmoddi4+0x96>
   1714a:	f1c7 0c20 	rsb	ip, r7, #32
   1714e:	40bb      	lsls	r3, r7
   17150:	fa22 fe0c 	lsr.w	lr, r2, ip
   17154:	ea4e 0e03 	orr.w	lr, lr, r3
   17158:	fa01 f407 	lsl.w	r4, r1, r7
   1715c:	fa20 f50c 	lsr.w	r5, r0, ip
   17160:	fa21 f30c 	lsr.w	r3, r1, ip
   17164:	ea4f 481e 	mov.w	r8, lr, lsr #16
   17168:	4325      	orrs	r5, r4
   1716a:	fbb3 f9f8 	udiv	r9, r3, r8
   1716e:	0c2c      	lsrs	r4, r5, #16
   17170:	fb08 3319 	mls	r3, r8, r9, r3
   17174:	fa1f fa8e 	uxth.w	sl, lr
   17178:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1717c:	fb09 f40a 	mul.w	r4, r9, sl
   17180:	429c      	cmp	r4, r3
   17182:	fa02 f207 	lsl.w	r2, r2, r7
   17186:	fa00 f107 	lsl.w	r1, r0, r7
   1718a:	d90b      	bls.n	171a4 <__udivmoddi4+0x1b0>
   1718c:	eb1e 0303 	adds.w	r3, lr, r3
   17190:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   17194:	f080 8087 	bcs.w	172a6 <__udivmoddi4+0x2b2>
   17198:	429c      	cmp	r4, r3
   1719a:	f240 8084 	bls.w	172a6 <__udivmoddi4+0x2b2>
   1719e:	f1a9 0902 	sub.w	r9, r9, #2
   171a2:	4473      	add	r3, lr
   171a4:	1b1b      	subs	r3, r3, r4
   171a6:	b2ad      	uxth	r5, r5
   171a8:	fbb3 f0f8 	udiv	r0, r3, r8
   171ac:	fb08 3310 	mls	r3, r8, r0, r3
   171b0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   171b4:	fb00 fa0a 	mul.w	sl, r0, sl
   171b8:	45a2      	cmp	sl, r4
   171ba:	d908      	bls.n	171ce <__udivmoddi4+0x1da>
   171bc:	eb1e 0404 	adds.w	r4, lr, r4
   171c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   171c4:	d26b      	bcs.n	1729e <__udivmoddi4+0x2aa>
   171c6:	45a2      	cmp	sl, r4
   171c8:	d969      	bls.n	1729e <__udivmoddi4+0x2aa>
   171ca:	3802      	subs	r0, #2
   171cc:	4474      	add	r4, lr
   171ce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   171d2:	fba0 8902 	umull	r8, r9, r0, r2
   171d6:	eba4 040a 	sub.w	r4, r4, sl
   171da:	454c      	cmp	r4, r9
   171dc:	46c2      	mov	sl, r8
   171de:	464b      	mov	r3, r9
   171e0:	d354      	bcc.n	1728c <__udivmoddi4+0x298>
   171e2:	d051      	beq.n	17288 <__udivmoddi4+0x294>
   171e4:	2e00      	cmp	r6, #0
   171e6:	d069      	beq.n	172bc <__udivmoddi4+0x2c8>
   171e8:	ebb1 050a 	subs.w	r5, r1, sl
   171ec:	eb64 0403 	sbc.w	r4, r4, r3
   171f0:	fa04 fc0c 	lsl.w	ip, r4, ip
   171f4:	40fd      	lsrs	r5, r7
   171f6:	40fc      	lsrs	r4, r7
   171f8:	ea4c 0505 	orr.w	r5, ip, r5
   171fc:	e9c6 5400 	strd	r5, r4, [r6]
   17200:	2700      	movs	r7, #0
   17202:	e747      	b.n	17094 <__udivmoddi4+0xa0>
   17204:	f1c2 0320 	rsb	r3, r2, #32
   17208:	fa20 f703 	lsr.w	r7, r0, r3
   1720c:	4095      	lsls	r5, r2
   1720e:	fa01 f002 	lsl.w	r0, r1, r2
   17212:	fa21 f303 	lsr.w	r3, r1, r3
   17216:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1721a:	4338      	orrs	r0, r7
   1721c:	0c01      	lsrs	r1, r0, #16
   1721e:	fbb3 f7fe 	udiv	r7, r3, lr
   17222:	fa1f f885 	uxth.w	r8, r5
   17226:	fb0e 3317 	mls	r3, lr, r7, r3
   1722a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1722e:	fb07 f308 	mul.w	r3, r7, r8
   17232:	428b      	cmp	r3, r1
   17234:	fa04 f402 	lsl.w	r4, r4, r2
   17238:	d907      	bls.n	1724a <__udivmoddi4+0x256>
   1723a:	1869      	adds	r1, r5, r1
   1723c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   17240:	d22f      	bcs.n	172a2 <__udivmoddi4+0x2ae>
   17242:	428b      	cmp	r3, r1
   17244:	d92d      	bls.n	172a2 <__udivmoddi4+0x2ae>
   17246:	3f02      	subs	r7, #2
   17248:	4429      	add	r1, r5
   1724a:	1acb      	subs	r3, r1, r3
   1724c:	b281      	uxth	r1, r0
   1724e:	fbb3 f0fe 	udiv	r0, r3, lr
   17252:	fb0e 3310 	mls	r3, lr, r0, r3
   17256:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1725a:	fb00 f308 	mul.w	r3, r0, r8
   1725e:	428b      	cmp	r3, r1
   17260:	d907      	bls.n	17272 <__udivmoddi4+0x27e>
   17262:	1869      	adds	r1, r5, r1
   17264:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   17268:	d217      	bcs.n	1729a <__udivmoddi4+0x2a6>
   1726a:	428b      	cmp	r3, r1
   1726c:	d915      	bls.n	1729a <__udivmoddi4+0x2a6>
   1726e:	3802      	subs	r0, #2
   17270:	4429      	add	r1, r5
   17272:	1ac9      	subs	r1, r1, r3
   17274:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   17278:	e73b      	b.n	170f2 <__udivmoddi4+0xfe>
   1727a:	4637      	mov	r7, r6
   1727c:	4630      	mov	r0, r6
   1727e:	e709      	b.n	17094 <__udivmoddi4+0xa0>
   17280:	4607      	mov	r7, r0
   17282:	e6e7      	b.n	17054 <__udivmoddi4+0x60>
   17284:	4618      	mov	r0, r3
   17286:	e6fb      	b.n	17080 <__udivmoddi4+0x8c>
   17288:	4541      	cmp	r1, r8
   1728a:	d2ab      	bcs.n	171e4 <__udivmoddi4+0x1f0>
   1728c:	ebb8 0a02 	subs.w	sl, r8, r2
   17290:	eb69 020e 	sbc.w	r2, r9, lr
   17294:	3801      	subs	r0, #1
   17296:	4613      	mov	r3, r2
   17298:	e7a4      	b.n	171e4 <__udivmoddi4+0x1f0>
   1729a:	4660      	mov	r0, ip
   1729c:	e7e9      	b.n	17272 <__udivmoddi4+0x27e>
   1729e:	4618      	mov	r0, r3
   172a0:	e795      	b.n	171ce <__udivmoddi4+0x1da>
   172a2:	4667      	mov	r7, ip
   172a4:	e7d1      	b.n	1724a <__udivmoddi4+0x256>
   172a6:	4681      	mov	r9, r0
   172a8:	e77c      	b.n	171a4 <__udivmoddi4+0x1b0>
   172aa:	3802      	subs	r0, #2
   172ac:	442c      	add	r4, r5
   172ae:	e747      	b.n	17140 <__udivmoddi4+0x14c>
   172b0:	f1ac 0c02 	sub.w	ip, ip, #2
   172b4:	442b      	add	r3, r5
   172b6:	e72f      	b.n	17118 <__udivmoddi4+0x124>
   172b8:	4638      	mov	r0, r7
   172ba:	e708      	b.n	170ce <__udivmoddi4+0xda>
   172bc:	4637      	mov	r7, r6
   172be:	e6e9      	b.n	17094 <__udivmoddi4+0xa0>

000172c0 <__aeabi_idiv0>:
   172c0:	4770      	bx	lr
   172c2:	bf00      	nop

000172c4 <abort>:
   172c4:	b508      	push	{r3, lr}
   172c6:	2006      	movs	r0, #6
   172c8:	f000 f858 	bl	1737c <raise>
   172cc:	2001      	movs	r0, #1
   172ce:	f7fb fd79 	bl	12dc4 <_exit>
   172d2:	Address 0x00000000000172d2 is out of bounds.


000172d4 <__libc_init_array>:
   172d4:	b570      	push	{r4, r5, r6, lr}
   172d6:	4e0d      	ldr	r6, [pc, #52]	; (1730c <__libc_init_array+0x38>)
   172d8:	4c0d      	ldr	r4, [pc, #52]	; (17310 <__libc_init_array+0x3c>)
   172da:	1ba4      	subs	r4, r4, r6
   172dc:	10a4      	asrs	r4, r4, #2
   172de:	2500      	movs	r5, #0
   172e0:	42a5      	cmp	r5, r4
   172e2:	d109      	bne.n	172f8 <__libc_init_array+0x24>
   172e4:	4e0b      	ldr	r6, [pc, #44]	; (17314 <__libc_init_array+0x40>)
   172e6:	4c0c      	ldr	r4, [pc, #48]	; (17318 <__libc_init_array+0x44>)
   172e8:	f7f9 f80a 	bl	10300 <_init>
   172ec:	1ba4      	subs	r4, r4, r6
   172ee:	10a4      	asrs	r4, r4, #2
   172f0:	2500      	movs	r5, #0
   172f2:	42a5      	cmp	r5, r4
   172f4:	d105      	bne.n	17302 <__libc_init_array+0x2e>
   172f6:	bd70      	pop	{r4, r5, r6, pc}
   172f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   172fc:	4798      	blx	r3
   172fe:	3501      	adds	r5, #1
   17300:	e7ee      	b.n	172e0 <__libc_init_array+0xc>
   17302:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   17306:	4798      	blx	r3
   17308:	3501      	adds	r5, #1
   1730a:	e7f2      	b.n	172f2 <__libc_init_array+0x1e>
   1730c:	0001030c 	.word	0x0001030c
   17310:	0001030c 	.word	0x0001030c
   17314:	0001030c 	.word	0x0001030c
   17318:	00010318 	.word	0x00010318

0001731c <memset>:
   1731c:	4402      	add	r2, r0
   1731e:	4603      	mov	r3, r0
   17320:	4293      	cmp	r3, r2
   17322:	d100      	bne.n	17326 <memset+0xa>
   17324:	4770      	bx	lr
   17326:	f803 1b01 	strb.w	r1, [r3], #1
   1732a:	e7f9      	b.n	17320 <memset+0x4>

0001732c <_raise_r>:
   1732c:	291f      	cmp	r1, #31
   1732e:	b538      	push	{r3, r4, r5, lr}
   17330:	4604      	mov	r4, r0
   17332:	460d      	mov	r5, r1
   17334:	d904      	bls.n	17340 <_raise_r+0x14>
   17336:	2316      	movs	r3, #22
   17338:	6003      	str	r3, [r0, #0]
   1733a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1733e:	bd38      	pop	{r3, r4, r5, pc}
   17340:	6c42      	ldr	r2, [r0, #68]	; 0x44
   17342:	b112      	cbz	r2, 1734a <_raise_r+0x1e>
   17344:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   17348:	b94b      	cbnz	r3, 1735e <_raise_r+0x32>
   1734a:	4620      	mov	r0, r4
   1734c:	f000 f830 	bl	173b0 <_getpid_r>
   17350:	462a      	mov	r2, r5
   17352:	4601      	mov	r1, r0
   17354:	4620      	mov	r0, r4
   17356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1735a:	f000 b817 	b.w	1738c <_kill_r>
   1735e:	2b01      	cmp	r3, #1
   17360:	d00a      	beq.n	17378 <_raise_r+0x4c>
   17362:	1c59      	adds	r1, r3, #1
   17364:	d103      	bne.n	1736e <_raise_r+0x42>
   17366:	2316      	movs	r3, #22
   17368:	6003      	str	r3, [r0, #0]
   1736a:	2001      	movs	r0, #1
   1736c:	e7e7      	b.n	1733e <_raise_r+0x12>
   1736e:	2400      	movs	r4, #0
   17370:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   17374:	4628      	mov	r0, r5
   17376:	4798      	blx	r3
   17378:	2000      	movs	r0, #0
   1737a:	e7e0      	b.n	1733e <_raise_r+0x12>

0001737c <raise>:
   1737c:	4b02      	ldr	r3, [pc, #8]	; (17388 <raise+0xc>)
   1737e:	4601      	mov	r1, r0
   17380:	6818      	ldr	r0, [r3, #0]
   17382:	f7ff bfd3 	b.w	1732c <_raise_r>
   17386:	bf00      	nop
   17388:	100001d8 	.word	0x100001d8

0001738c <_kill_r>:
   1738c:	b538      	push	{r3, r4, r5, lr}
   1738e:	4c07      	ldr	r4, [pc, #28]	; (173ac <_kill_r+0x20>)
   17390:	2300      	movs	r3, #0
   17392:	4605      	mov	r5, r0
   17394:	4608      	mov	r0, r1
   17396:	4611      	mov	r1, r2
   17398:	6023      	str	r3, [r4, #0]
   1739a:	f7fb fd31 	bl	12e00 <_kill>
   1739e:	1c43      	adds	r3, r0, #1
   173a0:	d102      	bne.n	173a8 <_kill_r+0x1c>
   173a2:	6823      	ldr	r3, [r4, #0]
   173a4:	b103      	cbz	r3, 173a8 <_kill_r+0x1c>
   173a6:	602b      	str	r3, [r5, #0]
   173a8:	bd38      	pop	{r3, r4, r5, pc}
   173aa:	bf00      	nop
   173ac:	100005a8 	.word	0x100005a8

000173b0 <_getpid_r>:
   173b0:	f7fb bd14 	b.w	12ddc <_getpid>

000173b4 <LabGPIO::LabGPIO(unsigned char, unsigned char)::file>:
   173b4:	614c 4762 4950 2e4f 7063 0070               LabGPIO.cpp.

000173c0 <LabGPIO::LabGPIO(unsigned char, unsigned char)::file>:
   173c0:	614c 4762 4950 2e4f 7063 0070 5b1b 3234     LabGPIO.cpp..[42
   173d0:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
   173e0:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   173f0:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   17400:	6e49 6176 696c 2064 6f50 7472 5b1b 6d30     Invalid Port.[0m
   17410:	000a 0000 5b1b 3234 206d 2020 4920 464e     .....[42m    INF
   17420:	1b4f 305b 393b 6d34 253a 3a73 5b1b 3b30     O.[0;94m:%s:.[0;
   17430:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   17440:	1b20 305b 333b 6d37 6e49 6176 696c 2064      .[0;37mInvalid 
   17450:	6950 1b6e 305b 0a6d ff00 ffff               Pin.[0m.....

0001745c <LabGPIO::LabGPIO(unsigned char, unsigned char)::__PRETTY_FUNCTION__>:
   1745c:	614c 4762 4950 3a4f 4c3a 6261 5047 4f49     LabGPIO::LabGPIO
   1746c:	7528 6e69 3874 745f 202c 6975 746e 5f38     (uint8_t, uint8_
   1747c:	2974 ff00                                   t)..

00017480 <main::file>:
   17480:	616d 6e69 632e 7070 ff00 ffff 5b1b 3234     main.cpp.....[42
   17490:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
   174a0:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   174b0:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   174c0:	6e49 7469 6169 696c 617a 6974 6e6f 4420     Initialization D
   174d0:	6e6f 2e65 5b1b 6d30 000a ffff               one..[0m....

000174dc <main::__PRETTY_FUNCTION__>:
   174dc:	6e69 2074 616d 6e69 2928 ff00 7453 6361     int main()..Stac
   174ec:	206b 6544 7470 2068 203d 7a25 0a64 0000     k Depth = %zd...
   174fc:	2020 2523 757a 203a 7830 7025 000a 0000       #%zu: 0x%p....
   1750c:	520a 6e75 203a 6874 2065 6f66 6c6c 776f     .Run: the follow
   1751c:	6e69 2067 6f63 6d6d 6e61 2064 6e69 7920     ing command in y
   1752c:	756f 2072 7270 6a6f 6365 2074 6964 6572     our project dire
   1753c:	7463 726f 0079 0000 200a 1b20 315b 333b     ctory....  .[1;3
   1754c:	6d37 616d 656b 7320 6174 6b63 7274 6361     7mmake stacktrac
   1755c:	2d65 7325 5420 4152 4543 3d53 0022 0000     e-%s TRACES="...
   1756c:	7830 7025 0000 0000 3020 2578 0070 0000     0x%p.... 0x%p...
   1757c:	0a22 5b1b 6d30 0000 6854 7369 7720 6c69     "..[0m..This wil
   1758c:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
   1759c:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
   175ac:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
   175bc:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
   175cc:	2067 6163 6c6c 6465 002e 0000 7061 6c70     g called....appl
   175dc:	6369 7461 6f69 006e 5b1b 3134 436d 4952     ication..[41mCRI
   175ec:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
   175fc:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   1760c:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
   1761c:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
   1762c:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
   1763c:	2820 6570 6972 6870 7265 6c61 645f 7669      (peripheral_div
   1764c:	6469 7265 3c20 203d 2934 200a 2020 2020     ider <= 4).     
   1765c:	2020 2020 4420 7669 6469 7265 6d20 7375          Divider mus
   1766c:	6e74 7427 6520 6378 6565 2064 3233 5b1b     tn't exceed 32.[
   1767c:	6d30 5b1b 6d30 000a 500a 6972 746e 6e69     0m.[0m...Printin
   1768c:	2067 7453 6361 206b 7254 6361 3a65 000a     g Stack Trace:..
   1769c:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
   176ac:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   176bc:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   176cc:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
   176dc:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
   176ec:	5420 7365 6574 3a64 2820 6564 6973 6572      Tested: (desire
   176fc:	5f64 7073 6565 5f64 6e69 6d5f 7a68 3c20     d_speed_in_mhz <
   1770c:	3320 3438 2620 2026 6564 6973 6572 5f64      384 && desired_
   1771c:	7073 6565 5f64 6e69 6d5f 7a68 3e20 3120     speed_in_mhz > 1
   1772c:	2932 200a 2020 2020 2020 2020 4620 6572     2).          Fre
   1773c:	7571 6e65 7963 6d20 7375 2074 6562 6c20     quency must be l
   1774c:	776f 7265 7420 6168 206e 3833 2034 484d     ower than 384 MH
   1775c:	617a 646e 6720 6572 7461 7265 7420 6168     zand greater tha
   1776c:	206e 726f 6520 7571 6c61 7420 206f 3231     n or equal to 12
   1777c:	4d20 7a48 5b1b 6d30 5b1b 6d30 000a 0000      MHz.[0m.[0m....
   1778c:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
   1779c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   177ac:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   177bc:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
   177cc:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
   177dc:	5420 7365 6574 3a64 2820 6964 6976 6564      Tested: (divide
   177ec:	5f72 6176 756c 2065 203c 2938 200a 2020     r_value < 8).   
   177fc:	2020 2020 2020 5020 4c4c 6420 7669 6469            PLL divid
   1780c:	7265 7620 6c61 6575 7720 6e65 2074 756f     er value went ou
   1781c:	2074 666f 6220 756f 646e 1b73 305b 1b6d     t of bounds.[0m.
   1782c:	305b 0a6d 0000 0000 5b1b 3134 436d 4952     [0m......[41mCRI
   1783c:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
   1784c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   1785c:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
   1786c:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
   1787c:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
   1788c:	2820 6166 736c 2965 200a 2020 2020 2020      (false).       
   1789c:	2020 5020 4c4c 6c20 636f 206b 6f63 6c75        PLL lock coul
   178ac:	2064 6f6e 2074 6562 6520 7473 6261 696c     d not be establi
   178bc:	6873 6465 6220 6665 726f 2065 6974 656d     shed before time
   178cc:	756f 1b74 305b 1b6d 305b 0a6d 0000 0000     out.[0m.[0m.....
   178dc:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
   178ec:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   178fc:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   1790c:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
   1791c:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
   1792c:	5420 7365 6574 3a64 2820 7063 5f75 6964      Tested: (cpu_di
   1793c:	6976 6564 2072 203c 3233 0a29 2020 2020     vider < 32).    
   1794c:	2020 2020 2020 6944 6976 6564 2072 756d           Divider mu
   1795c:	7473 276e 2074 7865 6563 6465 3320 1b32     stn't exceed 32.
   1796c:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3134     [0m.[0m......[41
   1797c:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   1798c:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   1799c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   179ac:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   179bc:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   179cc:	6574 3a64 2820 7266 7165 6575 636e 2079     ted: (frequency 
   179dc:	3d21 3020 0a29 2020 2020 2020 2020 2020     != 0).          
   179ec:	6143 6e6e 746f 6820 7661 2065 657a 6f72     Cannot have zero
   179fc:	7420 6369 736b 7020 7265 6d20 6369 6f72      ticks per micro
   17a0c:	6573 6f63 646e 202c 6c70 6165 6573 6320     second, please c
   17a1c:	6f68 736f 2065 2031 726f 6d20 726f 2e65     hoose 1 or more.
   17a2c:	5b1b 6d30 5b1b 6d30 000a 0000 5b1b 3334     .[0m.[0m.....[43
   17a3c:	206d 4157 4e52 4e49 1b47 305b 393b 6d34     m WARNING.[0;94m
   17a4c:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   17a5c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   17a6c:	7953 7473 6d65 5420 6d69 7265 6820 7361     System Timer has
   17a7c:	4620 4941 454c 2044 6f74 7320 6174 7472      FAILED to start
   17a8c:	1b21 305b 1b6d 305b 0a6d ff00               !.[0m.[0m...

00017a98 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::file>:
   17a98:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17aa8:	2e72 7068 0070 ffff                         r.hpp...

00017ab0 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   17ab0:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17ac0:	2e72 7068 0070 ffff                         r.hpp...

00017ac8 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   17ac8:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17ad8:	2e72 7068 0070 ffff                         r.hpp...

00017ae0 <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::file>:
   17ae0:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17af0:	2e72 7068 0070 ffff                         r.hpp...

00017af8 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::file>:
   17af8:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
   17b08:	2e72 7068 0070 ffff                         r.hpp...

00017b10 <Timer::kPowerbit>:
   17b10:	0001 0000 0002 0000 0016 0000 0017 0000     ................

00017b20 <Timer::kTimerIrq>:
   17b20:	0201 0403                                   ....

00017b24 <Timer::kTimerIsr>:
   17b24:	261d 0001 2659 0001 2695 0001 26d1 0001     .&..Y&...&...&..

00017b34 <Timer::Initialize(unsigned long, void (*)(), long)::file>:
   17b34:	6974 656d 2e72 7068 0070 ffff               timer.hpp...

00017b40 <Uart::kTxUartPortFunction>:
   17b40:	0201 0502                                   ....

00017b44 <Uart::kRxUartPortFunction>:
   17b44:	0201 0302                                   ....

00017b48 <Uart::kPowerbit>:
   17b48:	0003 0000 0018 0000 0019 0000 0008 0000     ................

00017b58 <LowLevelInit()::file>:
   17b58:	7473 7261 7574 2e70 7063 0070               startup.cpp.

00017b64 <vtable for Uart>:
	...
   17b6c:	1c15 0001 1ce1 0001 1e11 0001 1f45 0001     ............E...
   17b7c:	fffc ffff 0000 0000 0be9 0001 0c79 0001     ............y...
   17b8c:	0cd1 0001 0ce9 0001 0cfd 0001 0d3d 0001     ............=...
   17b9c:	0d6d 0001                                   m...

00017ba0 <vtable for Timer>:
	...
   17ba8:	197d 0001 1ae1 0001 1bd9 0001 fffc ffff     }...............
   17bb8:	0000 0000 0be9 0001 0c79 0001 0cd1 0001     ........y.......
   17bc8:	0ce9 0001 0cfd 0001 0d3d 0001 0d6d 0001     ........=...m...

00017bd8 <vtable for Pin>:
	...
   17be0:	134d 0001 13c5 0001 1445 0001 14b9 0001     M.......E.......
   17bf0:	152d 0001 15a9 0001 1625 0001 1699 0001     -.......%.......
   17c00:	1715 0001 1789 0001 17fd 0001 18d5 0001     ................
   17c10:	1901 0001                                   ....

00017c14 <vtable for SystemTimer>:
	...
   17c1c:	11e9 0001 121d 0001 12b9 0001 fffc ffff     ................
   17c2c:	0000 0000 0be9 0001 0c79 0001 0cd1 0001     ........y.......
   17c3c:	0ce9 0001 0cfd 0001 0d3d 0001 0d6d 0001     ........=...m...

00017c4c <vtable for Lpc40xxSystemController>:
	...
   17c54:	0be9 0001 0c79 0001 0cd1 0001 0ce9 0001     ....y...........
   17c64:	0cfd 0001 0d3d 0001 0d6d 0001               ....=...m...

00017c70 <Lpc40xxSystemController::SetPeripheralClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   17c70:	6976 7472 6175 206c 6f76 6469 4c20 6370     virtual void Lpc
   17c80:	3034 7878 7953 7473 6d65 6f43 746e 6f72     40xxSystemContro
   17c90:	6c6c 7265 3a3a 6553 5074 7265 7069 6568     ller::SetPeriphe
   17ca0:	6172 436c 6f6c 6b63 6944 6976 6564 2872     ralClockDivider(
   17cb0:	6975 746e 5f38 2974 ff00 ffff               uint8_t)....

00017cbc <Lpc40xxSystemController::SetMainPll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   17cbc:	6975 746e 3233 745f 4c20 6370 3034 7878     uint32_t Lpc40xx
   17ccc:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
   17cdc:	3a3a 6553 4d74 6961 506e 6c6c 4c28 6370     ::SetMainPll(Lpc
   17cec:	3034 7878 7953 7473 6d65 6f43 746e 6f72     40xxSystemContro
   17cfc:	6c6c 7265 3a3a 6c50 496c 706e 7475 202c     ller::PllInput, 
   17d0c:	6975 746e 3631 745f 0029 ffff               uint16_t)...

00017d18 <Lpc40xxSystemController::CalculatePll(Lpc40xxSystemController::PllInput, unsigned short)::__PRETTY_FUNCTION__>:
   17d18:	6975 746e 3233 745f 4c20 6370 3034 7878     uint32_t Lpc40xx
   17d28:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
   17d38:	3a3a 6143 636c 6c75 7461 5065 6c6c 4c28     ::CalculatePll(L
   17d48:	6370 3034 7878 7953 7473 6d65 6f43 746e     pc40xxSystemCont
   17d58:	6f72 6c6c 7265 3a3a 6c50 496c 706e 7475     roller::PllInput
   17d68:	202c 6975 746e 3631 745f 0029               , uint16_t).

00017d74 <Lpc40xxSystemController::SetCpuClockDivider(unsigned char)::__PRETTY_FUNCTION__>:
   17d74:	6f76 6469 4c20 6370 3034 7878 7953 7473     void Lpc40xxSyst
   17d84:	6d65 6f43 746e 6f72 6c6c 7265 3a3a 6553     emController::Se
   17d94:	4374 7570 6c43 636f 446b 7669 6469 7265     tCpuClockDivider
   17da4:	7528 6e69 3874 745f 0029 ffff               (uint8_t)...

00017db0 <Timer::Initialize(unsigned long, void (*)(), long)::__PRETTY_FUNCTION__>:
   17db0:	6976 7472 6175 206c 6f76 6469 5420 6d69     virtual void Tim
   17dc0:	7265 3a3a 6e49 7469 6169 696c 657a 7528     er::Initialize(u
   17dd0:	6e69 3374 5f32 2c74 4920 7273 6f50 6e69     int32_t, IsrPoin
   17de0:	6574 2c72 6920 746e 3233 745f 0029 ffff     ter, int32_t)...

00017df0 <LowLevelInit()::__PRETTY_FUNCTION__>:
   17df0:	6f76 6469 4c20 776f 654c 6576 496c 696e     void LowLevelIni
   17e00:	2874 0029 7453 6361 206b 6544 7470 2068     t().Stack Depth 
   17e10:	203d 7a25 0a64 0000 2020 2523 757a 203a     = %zd...  #%zu: 
   17e20:	7830 7025 000a 0000 520a 6e75 203a 6874     0x%p.....Run: th
   17e30:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
   17e40:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
   17e50:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
   17e60:	200a 1b20 315b 333b 6d37 616d 656b 7320     .  .[1;37mmake s
   17e70:	6174 6b63 7274 6361 2d65 7325 5420 4152     tacktrace-%s TRA
   17e80:	4543 3d53 0022 0000 7830 7025 0000 0000     CES="...0x%p....
   17e90:	3020 2578 0070 0000 0a22 5b1b 6d30 0000      0x%p..."..[0m..
   17ea0:	6854 7369 7720 6c69 206c 6572 6f70 7472     This will report
   17eb0:	7420 6568 6620 6c69 2065 6e61 2064 696c      the file and li
   17ec0:	656e 6e20 6d75 6562 2072 6874 7461 6c20     ne number that l
   17ed0:	6465 7420 206f 6874 7369 6620 6e75 7463     ed to this funct
   17ee0:	6f69 206e 6562 6e69 2067 6163 6c6c 6465     ion being called
   17ef0:	002e 0000 7061 6c70 6369 7461 6f69 006e     ....application.
   17f00:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
   17f10:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   17f20:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   17f30:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
   17f40:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
   17f50:	5420 7365 6574 3a64 2820 7369 2072 3d21      Tested: (isr !=
   17f60:	4920 746e 7265 7572 7470 6f4c 6b6f 7075      InterruptLookup
   17f70:	6148 646e 656c 2972 200a 2020 2020 2020     Handler).       
   17f80:	2020 4e20 206f 5349 2052 6f66 6e75 2064        No ISR found 
   17f90:	6f66 2072 6874 2065 6576 7463 726f 2520     for the vector %
   17fa0:	1b75 305b 1b6d 305b 0a6d 0000 500a 6972     u.[0m.[0m....Pri
   17fb0:	746e 6e69 2067 7453 6361 206b 7254 6361     nting Stack Trac
   17fc0:	3a65 000a 5b1b 3134 486d 7261 2064 6146     e:...[41mHard Fa
   17fd0:	6c75 2074 7845 6563 7470 6f69 206e 634f     ult Exception Oc
   17fe0:	7563 7272 6465 0a21 5b1b 6d30 0000 0000     curred!..[0m....
   17ff0:	3072 203a 7830 3025 6c38 2c58 7220 3a31     r0: 0x%08lX, r1:
   18000:	3020 2578 3830 586c 202c 3272 203a 7830      0x%08lX, r2: 0x
   18010:	3025 6c38 2c58 7220 3a33 3020 2578 3830     %08lX, r3: 0x%08
   18020:	586c 000a 3172 3a32 3020 2578 3830 586c     lX..r12: 0x%08lX
   18030:	202c 726c 203a 7830 3025 6c38 2c58 7020     , lr: 0x%08lX, p
   18040:	3a63 3020 2578 3830 586c 202c 7370 3a72     c: 0x%08lX, psr:
   18050:	3020 2578 3830 586c 000a ffff                0x%08lX....

0001805c <InterruptLookupHandler::file>:
   1805c:	6e69 6574 7272 7075 2e74 7063 0070 ffff     interrupt.cpp...

0001806c <InterruptLookupHandler::__PRETTY_FUNCTION__>:
   1806c:	6f76 6469 4920 746e 7265 7572 7470 6f4c     void InterruptLo
   1807c:	6b6f 7075 6148 646e 656c 2872 0029 ffff     okupHandler()...

0001808c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
   1808c:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
   1809c:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
   180ac:	bc20 4cbe 6b28 4e6e 7453 6361 206b 6544      ..L(knNStack De
   180bc:	7470 2068 203d 7a25 0a64 0000 2020 2523     pth = %zd...  #%
   180cc:	757a 203a 7830 7025 000a 0000 520a 6e75     zu: 0x%p.....Run
   180dc:	203a 6874 2065 6f66 6c6c 776f 6e69 2067     : the following 
   180ec:	6f63 6d6d 6e61 2064 6e69 7920 756f 2072     command in your 
   180fc:	7270 6a6f 6365 2074 6964 6572 7463 726f     project director
   1810c:	0079 0000 200a 1b20 315b 333b 6d37 616d     y....  .[1;37mma
   1811c:	656b 7320 6174 6b63 7274 6361 2d65 7325     ke stacktrace-%s
   1812c:	5420 4152 4543 3d53 0022 0000 7830 7025      TRACES="...0x%p
   1813c:	0000 0000 3020 2578 0070 0000 0a22 5b1b     .... 0x%p..."..[
   1814c:	6d30 0000 6854 7369 7720 6c69 206c 6572     0m..This will re
   1815c:	6f70 7472 7420 6568 6620 6c69 2065 6e61     port the file an
   1816c:	2064 696c 656e 6e20 6d75 6562 2072 6874     d line number th
   1817c:	7461 6c20 6465 7420 206f 6874 7369 6620     at led to this f
   1818c:	6e75 7463 6f69 206e 6562 6e69 2067 6163     unction being ca
   1819c:	6c6c 6465 002e 0000 7061 6c70 6369 7461     lled....applicat
   181ac:	6f69 006e 5b1b 3334 206d 4157 4e52 4e49     ion..[43m WARNIN
   181bc:	1b47 305b 393b 6d34 253a 3a73 5b1b 3b30     G.[0;94m:%s:.[0;
   181cc:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   181dc:	1b20 305b 333b 6d37 6f50 7472 2520 2064      .[0;37mPort %d 
   181ec:	6163 6e6e 746f 6220 2065 7375 6465 6620     cannot be used f
   181fc:	726f 4520 7478 7265 616e 206c 6e49 6574     or External Inte
   1820c:	7272 7075 7374 202e 654e 6465 7420 206f     rrupts. Need to 
   1821c:	7375 2065 5047 4f49 6f20 206e 6f50 7472     use GPIO on Port
   1822c:	3020 6f20 2072 2e32 5b1b 6d30 5b1b 6d30      0 or 2..[0m.[0m
   1823c:	000a 0000 5b1b 3334 206d 4157 4e52 4e49     .....[43m WARNIN
   1824c:	1b47 305b 393b 6d34 253a 3a73 5b1b 3b30     G.[0;94m:%s:.[0;
   1825c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   1826c:	1b20 305b 333b 6d37 6445 6567 2520 2064      .[0;37mEdge %d 
   1827c:	6163 6e6e 746f 6220 2065 7375 6465 6620     cannot be used f
   1828c:	726f 4520 7478 7265 616e 206c 6e49 6574     or External Inte
   1829c:	7272 7075 7374 4e2e 6565 2064 6f74 7520     rrupts.Need to u
   182ac:	6573 6120 7220 7369 6e69 2c67 6620 6c61     se a rising, fal
   182bc:	696c 676e 202c 726f 6220 746f 2068 6f63     ling, or both co
   182cc:	666e 6769 7275 7461 6f69 2e6e 5b1b 6d30     nfiguration..[0m
   182dc:	000a 0000 5b1b 3134 436d 4952 4954 4143     .....[41mCRITICA
   182ec:	1b4c 305b 393b 6d34 253a 3a73 5b1b 3b30     L.[0;94m:%s:.[0;
   182fc:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   1830c:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
   1831c:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
   1832c:	6974 6e6f 5420 7365 6574 3a64 2820 6570     tion Tested: (pe
   1833c:	6972 6870 7265 6c61 645f 7669 6469 7265     ripheral_divider
   1834c:	3c20 203d 2934 200a 2020 2020 2020 2020      <= 4).         
   1835c:	4420 7669 6469 7265 6d20 7375 6e74 7427      Divider mustn't
   1836c:	6520 6378 6565 2064 3233 5b1b 6d30 5b1b      exceed 32.[0m.[
   1837c:	6d30 000a 500a 6972 746e 6e69 2067 7453     0m...Printing St
   1838c:	6361 206b 7254 6361 3a65 000a 5b1b 3134     ack Trace:...[41
   1839c:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   183ac:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   183bc:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   183cc:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   183dc:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   183ec:	6574 3a64 2820 6564 6973 6572 5f64 7073     ted: (desired_sp
   183fc:	6565 5f64 6e69 6d5f 7a68 3c20 3320 3438     eed_in_mhz < 384
   1840c:	2620 2026 6564 6973 6572 5f64 7073 6565      && desired_spee
   1841c:	5f64 6e69 6d5f 7a68 3e20 3120 2932 200a     d_in_mhz > 12). 
   1842c:	2020 2020 2020 2020 4620 6572 7571 6e65              Frequen
   1843c:	7963 6d20 7375 2074 6562 6c20 776f 7265     cy must be lower
   1844c:	7420 6168 206e 3833 2034 484d 617a 646e      than 384 MHzand
   1845c:	6720 6572 7461 7265 7420 6168 206e 726f      greater than or
   1846c:	6520 7571 6c61 7420 206f 3231 4d20 7a48      equal to 12 MHz
   1847c:	5b1b 6d30 5b1b 6d30 000a 0000 5b1b 3134     .[0m.[0m.....[41
   1848c:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   1849c:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   184ac:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   184bc:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   184cc:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   184dc:	6574 3a64 2820 6964 6976 6564 5f72 6176     ted: (divider_va
   184ec:	756c 2065 203c 2938 200a 2020 2020 2020     lue < 8).       
   184fc:	2020 5020 4c4c 6420 7669 6469 7265 7620        PLL divider v
   1850c:	6c61 6575 7720 6e65 2074 756f 2074 666f     alue went out of
   1851c:	6220 756f 646e 1b73 305b 1b6d 305b 0a6d      bounds.[0m.[0m.
   1852c:	0000 0000 5b1b 3134 436d 4952 4954 4143     .....[41mCRITICA
   1853c:	1b4c 305b 393b 6d34 253a 3a73 5b1b 3b30     L.[0;94m:%s:.[0;
   1854c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   1855c:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
   1856c:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
   1857c:	6974 6e6f 5420 7365 6574 3a64 2820 6166     tion Tested: (fa
   1858c:	736c 2965 200a 2020 2020 2020 2020 5020     lse).          P
   1859c:	4c4c 6c20 636f 206b 6f63 6c75 2064 6f6e     LL lock could no
   185ac:	2074 6562 6520 7473 6261 696c 6873 6465     t be established
   185bc:	6220 6665 726f 2065 6974 656d 756f 1b74      before timeout.
   185cc:	305b 1b6d 305b 0a6d 0000 0000 5b1b 3134     [0m.[0m......[41
   185dc:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
   185ec:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   185fc:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   1860c:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
   1861c:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
   1862c:	6574 3a64 2820 7063 5f75 6964 6976 6564     ted: (cpu_divide
   1863c:	2072 203c 3233 0a29 2020 2020 2020 2020     r < 32).        
   1864c:	2020 6944 6976 6564 2072 756d 7473 276e       Divider mustn'
   1865c:	2074 7865 6563 6465 3320 1b32 305b 1b6d     t exceed 32.[0m.
   1866c:	305b 0a6d 0000 0000 5b1b 3534 206d 2020     [0m......[45m   
   1867c:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   1868c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   1869c:	256d 3e64 1b20 305b 333b 6d37 6146 6c69     m%d> .[0;37mFail
   186ac:	6465 7420 206f 6e69 7469 6169 6574 5320     ed to initiate S
   186bc:	4950 6d20 646f 2065 6977 6874 6e69 7420     PI mode within t
   186cc:	6d69 6f65 7475 202e 6241 726f 6974 676e     imeout. Aborting
   186dc:	1b21 305b 0a6d 0000 5b1b 3534 206d 2020     !.[0m....[45m   
   186ec:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   186fc:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   1870c:	256d 3e64 1b20 305b 333b 6d37 6552 7073     m%d> .[0;37mResp
   1871c:	6e6f 6573 6920 746e 6765 6972 7974 6320     onse integrity c
   1872c:	6568 6b63 6620 6961 656c 2e64 4120 6f62     heck failed. Abo
   1873c:	7472 6e69 2167 5b1b 6d30 000a 5b1b 3534     rting!.[0m...[45
   1874c:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   1875c:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   1876c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   1877c:	6e55 7573 7070 726f 6574 2064 6f76 746c     Unsupported volt
   1878c:	6761 2065 6e69 7520 6573 202e 6241 726f     age in use. Abor
   1879c:	6974 676e 1b21 305b 0a6d 0000 5b1b 3534     ting!.[0m....[45
   187ac:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   187bc:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   187cc:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   187dc:	4453 4320 7261 2064 6974 656d 2064 756f     SD Card timed ou
   187ec:	2e74 4120 6f62 7472 6e69 2167 5b1b 6d30     t. Aborting!.[0m
   187fc:	000a 0000 7274 6575 0000 0000 6166 736c     ....true....fals
   1880c:	0065 0000 5b1b 3534 206d 2020 5245 4f52     e....[45m   ERRO
   1881c:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   1882c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   1883c:	1b20 305b 333b 6d37 6857 6c69 2065 6552      .[0;37mWhile Re
   1884c:	6461 6e69 2067 6c42 636f 206b 2523 2064     ading Block #%d 
   1885c:	5243 3143 3a36 5b1b 6d30 000a 5b1b 3534     CRC16:.[0m...[45
   1886c:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   1887c:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   1888c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   1889c:	7845 6570 7463 6465 2720 7830 3025 5834     Expected '0x%04X
   188ac:	1b27 305b 0a6d 0000 5b1b 3534 206d 2020     '.[0m....[45m   
   188bc:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   188cc:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   188dc:	256d 3e64 1b20 305b 333b 6d37 6f47 2074     m%d> .[0;37mGot 
   188ec:	3027 2578 3430 2758 5b1b 6d30 000a 0000     '0x%04X'.[0m....
   188fc:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   1890c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   1891c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   1892c:	333b 6d37 6552 6461 4320 646d 7720 7361     ;37mRead Cmd was
   1893c:	6e20 746f 6120 6b63 6f6e 6c77 6465 6567      not acknowledge
   1894c:	2064 7270 706f 7265 796c 1b21 305b 0a6d     d properly!.[0m.
   1895c:	0000 0000 5b1b 3534 206d 2020 5245 4f52     .....[45m   ERRO
   1896c:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   1897c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   1898c:	1b20 305b 333b 6d37 6150 6172 656d 6574      .[0;37mParamete
   1899c:	2072 7245 3a72 2520 1b73 305b 0a6d 0000     r Err: %s.[0m...
   189ac:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   189bc:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   189cc:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   189dc:	333b 6d37 6441 7264 4520 7272 203a 7325     ;37mAddr Err: %s
   189ec:	5b1b 6d30 000a 0000 5b1b 3534 206d 2020     .[0m.....[45m   
   189fc:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
   18a0c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
   18a1c:	256d 3e64 1b20 305b 333b 6d37 7245 7361     m%d> .[0;37mEras
   18a2c:	2065 6553 2071 7245 3a72 2520 1b73 305b     e Seq Err: %s.[0
   18a3c:	0a6d 0000 5b1b 3534 206d 2020 5245 4f52     m....[45m   ERRO
   18a4c:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   18a5c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18a6c:	1b20 305b 333b 6d37 6f43 206d 5243 2043      .[0;37mCom CRC 
   18a7c:	7245 3a72 2520 1b73 305b 0a6d 0000 0000     Err: %s.[0m.....
   18a8c:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   18a9c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   18aac:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   18abc:	333b 6d37 6c49 656c 6167 206c 6d43 2064     ;37mIllegal Cmd 
   18acc:	7245 3a72 2520 1b73 305b 0a6d 0000 0000     Err: %s.[0m.....
   18adc:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   18aec:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   18afc:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   18b0c:	333b 6d37 7245 7361 2065 6552 6573 3a74     ;37mErase Reset:
   18b1c:	2520 1b73 305b 0a6d 0000 0000 5b1b 3534      %s.[0m......[45
   18b2c:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   18b3c:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18b4c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18b5c:	6e49 4920 6c64 3a65 2520 1b73 305b 0a6d     In Idle: %s.[0m.
   18b6c:	0000 0000 5b1b 3534 206d 2020 5245 4f52     .....[45m   ERRO
   18b7c:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
   18b8c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
   18b9c:	1b20 305b 333b 6d37 6146 6c69 6465 7420      .[0;37mFailed t
   18bac:	206f 6573 2074 7453 7261 2074 6441 7264     o set Start Addr
   18bbc:	7365 2173 5b1b 6d30 000a 0000 5b1b 3534     ess!.[0m.....[45
   18bcc:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   18bdc:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18bec:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18bfc:	6146 6c69 6465 7420 206f 6573 2074 6e45     Failed to set En
   18c0c:	2064 6441 7264 7365 2173 5b1b 6d30 000a     d Address!.[0m..
   18c1c:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
   18c2c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
   18c3c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
   18c4c:	333b 6d37 6e55 6e6b 776f 206e 6572 7073     ;37mUnknown resp
   18c5c:	6e6f 6573 7420 7079 2e65 4120 6f62 7472     onse type. Abort
   18c6c:	6e69 2167 5b1b 6d30 000a 0000 5b1b 3534     ing!.[0m.....[45
   18c7c:	206d 2020 5245 4f52 1b52 305b 393b 6d34     m   ERROR.[0;94m
   18c8c:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
   18c9c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
   18cac:	6552 7073 6e6f 6573 7520 736e 7075 6f70     Response unsuppo
   18cbc:	7472 6465 6920 206e 5053 2049 6f6d 6564     rted in SPI mode
   18ccc:	202e 6241 726f 6974 676e 1b21 305b 0a6d     . Aborting!.[0m.
   18cdc:	ff00 ffff                                   ....

00018ce0 <Gpio::ValidPortCheck()::file>:
   18ce0:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

00018cec <Gpio::SetInterruptEdge(GpioInterface::Edge)::file>:
   18cec:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

00018cf8 <Gpio::ClearInterruptEdge(GpioInterface::Edge)::file>:
   18cf8:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

00018d04 <Ssp::kPinSelect>:
   18d04:	0202 ff04                                   ....

00018d08 <Ssp::kSspPinMatrix>:
   18d08:	7be0 0001 1200 0000 7be0 0001 1100 0000     .{.......{......
   18d18:	7be0 0001 0f00 0000 7be0 0001 0900 0000     .{.......{......
   18d28:	7be0 0001 0800 0000 7be0 0001 0700 0000     .{.......{......
   18d38:	7be0 0001 0101 0000 7be0 0001 0401 0000     .{.......{......
   18d48:	7be0 0001 0001 0000                         .{......

00018d50 <Ssp::kPowerBit>:
   18d50:	0015 0000 000a 0000 0014 0000               ............

00018d5c <Sd::kCrcTable8>:
   18d5c:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   18d6c:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   18d7c:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   18d8c:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   18d9c:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   18dac:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   18dbc:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   18dcc:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   18ddc:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   18dec:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   18dfc:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   18e0c:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   18e1c:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   18e2c:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   18e3c:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   18e4c:	070e 151c 232a 3138 4f46 5d54 6b62 0070     ....*#81FOT]bkp.

00018e5c <Sd::kCrcTable16>:
   18e5c:	0000 1021 2042 3063 4084 50a5 60c6 70e7     ..!.B c0.@.P.`.p
   18e6c:	8108 9129 a14a b16b c18c d1ad e1ce f1ef     ..).J.k.........
   18e7c:	1231 0210 3273 2252 52b5 4294 72f7 62d6     1...s2R".R.B.r.b
   18e8c:	9339 8318 b37b a35a d3bd c39c f3ff e3de     9...{.Z.........
   18e9c:	2462 3443 0420 1401 64e6 74c7 44a4 5485     b$C4 ....d.t.D.T
   18eac:	a56a b54b 8528 9509 e5ee f5cf c5ac d58d     j.K.(...........
   18ebc:	3653 2672 1611 0630 76d7 66f6 5695 46b4     S6r&..0..v.f.V.F
   18ecc:	b75b a77a 9719 8738 f7df e7fe d79d c7bc     [.z...8.........
   18edc:	48c4 58e5 6886 78a7 0840 1861 2802 3823     .H.X.h.x@.a..(#8
   18eec:	c9cc d9ed e98e f9af 8948 9969 a90a b92b     ........H.i...+.
   18efc:	5af5 4ad4 7ab7 6a96 1a71 0a50 3a33 2a12     .Z.J.z.jq.P.3:.*
   18f0c:	dbfd cbdc fbbf eb9e 9b79 8b58 bb3b ab1a     ........y.X.;...
   18f1c:	6ca6 7c87 4ce4 5cc5 2c22 3c03 0c60 1c41     .l.|.L.\",.<`.A.
   18f2c:	edae fd8f cdec ddcd ad2a bd0b 8d68 9d49     ........*...h.I.
   18f3c:	7e97 6eb6 5ed5 4ef4 3e13 2e32 1e51 0e70     .~.n.^.N.>2.Q.p.
   18f4c:	ff9f efbe dfdd cffc bf1b af3a 9f59 8f78     ..........:.Y.x.
   18f5c:	9188 81a9 b1ca a1eb d10c c12d f14e e16f     ..........-.N.o.
   18f6c:	1080 00a1 30c2 20e3 5004 4025 7046 6067     .....0. .P%@Fpg`
   18f7c:	83b9 9398 a3fb b3da c33d d31c e37f f35e     ........=.....^.
   18f8c:	02b1 1290 22f3 32d2 4235 5214 6277 7256     .....".25B.RwbVr
   18f9c:	b5ea a5cb 95a8 8589 f56e e54f d52c c50d     ........n.O.,...
   18fac:	34e2 24c3 14a0 0481 7466 6447 5424 4405     .4.$....ftGd$T.D
   18fbc:	a7db b7fa 8799 97b8 e75f f77e c71d d73c     ........_.~...<.
   18fcc:	26d3 36f2 0691 16b0 6657 7676 4615 5634     .&.6....Wfvv.F4V
   18fdc:	d94c c96d f90e e92f 99c8 89e9 b98a a9ab     L.m.../.........
   18fec:	5844 4865 7806 6827 18c0 08e1 3882 28a3     DXeH.x'h.....8.(
   18ffc:	cb7d db5c eb3f fb1e 8bf9 9bd8 abbb bb9a     }.\.?...........
   1900c:	4a75 5a54 6a37 7a16 0af1 1ad0 2ab3 3a92     uJTZ7j.z.....*.:
   1901c:	fd2e ed0f dd6c cd4d bdaa ad8b 9de8 8dc9     ....l.M.........
   1902c:	7c26 6c07 5c64 4c45 3ca2 2c83 1ce0 0cc1     &|.ld\EL.<.,....
   1903c:	ef1f ff3e cf5d df7c af9b bfba 8fd9 9ff8     ..>.].|.........
   1904c:	6e17 7e36 4e55 5e74 2e93 3eb2 0ed1 1ef0     .n6~UNt^...>....

0001905c <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1905c:	6473 682e 7070 ff00                         sd.hpp..

00019064 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   19064:	6473 682e 7070 ff00                         sd.hpp..

0001906c <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   1906c:	6473 682e 7070 ff00                         sd.hpp..

00019074 <Sd::Mount(SdInterface::CardInfo_t*)::file>:
   19074:	6473 682e 7070 ff00                         sd.hpp..

0001907c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1907c:	6473 682e 7070 ff00                         sd.hpp..

00019084 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   19084:	6473 682e 7070 ff00                         sd.hpp..

0001908c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1908c:	6473 682e 7070 ff00                         sd.hpp..

00019094 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   19094:	6473 682e 7070 ff00                         sd.hpp..

0001909c <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   1909c:	6473 682e 7070 ff00                         sd.hpp..

000190a4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   190a4:	6473 682e 7070 ff00                         sd.hpp..

000190ac <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   190ac:	6473 682e 7070 ff00                         sd.hpp..

000190b4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   190b4:	6473 682e 7070 ff00                         sd.hpp..

000190bc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   190bc:	6473 682e 7070 ff00                         sd.hpp..

000190c4 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   190c4:	6473 682e 7070 ff00                         sd.hpp..

000190cc <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::file>:
   190cc:	6473 682e 7070 ff00                         sd.hpp..

000190d4 <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   190d4:	6473 682e 7070 ff00                         sd.hpp..

000190dc <Sd::DeleteBlock(unsigned long, unsigned long)::file>:
   190dc:	6473 682e 7070 ff00                         sd.hpp..

000190e4 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   190e4:	6473 682e 7070 ff00                         sd.hpp..

000190ec <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::file>:
   190ec:	6473 682e 7070 ff00                         sd.hpp..

000190f4 <vtable for Sd>:
	...
   190fc:	6611 0001 5a69 0001 5b19 0001 5f2d 0001     .f..iZ...[..-_..
   1910c:	6345 0001 64f1 0001 6ab1 0001 6af9 0001     Ec...d...j...j..
   1911c:	6b69 0001                                   ik..

00019120 <vtable for SdInterface>:
	...
   19128:	6e99 0001 6e99 0001 6e99 0001 6e99 0001     .n...n...n...n..
   19138:	6e99 0001 6e99 0001 6e99 0001 6e99 0001     .n...n...n...n..
   19148:	6e99 0001                                   .n..

0001914c <vtable for Ssp>:
	...
   19154:	5005 0001 50e9 0001 5161 0001 51cd 0001     .P...P..aQ...Q..
   19164:	52b9 0001 54c5 0001 5625 0001 5811 0001     .R...T..%V...X..
   19174:	fffc ffff 0000 0000 0be9 0001 0c79 0001     ............y...
   19184:	0cd1 0001 0ce9 0001 0cfd 0001 0d3d 0001     ............=...
   19194:	0d6d 0001                                   m...

00019198 <vtable for SspInterface>:
	...
   191a0:	6e99 0001 6e99 0001 6e99 0001 6e99 0001     .n...n...n...n..
   191b0:	6e99 0001 6e99 0001 6e99 0001 6e99 0001     .n...n...n...n..

000191c0 <vtable for SystemControllerInterface>:
	...
   191c8:	6e99 0001 6e99 0001 6e99 0001 6e99 0001     .n...n...n...n..
   191d8:	6e99 0001 6e99 0001 6e99 0001               .n...n...n..

000191e4 <vtable for Gpio>:
	...
   191ec:	454d 0001 45c9 0001 4645 0001 4689 0001     ME...E..EF...F..
   191fc:	46ed 0001 4751 0001 4795 0001 4801 0001     .F..QG...G...H..
   1920c:	4879 0001 48e9 0001 4b81 0001 4bc9 0001     yH...H...K...K..
   1921c:	4991 0001 49ed 0001 4a71 0001 4af9 0001     .I...I..qJ...J..

0001922c <vtable for GpioInterface>:
	...
   19234:	6e99 0001 6e99 0001 6e99 0001 6e99 0001     .n...n...n...n..
   19244:	6e99 0001 6e99 0001 6e99 0001 6e99 0001     .n...n...n...n..
   19254:	6e99 0001 6e99 0001 6e99 0001 6e99 0001     .n...n...n...n..
   19264:	6e99 0001 6e99 0001 6e99 0001 6e99 0001     .n...n...n...n..

00019274 <vtable for PinInterface>:
	...
   1927c:	6e99 0001 6e99 0001 6e99 0001 6e99 0001     .n...n...n...n..
   1928c:	6e99 0001 6e99 0001 6e99 0001 6e99 0001     .n...n...n...n..
   1929c:	6e99 0001 6e99 0001 6e99 0001 6e99 0001     .n...n...n...n..
   192ac:	6e99 0001                                   .n..

000192b0 <Gpio::ClearInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   192b0:	6976 7472 6175 206c 6f76 6469 4720 6970     virtual void Gpi
   192c0:	3a6f 433a 656c 7261 6e49 6574 7272 7075     o::ClearInterrup
   192d0:	4574 6764 2865 7047 6f69 6e49 6574 6672     tEdge(GpioInterf
   192e0:	6361 3a65 453a 6764 2965 ff00               ace::Edge)..

000192ec <Gpio::ValidPortCheck()::__PRETTY_FUNCTION__>:
   192ec:	6f62 6c6f 4720 6970 3a6f 563a 6c61 6469     bool Gpio::Valid
   192fc:	6f50 7472 6843 6365 286b 0029               PortCheck().

00019308 <Gpio::SetInterruptEdge(GpioInterface::Edge)::__PRETTY_FUNCTION__>:
   19308:	6976 7472 6175 206c 6f76 6469 4720 6970     virtual void Gpi
   19318:	3a6f 533a 7465 6e49 6574 7272 7075 4574     o::SetInterruptE
   19328:	6764 2865 7047 6f69 6e49 6574 6672 6361     dge(GpioInterfac
   19338:	3a65 453a 6764 2965 ff00 ffff               e::Edge)....

00019344 <Sd::Mount(SdInterface::CardInfo_t*)::__PRETTY_FUNCTION__>:
   19344:	6976 7472 6175 206c 6f62 6c6f 5320 3a64     virtual bool Sd:
   19354:	4d3a 756f 746e 5328 4964 746e 7265 6166     :Mount(SdInterfa
   19364:	6563 3a3a 6143 6472 6e49 6f66 745f 292a     ce::CardInfo_t*)
   19374:	ff00 ffff                                   ....

00019378 <Sd::ReadBlock(unsigned long, unsigned char*, unsigned long)::__PRETTY_FUNCTION__>:
   19378:	6976 7472 6175 206c 6975 746e 5f38 2074     virtual uint8_t 
   19388:	6453 3a3a 6552 6461 6c42 636f 286b 6975     Sd::ReadBlock(ui
   19398:	746e 3233 745f 202c 6975 746e 5f38 2a74     nt32_t, uint8_t*
   193a8:	202c 6975 746e 3233 745f 0029               , uint32_t).

000193b4 <Sd::DeleteBlock(unsigned long, unsigned long)::__PRETTY_FUNCTION__>:
   193b4:	6976 7472 6175 206c 6975 746e 5f38 2074     virtual uint8_t 
   193c4:	6453 3a3a 6544 656c 6574 6c42 636f 286b     Sd::DeleteBlock(
   193d4:	6975 746e 3233 745f 202c 6975 746e 3233     uint32_t, uint32
   193e4:	745f 0029                                   _t).

000193e8 <Sd::SendCmd(SdInterface::Command, unsigned long, unsigned char*, unsigned long, SdInterface::KeepAlive)::__PRETTY_FUNCTION__>:
   193e8:	6976 7472 6175 206c 6975 746e 3233 745f     virtual uint32_t
   193f8:	5320 3a64 533a 6e65 4364 646d 5328 4964      Sd::SendCmd(SdI
   19408:	746e 7265 6166 6563 3a3a 6f43 6d6d 6e61     nterface::Comman
   19418:	2c64 7520 6e69 3374 5f32 2c74 7520 6e69     d, uint32_t, uin
   19428:	3874 745f 2c2a 7520 6e69 3374 5f32 2c74     t8_t*, uint32_t,
   19438:	5320 4964 746e 7265 6166 6563 3a3a 654b      SdInterface::Ke
   19448:	7065 6c41 7669 2965 ff00 ffff               epAlive)....

00019454 <__sf_fake_stderr>:
	...

00019474 <__sf_fake_stdin>:
	...

00019494 <__sf_fake_stdout>:
	...
